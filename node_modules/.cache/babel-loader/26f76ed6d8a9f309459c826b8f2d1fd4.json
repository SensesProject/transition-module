{"remainingRequest":"/Users/francescamorini/projects/senses/node_modules/babel-loader/lib/index.js!/Users/francescamorini/projects/senses/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/francescamorini/projects/senses/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/francescamorini/projects/senses/src/components/EnergyCarriers.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/francescamorini/projects/senses/src/components/EnergyCarriers.vue","mtime":1575299662971},{"path":"/Users/francescamorini/projects/senses/node_modules/cache-loader/dist/cjs.js","mtime":1575047512487},{"path":"/Users/francescamorini/projects/senses/node_modules/babel-loader/lib/index.js","mtime":1575047512399},{"path":"/Users/francescamorini/projects/senses/node_modules/cache-loader/dist/cjs.js","mtime":1575047512487},{"path":"/Users/francescamorini/projects/senses/node_modules/vue-loader/lib/index.js","mtime":1575047516506}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["EnergyCarriers.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\n  <div class=\"visualization\" id=\"carriers\" width=\"90%\">\n      <div v-if=\"step === 5\" class=\"regionselect\">\n     <SensesSelect\n       class=\"selector\"\n       :options=\"regionsArray\"\n       v-model=\"selected\"\n     />\n     <p id=\"select-label\">\n       Use the selector above to see energy carriers distribution across regions.\n     </p>\n     <p id=\"emissions-label\">\n       <span class=\"highlight\">\n         {{ selected }}\n       </span>\n       is producing the\n       <span class=\"dotted\">{{ findPerc.perc }}%</span>\n       of the total global energy.\n      <br/>\n       Equals to\n       <span class=\"dotted\">\n         {{ findPerc.absValue }} EJ/yr\n       </span>.\n     </p>\n    </div>\n    <svg width=\"100%\" height=\"100%\" :transform=\"'translate('+ width / 12 + ',15)'\">\n      <Arrows :step=\"step\" :transform=\"'translate('+ margin.left + ',40)'\" v-if=\"step >= 8\"/>\n      <g :transform=\"'translate('+ (margin.left + 65) + ',0)'\">\n        <text\n        v-for=\"(energy, i) in createRect[0].rects\"\n        class=\"fuel-labels\"\n        v-bind:key=\"energy.labels + i\"\n        :id='energy.labels'\n        :x=\"energy.posX\"\n        :y= 'height - (height / 4)'\n        v-on:click=\"isActive = energy.labels\"\n        >\n        {{ energy.labels }}\n        <tspan\n        :data=\"sumCarriers\"\n        :id='energy.labels'\n        :x=\"energy.posX\"\n        :y= 'height - (height / 4) + 20'\n        class=\"energy_sum\"\n        :class='isActive === energy.labels ? \"is-active\" : \"is-inactive\"'\n        >\n        {{ sumCarriers[i] }} EJ/yr\n        </tspan>\n      </text>\n        <g\n          v-for=\"(sector,i) in createRect\"\n          v-bind:key=\"i\"\n          :id=\"sector.sector\"\n          :transform=\"'translate(5,' + sector.sectorHeight +')'\"\n        >\n          <rect\n            class=\"fuel_rect\"\n            :class='isActive === rect.labels ? [sector.sector, rect.labels, \"is-fill\"] : [sector.sector, rect.labels, \"is-empty\"]'\n            v-for=\"(rect, i) in sector.rects\"\n            v-bind:key=\"i\"\n            :id=\"rect.labels\"\n            :x=\"rect.dist\"\n            :width=\"rect.rectWidth\"\n            :height=\"sector.rectHeight\"\n          />\n        </g>\n        <text\n        class=\"sector-labels\"\n        v-for=\"(sector) in createRect\"\n        v-bind:key=\"sector.sector\"\n        :x='(width + margin.left) / 2'\n        :y='sector.sectorHeight + 30'\n        >\n        {{sector.sector}}\n      </text>\n      </g>\n    </svg>\n  </div>\n</template>\n\n<script>\nimport * as d3 from 'd3'\nimport _ from 'lodash'\n\n// data\nimport CarriersReport from '../assets/data/world_regional_report.json'\nimport ElectrificationSteps from '../assets/data/electrification-steps.json'\n\n// Components\nimport SensesSelect from 'library/src/components/SensesSelect.vue'\nimport Arrows from './subcomponents/Arrows.vue'\n\nexport default {\n  name: 'EnergyCarriers',\n  props: {\n    width: {\n      type: Number,\n      required: true\n    },\n    height: {\n      type: Number,\n      required: true\n    },\n    step: {\n      type: Number,\n      default: 0\n    }\n  },\n  components: {\n    SensesSelect,\n    Arrows\n  },\n  data () {\n    return {\n      CarriersReport,\n      ElectrificationSteps,\n      selected: 'World',\n      isActive: '',\n      margin: {\n        left: 5,\n        top: 30,\n        bottom: 30,\n        right: 40\n      }\n    }\n  },\n  computed: {\n    innerWidth () {\n      return this.width - this.margin.left - this.margin.right\n    },\n    innerHeight () {\n      return this.height - this.margin.top - this.margin.bottom\n    },\n    // data new structure and selection\n    nestVariables () {\n      let carriers = this.CarriersReport\n      if (this.step >= 7) { carriers = this.ElectrificationSteps }\n      return {\n        carriers,\n        groupsbyregion: _.groupBy(carriers, 'region'),\n        allFuels: _.uniq(_.map(carriers, 'fuel')),\n        sectors: ['industry', 'transport', 'residential', 'electricity']\n      }\n    },\n    dataNest () {\n      const {\n        carriers,\n        groupsbyregion,\n        allFuels,\n        sectors\n      } = this.nestVariables\n\n      _.forEach(groupsbyregion, (arr, key) => {\n        const obj = {}\n        _.forEach(sectors, sector => {\n          const fuelObj = {}\n          _.forEach(allFuels, (fuel, i) => {\n            const data = _.map(arr, sector)\n            fuelObj[fuel] = data[i]\n          })\n          obj[sector] = fuelObj\n        })\n        groupsbyregion[key] = obj\n      })\n      return groupsbyregion\n    },\n    regionsArray () {\n      const groupsbyregion = this.nestVariables.groupsbyregion\n      const allRegions = []\n\n      _.forEach(groupsbyregion, (arr, key) => {\n        allRegions.push(key)\n        return allRegions\n      })\n      return allRegions\n    },\n    stepSelection () {\n      let selected = this.selected\n      if (this.step !== 5) { selected = 'World' }\n      if (this.step === 7) { selected = 'World-step1' }\n      if (this.step === 8) { selected = 'World-step2' }\n      if (this.step === 9) { selected = 'World-step3' }\n      if (this.step >= 10) { selected = 'World-step4' }\n      return selected\n    },\n    dataFilter () {\n      const groupsbyregion = this.dataNest\n      const selected = this.stepSelection\n      console.log(groupsbyregion[selected])\n      return groupsbyregion[selected]\n    },\n    // Scales\n    scaleY () {\n      const selectedRegion = this.dataFilter\n      const { height } = this\n      let maxEnergy = []\n      const totalEnergy = _.map(selectedRegion, (value, fuel) => {\n        let fuels = d3.values(selectedRegion[fuel])\n        let maxValue = d3.sum(fuels)\n        maxEnergy.push(maxValue)\n      })\n\n      const y = d3.scaleLinear()\n        .domain([0, maxEnergy.reduce((sum, val) => sum + val, 0)])\n        .range([0, height / 2])\n\n      let maxRegValue = maxEnergy.reduce((sum, val) => sum + val, 0)\n      return {\n        y,\n        maxRegValue\n      }\n    },\n    scaleX () {\n      const selectedRegion = this.dataFilter\n      const { width, height } = this\n      const barWidth = (this.innerWidth + this.margin.left) / 2\n      const ele = d3.values(selectedRegion.electricity)\n      const ind = d3.values(selectedRegion.industry)\n      const tran = d3.values(selectedRegion.transport)\n      const res = d3.values(selectedRegion.residential)\n      // defining scales for different sectors\n      const electricity = d3.scaleLinear()\n        .domain([0, ele.reduce((sum, val) => sum + val, 0)])\n        .range([0, barWidth])\n\n      const industry = d3.scaleLinear()\n        .domain([0, ind.reduce((sum, val) => sum + val, 0)])\n        .range([0, barWidth])\n\n      const transport = d3.scaleLinear()\n        .domain([0, tran.reduce((sum, val) => sum + val, 0)])\n        .range([0, barWidth])\n\n      const residential = d3.scaleLinear()\n        .domain([0, res.reduce((sum, val) => sum + val, 0)])\n        .range([0, barWidth])\n\n      return {\n        electricity,\n        industry,\n        residential,\n        transport\n      }\n    },\n    createRect () {\n      const selectedRegion = this.dataFilter\n      const scale = this.scaleX\n      const { y } = this.scaleY\n      const barWidth = (this.innerWidth + this.margin.left) / 2\n      let sectorHeight = 10\n      const { currentElement } = this\n      const sectors = _.map(selectedRegion, (sector, key) => {\n        let distance = 10\n        // for bars height\n        let ValueSum = d3.sum(d3.values(selectedRegion[key]))\n        let yValue = y(ValueSum)\n        // conditions to check data\n        if (ValueSum === 0) {\n          yValue = 0\n        }\n        let initialHeight = sectorHeight\n        sectorHeight = sectorHeight + yValue + 30\n\n        let totalDist = 0\n        const rects = _.map(selectedRegion[key], (item, i) => {\n          // for rects\n          let initialDist = totalDist\n          totalDist = totalDist + scale[key](item)\n          // for labels horizontal position\n          let initialPos = distance\n          distance = distance + (barWidth / 10.5)\n          return {\n            labels: i,\n            dist: initialDist,\n            rectWidth: scale[key](item),\n            carrierValue: item,\n            posX: initialPos\n          }\n        })\n        return {\n          rects,\n          sector: key,\n          sectorHeight: initialHeight,\n          rectHeight: yValue\n        }\n      })\n      return sectors\n    },\n    findPerc (){\n      const carriers = this.carrierSum\n      const { maxRegValue } = this.scaleY\n      const groupsbyregion = this.dataNest\n      const world = groupsbyregion['World']\n      const maxEnergy = []\n      const totalEnergy = _.map(world, (value, fuel) => {\n        let fuels = d3.values(world[fuel])\n        let maxValue = d3.sum(fuels)\n        maxEnergy.push(maxValue)\n      })\n      const total = maxEnergy.reduce((sum, val) => sum + val, 0)\n      const perc = (maxRegValue / total) * 100\n      return {\n        perc: Math.round(perc * 100) / 100,\n        absValue: Math.round(maxRegValue * 100) / 100\n      }\n    },\n    sumCarriers () {\n      const sectors = this.createRect\n      const sumValue = {}\n\n      const dataArray = _.map(sectors, (sector, key) => {\n        const fuels = sector.rects\n        const data = _.map(fuels, (carrier, ckey) => {\n          return fuels[ckey].carrierValue\n        })\n        return data\n      })\n      const result = dataArray.reduce((r, a) => a.map((b, i) => (r[i] || 0) + b), [])\n      console.log(result)\n      return result\n    }\n  }\n}\n</script>\n\n<!-- Add \"scoped\" attribute to limit CSS to this component only -->\n<style scoped lang=\"scss\">\n@import \"library/src/style/variables.scss\";\n\n.visualization {\n  height: inherit;\n  padding: 2% 12%;\n}\n\n.fuel_rect {\n  stroke: $color-gray;\n  fill: getColor(gray, 80)\n}\n\n.fuel-labels {\n  font-size: 10px;\n  text-anchor: middle;\n  cursor: pointer;\n}\n\n.regionselect {\n  top: $spacing * 2;\n  left: 4.5em;\n  position: absolute;\n  width: 150px;\n}\n\n#select-label {\n  font-size: 10px;\n  margin-top: 15px;\n}\n\n#emissions-label {\n  margin-top: 15px;\n}\n\n.is-empty {\n  fill-opacity: 0.2;\n}\n\n.is-active {\n  visibility: visible;\n}\n.electrification {\n  fill: $color-yellow;\n}\n\n.is-inactive {\n  visibility: hidden;\n}\n\n.energy_sum {\n  fill: $color-neon;\n}\n</style>\n"],"sourceRoot":"src/components"}]}