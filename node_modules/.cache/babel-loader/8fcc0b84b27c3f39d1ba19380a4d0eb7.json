{"remainingRequest":"/Users/francescamorini/projects/transition-module/node_modules/babel-loader/lib/index.js!/Users/francescamorini/projects/transition-module/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/francescamorini/projects/transition-module/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/francescamorini/projects/transition-module/src/components/marimekko-emissions.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/francescamorini/projects/transition-module/src/components/marimekko-emissions.vue","mtime":1572536223177},{"path":"/Users/francescamorini/projects/transition-module/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/francescamorini/projects/transition-module/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/francescamorini/projects/transition-module/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/francescamorini/projects/transition-module/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["marimekko-emissions.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\n  <div class=\"marimekko\">\n  <svg width='100%' height='100%' viewBox='0 0 1100 1000'>\n    <g transform='translate(70,120)' class='rects'>\n      <g id='sector-labels'>\n        <text v-for='(label) in sectorLabels' v-bind:key='label.sector' class='sectorlabel' x='980' :y='label.position' >{{label.sector[0]+'.'}}</text>\n      </g>\n        <rect v-for=\"(rect, i) in rects\" v-bind:key='i' :height='rect.height' :width='rect.emissions' :fill='rect.color' :x='rect.distance' :y='rect.position' class='rect' :class='rect.classes ' :id='rect.application'/>\n      <g id='emissions-labels' v-if='step <= 5'>\n      <line v-for=\"(rect, a) in rects\" :x1='rect.distance' :x2='rect.distance' :y1='rect.position + rect.height' :y2='rect.position + rect.height + 10' class='bars'/>\n      <text v-for=\"(rect, b) in rects\" :x='rect.distance' :y='rect.position + rect.height + 25'>{{rect.application}}</text>\n      </g>\n      <g id='carriers-labels' v-if='step >= 6'>\n      <CarrierPath/>\n      <text v-for=\"(energyCarrLabel, i) in energyCarrLabels\" :id='energyCarrLabel.carrier' :x='energyCarrLabel.position' :y='chartDefaults.height -30' v-bind:key='i' @click='select($event)'>{{energyCarrLabel.carrier}}</text>\n      </g>\n    </g>\n    <!-- Here general axis are created -->\n    <axis transform='translate(70,60)' class='xA' v-bind:scales='getScale().xAxis'  v-bind:chartDefaults='chartDefaults' v-bind:data='subsectors'/>\n    <text transform='translate(430,40)' class='axislabel' v-if='step == 5'>Applications % of emissions (per sector)</text>\n    <text transform='translate(430,40)' class='axislabel' v-if='step >= 6'>Energy Carriers % of produced energy (per sector)</text>\n    <text transform='translate(20,500) rotate(-90)' class='axislabel'>2015 Total GHG Emissions</text>\n    <axis transform='translate(40,120)' class='yA' v-bind:scales='getScale().yAxis'  v-bind:chartDefaults='chartDefaults' v-bind:data='subsectors'/>\n  </svg>\n  </div>\n</template>\n\n<script>\nimport * as d3 from 'd3'\nimport { mapState } from 'vuex'\nimport Axis from './axis.vue'\nimport CarrierPath from './carriersSelPaths.vue'\n\nimport emissionsSubsectors from '../assets/subsectors-emissions-nest.json'\nimport energyCarriers from '../assets/energy-carriers-world.json'\n\nexport default {\n  name: 'marimekkoEmissions',\n  components: {\n    axis: Axis,\n    CarrierPath\n  },\n  data () {\n    return {\n      subsectors: emissionsSubsectors,\n      carriers: energyCarriers,\n      chartDefaults: {\n        width: 1000,\n        height: 700,\n        chartId: 'subemissions',\n        title: 'Emissions',\n        margin: {\n          top: 5,\n          right: 50,\n          bottom: 25,\n          left: 0\n        }\n      },\n      emissionsLabels: this.visibleLabels,\n      selected: null\n    }\n  },\n  methods: {\n    select (event) {\n      var targetId = event.currentTarget.id\n      if (this.selected === targetId) this.selected = null\n      else this.selected = targetId\n    },\n    visibleLabels () {\n      var visible\n      if (this.step === 5) {\n        visible = true\n        return visible\n      } else {\n        visible = false\n        return visible\n      }\n    },\n    getScale () {\n      const subsectors = this.subsectors\n      const carriers = this.carriers\n      const chartDefaults = this.chartDefaults\n      const sectors = ['Electricity', 'Building', 'Industry', 'Transport']\n      var filterEle = subsectors.filter(function (d) { return d.Sector === 'Electricity' })\n      var filterBuild = subsectors.filter(function (d) { return d.Sector === 'Building' })\n      var filterInd = subsectors.filter(function (d) { return d.Sector === 'Industry' })\n      var filterTr = subsectors.filter(function (d) { return d.Sector === 'Transport' })\n\n      var xPerc = d3\n        .scaleLinear()\n        .domain([0, 1])\n        .rangeRound([0, this.chartDefaults.width - 50])\n\n      var xPercLabels = d3\n        .scaleLinear()\n        .domain([0, 10])\n        .rangeRound([0, this.chartDefaults.width - 100])\n\n      var x = d3\n        .scaleLinear()\n        .domain([0, filterEle.reduce((sum, val) => sum + val.Emissions, 0)])\n        .rangeRound([0, this.chartDefaults.width - 50])\n\n      var xB = d3\n        .scaleLinear()\n        .domain([0, filterBuild.reduce((sum, val) => sum + val.Emissions, 0)])\n        .rangeRound([0, this.chartDefaults.width - 50])\n\n      var xI = d3\n        .scaleLinear()\n        .domain([0, filterInd.reduce((sum, val) => sum + val.Emissions, 0)])\n        .rangeRound([0, this.chartDefaults.width - 50])\n\n      var xT = d3\n        .scaleLinear()\n        .domain([0, filterTr.reduce((sum, val) => sum + val.Emissions, 0)])\n        .rangeRound([0, this.chartDefaults.width - 50])\n\n      var scaleXCar = sectors.map(function (item, i) {\n        var scaleArray\n        var carriersScale = carriers.filter(function (d) { return d.Sector === item })\n        for (var n = 0; n <= i; n++) {\n          scaleArray = d3\n            .scaleLinear()\n            .domain([0, carriersScale.reduce((sum, val) => sum + val.Emissions, 0)])\n            .rangeRound([0, chartDefaults.width - 50])\n        }\n        return scaleArray\n      })\n\n      var y = d3\n        .scaleLinear()\n        .domain([0, subsectors.reduce((sum, val) => sum + val.Emissions, 0)])\n        .range([0, this.chartDefaults.height - 300])\n\n      var yA = d3\n        .scaleLinear()\n        .domain([0, subsectors.reduce((sum, val) => sum + val.Emissions, 0)])\n        .range([0, this.chartDefaults.height - 90])\n\n      d3.axisTop().scale(xI)\n      d3.axisRight().scale(yA)\n\n      var formatPercent = d3.format('.0%')\n\n      var xAxis = d3\n        .axisTop()\n        .scale(xPerc)\n        .tickSize(0)\n        .tickPadding(10)\n        .tickValues([0, 1])\n        .tickFormat(formatPercent)\n\n      var yAxis = d3\n        .axisRight()\n        .scale(yA)\n        .ticks(0)\n\n      return {\n        x,\n        xAxis,\n        y,\n        xB,\n        xI,\n        xT,\n        scaleXCar,\n        xPerc,\n        yAxis,\n        xPercLabels\n      }\n    }\n  },\n  // this computed property needs to be added for the scrollytelling to function\n  computed: {\n    ...mapState({\n      step: state => state.scrollytelling ? state.scrollytelling.step : null\n    }),\n    datum () {\n      var step = this.step\n      var data = this.subsectors\n      if (step >= 6) { return this.carriers }\n      return data\n    },\n    // this function creates an array to handle single squares and their vertical height and position on the screen\n    rects () {\n      var scale = this.getScale()\n      var dataHeight = this.subsectors\n      var data = this.datum\n      var step = this.step\n      var selected = this.selected\n\n      const subemissionArray = data.map(function (item, i) {\n        const emissionsValue = d => {\n          let sum = data[0].Emissions\n          for (let n = 0; n < i; n++) {\n            sum = item.Emissions\n          }\n          if (step === 5) {\n            if (item.Sector === 'Electricity') {\n              return scale.x(sum)\n            } else if (item.Sector === 'Building') {\n              return scale.xB(sum)\n            } else if (item.Sector === 'Industry') {\n              return scale.xI(sum)\n            } else if (item.Sector === 'Transport') {\n              return scale.xT(sum)\n            }\n          } else if (step >= 6) {\n            if (item.Sector === 'Electricity') {\n              return scale.scaleXCar[0](sum)\n            } else if (item.Sector === 'Building') {\n              return scale.scaleXCar[1](sum)\n            } else if (item.Sector === 'Industry') {\n              return scale.scaleXCar[2](sum)\n            } else if (item.Sector === 'Transport') {\n              return scale.scaleXCar[3](sum)\n            }\n          }\n        }\n\n        const distanceValue = d => {\n          let total = 0\n          for (let n = 0; n < i; n++) {\n            if (item.Sector === data[n].Sector) {\n              total = total + data[n].Emissions\n            }\n          }\n          if (step === 5) {\n            if (item.Sector === 'Electricity') {\n              return scale.x(total)\n            } else if (item.Sector === 'Building') {\n              return scale.xB(total)\n            } else if (item.Sector === 'Industry') {\n              return scale.xI(total)\n            } else if (item.Sector === 'Transport') {\n              return scale.xT(total)\n            }\n          } else if (step >= 6) {\n            if (item.Sector === 'Electricity') {\n              return scale.scaleXCar[0](total)\n            } else if (item.Sector === 'Building') {\n              return scale.scaleXCar[1](total)\n            } else if (item.Sector === 'Industry') {\n              return scale.scaleXCar[2](total)\n            } else if (item.Sector === 'Transport') {\n              return scale.scaleXCar[3](total)\n            }\n          }\n        }\n\n        const heightValue = d => {\n          let filterEle = dataHeight.filter(function (d) { return d.Sector === 'Electricity' })\n          let filterBuild = dataHeight.filter(function (d) { return d.Sector === 'Building' })\n          let filterInd = dataHeight.filter(function (d) { return d.Sector === 'Industry' })\n          let filterTr = dataHeight.filter(function (d) { return d.Sector === 'Transport' })\n          let height = 0\n          for (let n = 0; n <= i; n++) {\n            if (item.Sector === 'Electricity') {\n              height = filterEle.reduce((sum, val) => sum + val.Emissions, 0)\n            } else if (item.Sector === 'Building') {\n              height = filterBuild.reduce((sum, val) => sum + val.Emissions, 0)\n            } else if (item.Sector === 'Industry') {\n              height = filterInd.reduce((sum, val) => sum + val.Emissions, 0)\n            } else if (item.Sector === 'Transport') {\n              height = filterTr.reduce((sum, val) => sum + val.Emissions, 0)\n            }\n          }\n\n          return scale.y(height)\n        }\n\n        const positionValue = d => {\n          var basisPosition = heightValue()\n          if (item.Sector === 'Electricity') {\n            basisPosition = basisPosition * 0\n          } if (item.Sector === 'Industry') {\n            basisPosition = basisPosition * 2.7\n          } if (item.Sector === 'Building') {\n            basisPosition = basisPosition * 4.5\n          } if (item.Sector === 'Transport') {\n            basisPosition = basisPosition * 5\n          }\n          return basisPosition\n        }\n\n        const rectColors = d => {\n          var color = '#000000'\n          if (step === 5) {\n            if (item.Sector === 'Electricity') {\n              color = '#ffc027'\n            } else if (item.Sector === 'Industry') {\n              color = '#d99900'\n            } else if (item.Sector === 'Building') {\n              color = '#a67500'\n            } else if (item.Sector === 'Transport') {\n              color = '#735100'\n            }\n          } else if (step >= 6) {\n            if (item.Sector === 'Electricity') {\n              color = '#58e4a2'\n            } else if (item.Sector === 'Industry') {\n              color = '#00a66e'\n            } else if (item.Sector === 'Building') {\n              color = '#00c58c'\n            } else if (item.Sector === 'Transport') {\n              color = '#007337'\n            }\n          }\n          return color\n        }\n\n        return {\n          application: item.Application,\n          sector: item.Sector.toLowerCase(),\n          emissions: emissionsValue(data),\n          distance: distanceValue(data),\n          position: positionValue(data),\n          height: heightValue(dataHeight),\n          color: rectColors(data),\n          classes: [item.Application, item.Sector.toLowerCase(), { hidden: selected !== null && selected !== item.Application }]\n        }\n      })\n      return subemissionArray\n    },\n    // this other functions specifically handle sector labels for single bars\n    sectorLabels () {\n      const labels = ['Electricity', 'Building', 'Industry', 'Transport']\n      const chartArray = this.rects\n      const Electricity = chartArray.filter(function (d) { return d.sector === 'electricity' })\n      const Industry = chartArray.filter(function (d) { return d.sector === 'industry' })\n      const Building = chartArray.filter(function (d) { return d.sector === 'building' })\n      const Transport = chartArray.filter(function (d) { return d.sector === 'transport' })\n\n      const newLabels = labels.map(function (item, i) {\n        const labelNames = d => {\n          let names\n          for (let n = 0; n <= i; n++) {\n            names = item\n          }\n          return names\n        }\n\n        const positionValue = d => {\n          let position\n          for (let n = 0; n <= i; n++) {\n            if (item === 'Electricity') {\n              position = Electricity[0].position + Building[0].position / 2.5\n            } else if (item === 'Building') {\n              position = Building[0].position + Building[0].position / 7\n            } else if (item === 'Industry') {\n              position = Industry[0].position + Building[0].position / 2.8\n            } else if (item === 'Transport') {\n              position = Transport[0].position + Building[0].position / 3\n            }\n            return position\n          }\n        }\n        return {\n          sector: labelNames(labels),\n          position: positionValue(labels)\n        }\n      })\n      return newLabels\n    },\n    energyCarrLabels () {\n      const data = this.carriers\n      var scale = this.getScale()\n      var newData = data.slice(33)\n\n      const carrLabels = newData.map(function (item, i) {\n        const singleCarriers = d => {\n          let single\n          for (let n = 0; n <= i; n++) {\n            single = item.Application\n          }\n          return single\n        }\n\n        const posLabels = d => {\n          let position = 0\n          for (let n = 0; n < i; n++) {\n            position = position + 1\n          }\n          return scale.xPercLabels(position)\n        }\n        return {\n          carrier: singleCarriers(newData),\n          position: posLabels(newData)\n        }\n      })\n\n      return carrLabels\n    }\n  }\n}\n</script>\n\n<!-- Add \"scoped\" attribute to limit CSS to this component only -->\n<style scoped lang=\"scss\">\n@import \"library/src/style/variables.scss\";\n\n.bars{\n  stroke: black;\n  stroke-width: 0.7px;\n}\n.electricity {\n  stroke: darken( $color-violet, 5% );\n}\n\n.industry {\n  stroke: darken( $color-violet, 30% );\n\n}\n\n.building{\n  stroke: darken( $color-violet, 20% );\n}\n\n.transport{\n  stroke: darken( $color-violet, 40% );\n}\n\n.sectorlabel {\n  font-size: 18px;\n  font-family: $font-sans;\n}\n\n.hidden {\n  fill: white;\n  opacity: 0.5;\n}\n</style>\n"],"sourceRoot":"src/components"}]}