{"remainingRequest":"/Users/francescamorini/projects/transition-v2/node_modules/babel-loader/lib/index.js!/Users/francescamorini/projects/transition-v2/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/francescamorini/projects/transition-v2/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/francescamorini/projects/transition-v2/src/components/EmissionsChart.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/francescamorini/projects/transition-v2/src/components/EmissionsChart.vue","mtime":1572431989864},{"path":"/Users/francescamorini/projects/transition-v2/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/francescamorini/projects/transition-v2/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/francescamorini/projects/transition-v2/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/francescamorini/projects/transition-v2/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuc3ltYm9sIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkuZmlsdGVyIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkuZm9yLWVhY2giOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lcy5hcnJheS5tYXAiOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lcy5udW1iZXIuY29uc3RydWN0b3IiOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lcy5vYmplY3QuZ2V0LW93bi1wcm9wZXJ0eS1kZXNjcmlwdG9yIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMub2JqZWN0LmdldC1vd24tcHJvcGVydHktZGVzY3JpcHRvcnMiOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lcy5vYmplY3Qua2V5cyI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL3dlYi5kb20tY29sbGVjdGlvbnMuZm9yLWVhY2giOwppbXBvcnQgX2RlZmluZVByb3BlcnR5IGZyb20gIi9Vc2Vycy9mcmFuY2VzY2Ftb3JpbmkvcHJvamVjdHMvdHJhbnNpdGlvbi12Mi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUtY29yZWpzMy9oZWxwZXJzL2VzbS9kZWZpbmVQcm9wZXJ0eSI7CgpmdW5jdGlvbiBvd25LZXlzKG9iamVjdCwgZW51bWVyYWJsZU9ubHkpIHsgdmFyIGtleXMgPSBPYmplY3Qua2V5cyhvYmplY3QpOyBpZiAoT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scykgeyB2YXIgc3ltYm9scyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMob2JqZWN0KTsgaWYgKGVudW1lcmFibGVPbmx5KSBzeW1ib2xzID0gc3ltYm9scy5maWx0ZXIoZnVuY3Rpb24gKHN5bSkgeyByZXR1cm4gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihvYmplY3QsIHN5bSkuZW51bWVyYWJsZTsgfSk7IGtleXMucHVzaC5hcHBseShrZXlzLCBzeW1ib2xzKTsgfSByZXR1cm4ga2V5czsgfQoKZnVuY3Rpb24gX29iamVjdFNwcmVhZCh0YXJnZXQpIHsgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHsgdmFyIHNvdXJjZSA9IGFyZ3VtZW50c1tpXSAhPSBudWxsID8gYXJndW1lbnRzW2ldIDoge307IGlmIChpICUgMikgeyBvd25LZXlzKHNvdXJjZSwgdHJ1ZSkuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7IF9kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGtleSwgc291cmNlW2tleV0pOyB9KTsgfSBlbHNlIGlmIChPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9ycykgeyBPYmplY3QuZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JzKHNvdXJjZSkpOyB9IGVsc2UgeyBvd25LZXlzKHNvdXJjZSkuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGtleSwgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihzb3VyY2UsIGtleSkpOyB9KTsgfSB9IHJldHVybiB0YXJnZXQ7IH0KCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vIExpYnJhcmllcwppbXBvcnQgKiBhcyBkMyBmcm9tICdkMyc7CmltcG9ydCB7IG1hcFN0YXRlIH0gZnJvbSAndnVleCc7IC8vIGNvbXBvbmVudHMKLy8gRGF0YQoKaW1wb3J0IGVtaXNzaW9uc0RhdGEgZnJvbSAiLi4vYXNzZXRzL2RhdGEvZW1pc3Npb25zLmpzb24iOwppbXBvcnQgc3ViRW1pc3Npb25zRGF0YSBmcm9tICIuLi9hc3NldHMvZGF0YS9lbWlzc2lvbnMtc3RhY2tlZC5qc29uIjsKaW1wb3J0IEFwcGxpY2F0aW9uc1NoYXJlIGZyb20gIi4uL2Fzc2V0cy9kYXRhL3N1YnNlY3RvcnMtYXBwbGljYXRpb25zLXNoYXJlLmpzb24iOwpleHBvcnQgZGVmYXVsdCB7CiAgbmFtZTogJ0VtaXNzaW9uc0NoYXJ0JywKICBwcm9wczogewogICAgd2lkdGg6IHsKICAgICAgdHlwZTogTnVtYmVyLAogICAgICByZXF1aXJlZDogdHJ1ZQogICAgfSwKICAgIGhlaWdodDogewogICAgICB0eXBlOiBOdW1iZXIsCiAgICAgIHJlcXVpcmVkOiB0cnVlCiAgICB9CiAgfSwKICBkYXRhOiBmdW5jdGlvbiBkYXRhKCkgewogICAgcmV0dXJuIHsKICAgICAgZ3JhcGhTaXplOiB7CiAgICAgICAgd2lkdGg6IHRoaXMud2lkdGgsCiAgICAgICAgaGVpZ2h0OiB0aGlzLmhlaWdodAogICAgICB9LAogICAgICBlbWlzc2lvbnNEYXRhOiBlbWlzc2lvbnNEYXRhLAogICAgICBzdWJFbWlzc2lvbnNEYXRhOiBzdWJFbWlzc2lvbnNEYXRhLAogICAgICBBcHBsaWNhdGlvbnNTaGFyZTogQXBwbGljYXRpb25zU2hhcmUKICAgIH07CiAgfSwKICBtZXRob2RzOiB7fSwKICBjb21wdXRlZDogX29iamVjdFNwcmVhZCh7fSwgbWFwU3RhdGUoewogICAgc3RlcDogZnVuY3Rpb24gc3RlcChzdGF0ZSkgewogICAgICByZXR1cm4gc3RhdGUuc2Nyb2xseXRlbGxpbmcgPyBzdGF0ZS5zY3JvbGx5dGVsbGluZy5zdGVwIDogbnVsbDsKICAgIH0KICB9KSwgewogICAgZ2V0U2NhbGU6IGZ1bmN0aW9uIGdldFNjYWxlKCkgewogICAgICB2YXIgZW1pc3Npb25zID0gdGhpcy5lbWlzc2lvbnNEYXRhOwogICAgICB2YXIgcGFyc2VEYXRlID0gZDMudGltZVBhcnNlKCclWScpOwogICAgICB2YXIgbWF4RGF0ZSA9IHBhcnNlRGF0ZSgyMDgwKTsKCiAgICAgIGlmICh0aGlzLnN0ZXAgPj0gMikgewogICAgICAgIG1heERhdGUgPSBwYXJzZURhdGUoMjAxNSk7CiAgICAgIH0KCiAgICAgIGVtaXNzaW9ucy5mb3JFYWNoKGZ1bmN0aW9uIChkKSB7CiAgICAgICAgZC5kYXRlID0gcGFyc2VEYXRlKGQuWWVhcik7CiAgICAgIH0pOwogICAgICB2YXIgeCA9IGQzLnNjYWxlVGltZSgpLmRvbWFpbihbZDMubWluKGVtaXNzaW9ucywgZnVuY3Rpb24gKGQpIHsKICAgICAgICByZXR1cm4gZC5kYXRlOwogICAgICB9KSwgbWF4RGF0ZV0pLnJhbmdlUm91bmQoWzAsIHRoaXMud2lkdGggLSA4MF0pOwogICAgICB2YXIgeSA9IGQzLnNjYWxlTGluZWFyKCkuZG9tYWluKFswLCA0MDAwMDAwMF0pLnJhbmdlUm91bmQoW3RoaXMuaGVpZ2h0IC0gMzAwLCAwXSk7CiAgICAgIHJldHVybiB7CiAgICAgICAgcGFyc2VEYXRlOiBwYXJzZURhdGUsCiAgICAgICAgeDogeCwKICAgICAgICB5OiB5CiAgICAgIH07CiAgICB9LAogICAgY2FsY0xpbmU6IGZ1bmN0aW9uIGNhbGNMaW5lKCkgewogICAgICB2YXIgc2NhbGUgPSB0aGlzLmdldFNjYWxlOwogICAgICB2YXIgcGF0aCA9IGQzLmxpbmUoKS54KGZ1bmN0aW9uIChkKSB7CiAgICAgICAgcmV0dXJuIHNjYWxlLngoZC5kYXRlKTsKICAgICAgfSkueShmdW5jdGlvbiAoZCkgewogICAgICAgIHJldHVybiBzY2FsZS55KGQuRW1pc3Npb25zKTsKICAgICAgfSkuY3VydmUoZDMuY3VydmVMaW5lYXIpOwogICAgICByZXR1cm4gewogICAgICAgIGQ6IHBhdGgoZW1pc3Npb25zRGF0YSkKICAgICAgfTsKICAgIH0sCiAgICBzdWJzZWN0b3JzTGFiZWxzOiBmdW5jdGlvbiBzdWJzZWN0b3JzTGFiZWxzKCkgewogICAgICB2YXIgc3Vic2VjdG9ycyA9IHRoaXMuQXBwbGljYXRpb25zU2hhcmU7CiAgICAgIHZhciBzdWJzZWN0b3JzTGFiZWxzID0gW107CiAgICAgIHN1YnNlY3RvcnMucHVzaChzdWJzZWN0b3JzWzFdKTsKICAgICAgcmV0dXJuIHN1YnNlY3RvcnNMYWJlbHM7CiAgICB9LAogICAgc2VjdG9yQ2h1bmtzOiBmdW5jdGlvbiBzZWN0b3JDaHVua3MoKSB7CiAgICAgIHZhciBzZWN0b3JzID0gWydFbGVjdHJpY2l0eScsICdPdGhlckVuZXJneScsICdJbmR1c3RyeScsICdUcmFuc3BvcnRzJywgJ0J1aWxkaW5nJ107CgogICAgICBpZiAodGhpcy5zdGVwID09PSAzLjEpIHsKICAgICAgICBzZWN0b3JzID0gWydQdWJsaWMnLCAnQXV0b3Byb2R1Y2VkJywgJ090aGVyRW4nLCAnQ29tYnVzdGlvbicsICdQcm9kdWN0aW9uJywgJ1NvbHZlbnRzJywgJ090aGVyUHJvYycsICdJbmRXYXN0ZScsICdBdmlhdGlvbicsICdSb2FkJywgJ090aGVyJywgJ1NoaXBwaW5nJywgJ0NvbW1SZXMnLCAnQWdyaWN1bHR1cmUnXTsKICAgICAgfQoKICAgICAgdmFyIGRhdGEgPSB0aGlzLnN1YkVtaXNzaW9uc0RhdGE7CgogICAgICBpZiAodGhpcy5zdGVwID09PSAzLjEpIHsKICAgICAgICBkYXRhID0gdGhpcy5BcHBsaWNhdGlvbnNTaGFyZTsKICAgICAgfQoKICAgICAgdmFyIGNodW5rQ29sb3JzID0gWycjMzMxMjFjJywgJyM2MTE3MzEnLCAnIzkzMTU0NycsICcjZGQ1Zjg0JywgJyNlZDk2YWInXTsKICAgICAgdmFyIHNjYWxlID0gdGhpcy5nZXRTY2FsZTsKICAgICAgdmFyIHBhcnNlRGF0ZSA9IHNjYWxlLnBhcnNlRGF0ZTsKICAgICAgZGF0YS5mb3JFYWNoKGZ1bmN0aW9uIChkKSB7CiAgICAgICAgZC5kYXRlID0gcGFyc2VEYXRlKGQuWWVhcik7CiAgICAgIH0pOwogICAgICB2YXIgYXJlYXNYID0gZDMuYXJlYSgpLngoZnVuY3Rpb24gKGQpIHsKICAgICAgICByZXR1cm4gc2NhbGUueChkLmRhdGUpOwogICAgICB9KS5jdXJ2ZShkMy5jdXJ2ZUxpbmVhcik7CiAgICAgIHZhciBzZWN0b3JzQXJlYXMgPSBzZWN0b3JzLm1hcChmdW5jdGlvbiAoaXRlbSwgaSkgewogICAgICAgIGFyZWFzWC55MChmdW5jdGlvbiAoZCkgewogICAgICAgICAgdmFyIHN1bSA9IDA7CgogICAgICAgICAgZm9yICh2YXIgbiA9IDA7IG4gPCBpOyBuKyspIHsKICAgICAgICAgICAgc3VtID0gc3VtICsgZFtzZWN0b3JzW25dXTsKICAgICAgICAgIH0KCiAgICAgICAgICByZXR1cm4gc2NhbGUueShzdW0pOwogICAgICAgIH0pLnkxKGZ1bmN0aW9uIChkKSB7CiAgICAgICAgICB2YXIgc3VtID0gMDsKCiAgICAgICAgICBmb3IgKHZhciBuID0gMDsgbiA8PSBpOyBuKyspIHsKICAgICAgICAgICAgc3VtID0gc3VtICsgZFtzZWN0b3JzW25dXTsKICAgICAgICAgIH0KCiAgICAgICAgICByZXR1cm4gc2NhbGUueShzdW0pOwogICAgICAgIH0pOwogICAgICAgIHJldHVybiB7CiAgICAgICAgICBkOiBhcmVhc1goZGF0YSksCiAgICAgICAgICBjb2xvcjogY2h1bmtDb2xvcnNbaV0sCiAgICAgICAgICBpZDogc2VjdG9yc1tpXQogICAgICAgIH07CiAgICAgIH0pOwogICAgICBjb25zb2xlLmxvZyhkYXRhKTsKICAgICAgcmV0dXJuIHNlY3RvcnNBcmVhczsKICAgIH0KICB9KSwKICBkaXJlY3RpdmVzOiB7CiAgICBheGlzOiBmdW5jdGlvbiBheGlzKGVsLCBiaW5kaW5nKSB7CiAgICAgIHZhciBheGlzID0gYmluZGluZy5hcmc7CiAgICAgIHZhciBheGlzTWV0aG9kID0gewogICAgICAgIHg6ICdheGlzQm90dG9tJywKICAgICAgICB5OiAnYXhpc0xlZnQnCiAgICAgIH1bYXhpc107CiAgICAgIHZhciBtZXRob2RBcmcgPSBiaW5kaW5nLnZhbHVlW2F4aXNdOwogICAgICBkMy5zZWxlY3QoZWwpLmNhbGwoZDNbYXhpc01ldGhvZF0obWV0aG9kQXJnKSk7CiAgICB9CiAgfQp9Ow=="},{"version":3,"sources":["EmissionsChart.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\n  <div class=\"visualization\" id=\"emissions__chart\">\n    <svg class=\"emissions\" width=\"100%\" height=\"80%\">\n      <g :transform=\"'translate('+ 70 + ',' + 5 + ')'\">\n        <g class=\"axis\" v-axis:x=\"getScale\" :transfrom=\"'translate('+ 0 + ',' + this.height + ')'\"></g>\n        <g class=\"axis\" v-axis:y=\"getScale\"></g>\n        <g id=\"first_step\" v-show=\"step <= 2\">\n          <path id=\"emissions\" v-bind:data=\"calcLine\" :d='calcLine.d' />\n        </g>\n        <g id=\"second_step\" v-show=\"step >=3\">\n          <path\n            v-for=\"(chunk, i) in sectorChunks\"\n            v-bind:key='i'\n            :d='chunk.d'\n            :fill='chunk.color'\n            :id='chunk.id'\n            class=\"emission__chunks\"\n          />\n       </g>\n    </g>\n    </svg>\n  </div>\n</template>\n\n<script>\n// Libraries\nimport * as d3 from 'd3'\nimport { mapState } from 'vuex'\n\n// components\n\n// Data\nimport emissionsData from '../assets/data/emissions.json'\nimport subEmissionsData from '../assets/data/emissions-stacked.json'\nimport ApplicationsShare from '../assets/data/subsectors-applications-share.json'\n\nexport default {\n  name: 'EmissionsChart',\n  props: {\n    width: {\n      type: Number,\n      required: true\n    },\n    height: {\n      type: Number,\n      required: true\n    }\n  },\n  data () {\n    return {\n      graphSize: {\n        width: this.width,\n        height: this.height\n      },\n      emissionsData,\n      subEmissionsData,\n      ApplicationsShare\n    }\n  },\n  methods: {\n  },\n  computed: {\n    ...mapState({\n      step: state => state.scrollytelling ? state.scrollytelling.step : null\n    }),\n    getScale () {\n      const emissions = this.emissionsData\n      const parseDate = d3.timeParse('%Y')\n      let maxDate = parseDate(2080)\n      if (this.step >= 2) { maxDate = parseDate(2015) }\n\n      emissions.forEach(function (d) {\n        d.date = parseDate(d.Year)\n      })\n\n      var x = d3\n        .scaleTime()\n        .domain([d3.min(emissions, d => d.date), maxDate])\n        .rangeRound([0, this.width - 80])\n\n      var y = d3\n        .scaleLinear()\n        .domain([0, 40000000])\n        .rangeRound([this.height - 300, 0])\n\n      return {\n        parseDate,\n        x,\n        y\n      }\n    },\n    calcLine () {\n      const scale = this.getScale\n      const path = d3\n        .line()\n        .x(d => { return scale.x(d.date) })\n        .y(d => { return scale.y(d.Emissions) })\n        .curve(d3.curveLinear)\n      return {\n        d: path(emissionsData)\n      }\n    },\n    subsectorsLabels () {\n      const subsectors = this.ApplicationsShare\n      let subsectorsLabels = []\n\n      subsectors.push(subsectors[1])\n\n      return subsectorsLabels\n    },\n    sectorChunks () {\n      let sectors = ['Electricity', 'OtherEnergy', 'Industry', 'Transports', 'Building']\n      if (this.step === 3.1) { sectors = ['Public', 'Autoproduced', 'OtherEn', 'Combustion', 'Production', 'Solvents', 'OtherProc', 'IndWaste', 'Aviation', 'Road', 'Other', 'Shipping', 'CommRes', 'Agriculture'] }\n\n      let data = this.subEmissionsData\n      if (this.step === 3.1) { data = this.ApplicationsShare }\n\n      const chunkColors = ['#33121c', '#611731', '#931547', '#dd5f84', '#ed96ab']\n      const scale = this.getScale\n      const parseDate = scale.parseDate\n\n      data.forEach((d) => { d.date = parseDate(d.Year) })\n\n      const areasX = d3\n        .area()\n        .x(d => { return scale.x(d.date) })\n        .curve(d3.curveLinear)\n\n      const sectorsAreas = sectors.map(function (item, i) {\n        areasX\n          .y0(d => {\n            let sum = 0\n            for (let n = 0; n < i; n++) {\n              sum = sum + d[sectors[n]]\n            }\n            return scale.y(sum)\n          })\n          .y1(d => {\n            let sum = 0\n            for (let n = 0; n <= i; n++) {\n              sum = sum + d[sectors[n]]\n            }\n            return scale.y(sum)\n          })\n        return {\n          d: areasX(data),\n          color: chunkColors[i],\n          id: sectors[i]\n        }\n      })\n      console.log(data)\n      return sectorsAreas\n    }\n  },\n  directives: {\n    axis (el, binding) {\n      const axis = binding.arg\n      const axisMethod = { x: 'axisBottom', y: 'axisLeft' }[axis]\n      const methodArg = binding.value[axis]\n      d3.select(el)\n        .call(d3[axisMethod](methodArg))\n    }\n  }\n}\n</script>\n\n<style scoped lang=\"scss\">\n@import \"library/src/style/variables.scss\";\n.visualization {\n  width: inherit;\n  height: inherit;\n}\n\nsvg {\n  position: absolute;\n  top: 10vh;\n}\n\n#emissions {\n  stroke: $color-red;\n  fill: none;\n}\n\n.emission__chunks {\n  stroke: $color-red;\n}\n</style>\n"],"sourceRoot":"src/components"}]}