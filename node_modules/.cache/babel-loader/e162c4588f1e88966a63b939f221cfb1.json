{"remainingRequest":"/Users/francescamorini/projects/transition-module-senses/node_modules/babel-loader/lib/index.js!/Users/francescamorini/projects/transition-module-senses/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/francescamorini/projects/transition-module-senses/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/francescamorini/projects/transition-module-senses/src/components/EnergyCarriers.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/francescamorini/projects/transition-module-senses/src/components/EnergyCarriers.vue","mtime":1574245007454},{"path":"/Users/francescamorini/projects/transition-module-senses/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/francescamorini/projects/transition-module-senses/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/francescamorini/projects/transition-module-senses/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/francescamorini/projects/transition-module-senses/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkuZm9yLWVhY2giOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lcy5hcnJheS5tYXAiOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lcy5hcnJheS5yZWR1Y2UiOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lcy5udW1iZXIuY29uc3RydWN0b3IiOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy93ZWIuZG9tLWNvbGxlY3Rpb25zLmZvci1lYWNoIjsKLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KaW1wb3J0ICogYXMgZDMgZnJvbSAnZDMnOwppbXBvcnQgXyBmcm9tICdsb2Rhc2gnOyAvLyBkYXRhCgppbXBvcnQgQ2FycmllcnNSZXBvcnQgZnJvbSAiLi4vYXNzZXRzL2RhdGEvd29ybGRfcmVnaW9uYWxfcmVwb3J0Lmpzb24iOwpleHBvcnQgZGVmYXVsdCB7CiAgbmFtZTogJ0VuZXJneUNhcnJpZXJzJywKICBwcm9wczogewogICAgd2lkdGg6IHsKICAgICAgdHlwZTogTnVtYmVyLAogICAgICByZXF1aXJlZDogdHJ1ZQogICAgfSwKICAgIGhlaWdodDogewogICAgICB0eXBlOiBOdW1iZXIsCiAgICAgIHJlcXVpcmVkOiB0cnVlCiAgICB9LAogICAgc3RlcDogewogICAgICB0eXBlOiBOdW1iZXIsCiAgICAgIGRlZmF1bHQ6IDAKICAgIH0KICB9LAogIGRhdGE6IGZ1bmN0aW9uIGRhdGEoKSB7CiAgICByZXR1cm4gewogICAgICBDYXJyaWVyc1JlcG9ydDogQ2FycmllcnNSZXBvcnQsCiAgICAgIG1hcmdpbjogewogICAgICAgIGxlZnQ6IDcwLAogICAgICAgIHRvcDogMzAsCiAgICAgICAgYm90dG9tOiAzMCwKICAgICAgICByaWdodDogNDAKICAgICAgfSwKICAgICAgZW5lcmd5TGFiZWxzOiBbJ2NvYWwnLCAnZWxlY3RyaWNpdHknLCAnZ2FzJywgJ210YmlvJywgJ25vbi1iaW9yZW4nLCAnbnVjbGVhcicsICdvaWwnLCAnb3RoZXInLCAnb3RoZXIgZ2FzJywgJ290aGVyIGxpcXVpZHMnLCAnb3RoZXIgc29saWRzJ10KICAgIH07CiAgfSwKICBjb21wdXRlZDogewogICAgaW5uZXJXaWR0aDogZnVuY3Rpb24gaW5uZXJXaWR0aCgpIHsKICAgICAgcmV0dXJuIHRoaXMud2lkdGggLSB0aGlzLm1hcmdpbi5sZWZ0IC0gdGhpcy5tYXJnaW4ucmlnaHQ7CiAgICB9LAogICAgaW5uZXJIZWlnaHQ6IGZ1bmN0aW9uIGlubmVySGVpZ2h0KCkgewogICAgICByZXR1cm4gdGhpcy5oZWlnaHQgLSB0aGlzLm1hcmdpbi50b3AgLSB0aGlzLm1hcmdpbi5ib3R0b207CiAgICB9LAogICAgLy8gZGF0YSBuZXcgc3RydWN0dXJlIGFuZCBzZWxlY3Rpb24KICAgIG5lc3RWYXJpYWJsZXM6IGZ1bmN0aW9uIG5lc3RWYXJpYWJsZXMoKSB7CiAgICAgIHZhciBjYXJyaWVycyA9IHRoaXMuQ2FycmllcnNSZXBvcnQ7CiAgICAgIHJldHVybiB7CiAgICAgICAgY2FycmllcnM6IGNhcnJpZXJzLAogICAgICAgIGdyb3Vwc2J5cmVnaW9uOiBfLmdyb3VwQnkoY2FycmllcnMsICdyZWdpb24nKSwKICAgICAgICBhbGxGdWVsczogXy51bmlxKF8ubWFwKGNhcnJpZXJzLCAnZnVlbCcpKSwKICAgICAgICBzZWN0b3JzOiBbJ2luZHVzdHJ5JywgJ3RyYW5zcG9ydCcsICdyZXNpZGVudGlhbCcsICdlbGVjdHJpY2l0eSddCiAgICAgIH07CiAgICB9LAogICAgZGF0YU5lc3Q6IGZ1bmN0aW9uIGRhdGFOZXN0KCkgewogICAgICB2YXIgX3RoaXMkbmVzdFZhcmlhYmxlcyA9IHRoaXMubmVzdFZhcmlhYmxlcywKICAgICAgICAgIGNhcnJpZXJzID0gX3RoaXMkbmVzdFZhcmlhYmxlcy5jYXJyaWVycywKICAgICAgICAgIGdyb3Vwc2J5cmVnaW9uID0gX3RoaXMkbmVzdFZhcmlhYmxlcy5ncm91cHNieXJlZ2lvbiwKICAgICAgICAgIGFsbEZ1ZWxzID0gX3RoaXMkbmVzdFZhcmlhYmxlcy5hbGxGdWVscywKICAgICAgICAgIHNlY3RvcnMgPSBfdGhpcyRuZXN0VmFyaWFibGVzLnNlY3RvcnM7CgogICAgICBfLmZvckVhY2goZ3JvdXBzYnlyZWdpb24sIGZ1bmN0aW9uIChhcnIsIGtleSkgewogICAgICAgIHZhciBvYmogPSB7fTsKCiAgICAgICAgXy5mb3JFYWNoKHNlY3RvcnMsIGZ1bmN0aW9uIChzZWN0b3IpIHsKICAgICAgICAgIHZhciBmdWVsT2JqID0ge307CgogICAgICAgICAgXy5mb3JFYWNoKGFsbEZ1ZWxzLCBmdW5jdGlvbiAoZnVlbCwgaSkgewogICAgICAgICAgICB2YXIgZGF0YSA9IF8ubWFwKGFyciwgc2VjdG9yKTsKCiAgICAgICAgICAgIGZ1ZWxPYmpbZnVlbF0gPSBkYXRhW2ldOwogICAgICAgICAgfSk7CgogICAgICAgICAgb2JqW3NlY3Rvcl0gPSBmdWVsT2JqOwogICAgICAgIH0pOwoKICAgICAgICBncm91cHNieXJlZ2lvbltrZXldID0gb2JqOwogICAgICB9KTsKCiAgICAgIHJldHVybiBncm91cHNieXJlZ2lvbjsKICAgIH0sCiAgICBkYXRhRmlsdGVyOiBmdW5jdGlvbiBkYXRhRmlsdGVyKCkgewogICAgICB2YXIgZ3JvdXBzYnlyZWdpb24gPSB0aGlzLmRhdGFOZXN0OwogICAgICByZXR1cm4gZ3JvdXBzYnlyZWdpb25bJ1dvcmxkJ107CiAgICB9LAogICAgLy8gU2NhbGVzCiAgICBzY2FsZVk6IGZ1bmN0aW9uIHNjYWxlWSgpIHsKICAgICAgdmFyIHNlbGVjdGVkUmVnaW9uID0gdGhpcy5kYXRhRmlsdGVyOwogICAgICB2YXIgbWF4RW5lcmd5ID0gW107CgogICAgICB2YXIgdG90YWxFbmVyZ3kgPSBfLm1hcChzZWxlY3RlZFJlZ2lvbiwgZnVuY3Rpb24gKHZhbHVlLCBmdWVsKSB7CiAgICAgICAgdmFyIGZ1ZWxzID0gZDMudmFsdWVzKHNlbGVjdGVkUmVnaW9uW2Z1ZWxdKTsKICAgICAgICB2YXIgbWF4VmFsdWUgPSBkMy5tYXgoZnVlbHMpOwogICAgICAgIG1heEVuZXJneS5wdXNoKG1heFZhbHVlKTsKICAgICAgfSk7CgogICAgICB2YXIgeSA9IGQzLnNjYWxlTGluZWFyKCkuZG9tYWluKFswLCBtYXhFbmVyZ3kucmVkdWNlKGZ1bmN0aW9uIChzdW0sIHZhbCkgewogICAgICAgIHJldHVybiBzdW0gKyB2YWw7CiAgICAgIH0sIDApXSkucmFuZ2UoWzAsIDMwMF0pOwogICAgICByZXR1cm4geTsKICAgIH0sCiAgICBzY2FsZVg6IGZ1bmN0aW9uIHNjYWxlWCgpIHsKICAgICAgdmFyIHNlbGVjdGVkUmVnaW9uID0gdGhpcy5kYXRhRmlsdGVyOwogICAgICB2YXIgd2lkdGggPSB0aGlzLndpZHRoLAogICAgICAgICAgaGVpZ2h0ID0gdGhpcy5oZWlnaHQ7CiAgICAgIHZhciBiYXJXaWR0aCA9ICh3aWR0aCArIHRoaXMubWFyZ2luLmxlZnQpIC8gMjsKICAgICAgdmFyIGVsZSA9IGQzLnZhbHVlcyhzZWxlY3RlZFJlZ2lvbi5lbGVjdHJpY2l0eSk7CiAgICAgIHZhciBpbmQgPSBkMy52YWx1ZXMoc2VsZWN0ZWRSZWdpb24uaW5kdXN0cnkpOwogICAgICB2YXIgdHJhbiA9IGQzLnZhbHVlcyhzZWxlY3RlZFJlZ2lvbi50cmFuc3BvcnQpOwogICAgICB2YXIgcmVzID0gZDMudmFsdWVzKHNlbGVjdGVkUmVnaW9uLnJlc2lkZW50aWFsKTsgLy8gZGVmaW5pbmcgc2NhbGVzIGZvciBkaWZmZXJlbnQgc2VjdG9ycwoKICAgICAgdmFyIGVsZWN0cmljaXR5ID0gZDMuc2NhbGVMaW5lYXIoKS5kb21haW4oWzAsIGVsZS5yZWR1Y2UoZnVuY3Rpb24gKHN1bSwgdmFsKSB7CiAgICAgICAgcmV0dXJuIHN1bSArIHZhbDsKICAgICAgfSwgMCldKS5yYW5nZShbMCwgYmFyV2lkdGhdKTsKICAgICAgdmFyIGluZHVzdHJ5ID0gZDMuc2NhbGVMaW5lYXIoKS5kb21haW4oWzAsIGluZC5yZWR1Y2UoZnVuY3Rpb24gKHN1bSwgdmFsKSB7CiAgICAgICAgcmV0dXJuIHN1bSArIHZhbDsKICAgICAgfSwgMCldKS5yYW5nZShbMCwgYmFyV2lkdGhdKTsKICAgICAgdmFyIHRyYW5zcG9ydCA9IGQzLnNjYWxlTGluZWFyKCkuZG9tYWluKFswLCB0cmFuLnJlZHVjZShmdW5jdGlvbiAoc3VtLCB2YWwpIHsKICAgICAgICByZXR1cm4gc3VtICsgdmFsOwogICAgICB9LCAwKV0pLnJhbmdlKFswLCBiYXJXaWR0aF0pOwogICAgICB2YXIgcmVzaWRlbnRpYWwgPSBkMy5zY2FsZUxpbmVhcigpLmRvbWFpbihbMCwgcmVzLnJlZHVjZShmdW5jdGlvbiAoc3VtLCB2YWwpIHsKICAgICAgICByZXR1cm4gc3VtICsgdmFsOwogICAgICB9LCAwKV0pLnJhbmdlKFswLCBiYXJXaWR0aF0pOwogICAgICByZXR1cm4gewogICAgICAgIGVsZWN0cmljaXR5OiBlbGVjdHJpY2l0eSwKICAgICAgICBpbmR1c3RyeTogaW5kdXN0cnksCiAgICAgICAgcmVzaWRlbnRpYWw6IHJlc2lkZW50aWFsLAogICAgICAgIHRyYW5zcG9ydDogdHJhbnNwb3J0CiAgICAgIH07CiAgICB9LAogICAgY3JlYXRlUmVjdDogZnVuY3Rpb24gY3JlYXRlUmVjdCgpIHsKICAgICAgdmFyIHNlbGVjdGVkUmVnaW9uID0gdGhpcy5kYXRhRmlsdGVyOwogICAgICB2YXIgc2NhbGUgPSB0aGlzLnNjYWxlWDsKICAgICAgdmFyIHkgPSB0aGlzLnNjYWxlWTsKICAgICAgdmFyIHBlcmNTY2FsZSA9IHRoaXMuc2NhbGVQZXJjOwogICAgICB2YXIgc2VjdG9ySGVpZ2h0ID0gMDsKCiAgICAgIHZhciBzZWN0b3JzID0gXy5tYXAoc2VsZWN0ZWRSZWdpb24sIGZ1bmN0aW9uIChzZWN0b3IsIGtleSkgewogICAgICAgIHZhciBWYWx1ZVN1bSA9IGQzLnN1bShkMy52YWx1ZXMoc2VsZWN0ZWRSZWdpb25ba2V5XSkpOwogICAgICAgIHZhciB5VmFsdWUgPSB5KFZhbHVlU3VtKTsKICAgICAgICB2YXIgaW5pdGlhbEhlaWdodCA9IHNlY3RvckhlaWdodDsKICAgICAgICBzZWN0b3JIZWlnaHQgPSBzZWN0b3JIZWlnaHQgKyB5VmFsdWUgKyAyMDsKICAgICAgICB2YXIgdG90YWxEaXN0ID0gMDsKCiAgICAgICAgdmFyIHJlY3RzID0gXy5tYXAoc2VsZWN0ZWRSZWdpb25ba2V5XSwgZnVuY3Rpb24gKGl0ZW0sIGkpIHsKICAgICAgICAgIHZhciBpbml0aWFsRGlzdCA9IHRvdGFsRGlzdDsKICAgICAgICAgIHRvdGFsRGlzdCA9IHRvdGFsRGlzdCArIHNjYWxlW2tleV0oaXRlbSk7CiAgICAgICAgICByZXR1cm4gewogICAgICAgICAgICBsYWJlbHM6IGksCiAgICAgICAgICAgIGRpc3Q6IGluaXRpYWxEaXN0LAogICAgICAgICAgICByZWN0V2lkdGg6IHNjYWxlW2tleV0oaXRlbSkKICAgICAgICAgIH07CiAgICAgICAgfSk7CgogICAgICAgIGNvbnNvbGUubG9nKHJlY3RzKTsKICAgICAgICByZXR1cm4gewogICAgICAgICAgcmVjdHM6IHJlY3RzLAogICAgICAgICAgc2VjdG9yOiBrZXksCiAgICAgICAgICBzZWN0b3JIZWlnaHQ6IGluaXRpYWxIZWlnaHQsCiAgICAgICAgICByZWN0SGVpZ2h0OiB5VmFsdWUKICAgICAgICB9OwogICAgICB9KTsKCiAgICAgIHJldHVybiBzZWN0b3JzOwogICAgfSwKICAgIGNyZWF0ZUVuTGFiZWxzOiBmdW5jdGlvbiBjcmVhdGVFbkxhYmVscygpIHsKICAgICAgdmFyIGVuZXJnaWVzID0gdGhpcy5lbmVyZ3lMYWJlbHM7CiAgICAgIHJldHVybiBlbmVyZ2llczsKICAgIH0KICB9Cn07"},{"version":3,"sources":["EnergyCarriers.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\n  <div class=\"visualization\" id=\"carriers\" width=\"90%\">\n    <svg width=\"80%\" height=\"100%\" :transform=\"'translate('+ margin.left * 2 + ',0)'\">\n      <g :transform=\"'translate('+ margin.left + ',' + margin.top + ')'\">\n        <g\n          v-for=\"(sector,i) in createRect\"\n          v-bind:key=\"i\"\n          :id=\"sector.sector\"\n          :transform=\"'translate('+ margin.left * 2 + ',' + sector.sectorHeight +')'\"\n        >\n          <rect\n            class=\"fuel_rect\"\n            :class=\"sector.sector\"\n            v-for=\"(rect, i) in sector.rects\"\n            v-bind:key=\"i\"\n            :id=\"rect.labels\"\n            :x=\"rect.dist\"\n            :width=\"rect.rectWidth\"\n            :height=\"sector.rectHeight\"\n          />\n        </g>\n        <text\n        class=\"sector-labels\"\n        v-for=\"(sector) in createRect\"\n        v-bind:key=\"sector.sector\"\n        :transform=\"'translate('+ ((width + margin.left) / 2) + ',' + (sector.sectorHeight + 10) +')'\"\n        >\n        {{sector.sector}}\n      </text>\n      </g>\n      <text v-for=\"(energy, i) in createEnLabels\" v-bind:key=\"i\">{{energy}}</text>\n    </svg>\n  </div>\n</template>\n\n<script>\nimport * as d3 from 'd3'\nimport _ from 'lodash'\n\n// data\nimport CarriersReport from '../assets/data/world_regional_report.json'\n\nexport default {\n  name: 'EnergyCarriers',\n  props: {\n    width: {\n      type: Number,\n      required: true\n    },\n    height: {\n      type: Number,\n      required: true\n    },\n    step: {\n      type: Number,\n      default: 0\n    }\n  },\n  data () {\n    return {\n      CarriersReport,\n      margin: {\n        left: 70,\n        top: 30,\n        bottom: 30,\n        right: 40\n      },\n      energyLabels: [\n        'coal',\n        'electricity',\n        'gas',\n        'mtbio',\n        'non-bioren',\n        'nuclear',\n        'oil',\n        'other',\n        'other gas',\n        'other liquids',\n        'other solids'\n      ]\n    }\n  },\n  computed: {\n    innerWidth () {\n      return this.width - this.margin.left - this.margin.right\n    },\n    innerHeight () {\n      return this.height - this.margin.top - this.margin.bottom\n    },\n    // data new structure and selection\n    nestVariables () {\n      const carriers = this.CarriersReport\n      return {\n        carriers,\n        groupsbyregion: _.groupBy(carriers, 'region'),\n        allFuels: _.uniq(_.map(carriers, 'fuel')),\n        sectors: ['industry', 'transport', 'residential', 'electricity']\n      }\n    },\n    dataNest () {\n      const {\n        carriers,\n        groupsbyregion,\n        allFuels,\n        sectors\n      } = this.nestVariables\n\n      _.forEach(groupsbyregion, (arr, key) => {\n        const obj = {}\n        _.forEach(sectors, sector => {\n          const fuelObj = {}\n          _.forEach(allFuels, (fuel, i) => {\n            const data = _.map(arr, sector)\n            fuelObj[fuel] = data[i]\n          })\n          obj[sector] = fuelObj\n        })\n        groupsbyregion[key] = obj\n      })\n      return groupsbyregion\n    },\n    dataFilter () {\n      const groupsbyregion = this.dataNest\n      return groupsbyregion['World']\n    },\n    // Scales\n    scaleY () {\n      const selectedRegion = this.dataFilter\n      let maxEnergy = []\n      const totalEnergy = _.map(selectedRegion, (value, fuel) => {\n        let fuels = d3.values(selectedRegion[fuel])\n        let maxValue = d3.max(fuels)\n        maxEnergy.push(maxValue)\n      })\n\n      const y = d3.scaleLinear()\n        .domain([0, maxEnergy.reduce((sum, val) => sum + val, 0)])\n        .range([0, 300])\n\n      return y\n    },\n    scaleX () {\n      const selectedRegion = this.dataFilter\n      const { width, height } = this\n      const barWidth = (width + this.margin.left) / 2\n      const ele = d3.values(selectedRegion.electricity)\n      const ind = d3.values(selectedRegion.industry)\n      const tran = d3.values(selectedRegion.transport)\n      const res = d3.values(selectedRegion.residential)\n      // defining scales for different sectors\n      const electricity = d3.scaleLinear()\n        .domain([0, ele.reduce((sum, val) => sum + val, 0)])\n        .range([0, barWidth])\n\n      const industry = d3.scaleLinear()\n        .domain([0, ind.reduce((sum, val) => sum + val, 0)])\n        .range([0, barWidth])\n\n      const transport = d3.scaleLinear()\n        .domain([0, tran.reduce((sum, val) => sum + val, 0)])\n        .range([0, barWidth])\n\n      const residential = d3.scaleLinear()\n        .domain([0, res.reduce((sum, val) => sum + val, 0)])\n        .range([0, barWidth])\n\n      return {\n        electricity,\n        industry,\n        residential,\n        transport\n      }\n    },\n    createRect () {\n      const selectedRegion = this.dataFilter\n      const scale = this.scaleX\n      const y = this.scaleY\n      const percScale = this.scalePerc\n      let sectorHeight = 0\n\n      const sectors = _.map(selectedRegion, (sector, key) => {\n        let ValueSum = d3.sum(d3.values(selectedRegion[key]))\n        let yValue = y(ValueSum)\n\n        let initialHeight = sectorHeight\n        sectorHeight = sectorHeight + yValue + 20\n\n        let totalDist = 0\n        const rects = _.map(selectedRegion[key], (item, i) => {\n          let initialDist = totalDist\n          totalDist = totalDist + scale[key](item)\n\n          return {\n            labels: i,\n            dist: initialDist,\n            rectWidth: scale[key](item)\n          }\n        })\n        console.log(rects)\n        return {\n          rects,\n          sector: key,\n          sectorHeight: initialHeight,\n          rectHeight: yValue\n        }\n      })\n      return sectors\n    },\n    createEnLabels () {\n      const energies = this.energyLabels\n      return energies\n    }\n  }\n}\n</script>\n\n<!-- Add \"scoped\" attribute to limit CSS to this component only -->\n<style scoped lang=\"scss\">\n@import \"library/src/style/variables.scss\";\n\n.visualization {\n  width: inherit;\n  height: inherit;\n}\n\n.fuel_rect {\n  stroke: $color-yellow;\n  fill: getColor(yellow, 80)\n}\n</style>\n"],"sourceRoot":"src/components"}]}