{"remainingRequest":"/Users/francescamorini/projects/senses/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/francescamorini/projects/senses/src/components/EmissionsChart.vue?vue&type=style&index=0&id=609f70a2&scoped=true&lang=scss&","dependencies":[{"path":"/Users/francescamorini/projects/senses/src/components/EmissionsChart.vue","mtime":1575649855858},{"path":"/Users/francescamorini/projects/senses/node_modules/css-loader/dist/cjs.js","mtime":1575047513267},{"path":"/Users/francescamorini/projects/senses/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":1575047516506},{"path":"/Users/francescamorini/projects/senses/node_modules/postcss-loader/src/index.js","mtime":1575047515169},{"path":"/Users/francescamorini/projects/senses/node_modules/sass-loader/dist/cjs.js","mtime":1575047516128},{"path":"/Users/francescamorini/projects/senses/node_modules/cache-loader/dist/cjs.js","mtime":1575047512487},{"path":"/Users/francescamorini/projects/senses/node_modules/vue-loader/lib/index.js","mtime":1575047516506}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKQGltcG9ydCAibGlicmFyeS9zcmMvc3R5bGUvdmFyaWFibGVzLnNjc3MiOwoudmlzdWFsaXphdGlvbiB7CiAgd2lkdGg6IGluaGVyaXQ7CiAgaGVpZ2h0OiBpbmhlcml0Owp9CgojZW1pc3Npb25zIHsKICBzdHJva2U6ICRjb2xvci1yZWQ7CiAgZmlsbDogbm9uZTsKfQoKLmVtaXNzaW9uX19jaHVua3MgewogIHN0cm9rZTogJGNvbG9yLWdyYXk7Cn0KCi5zdWJzZWN0b3JzRGF0YSB7CiAgLmluYWN0aXZlIHsKICAgIGRpc3BsYXk6IG5vbmU7CiAgfQp9CgouYXBwbGljYXRpb25zRGF0YSB7CiAgLmluYWN0aXZlIHsKICAgIGZpbGwtb3BhY2l0eTogMC4xOwogIH0KfQoKLnRpY2sgPiB0ZXh0IHsKICBmaWxsOiAkY29sb3Itb3JhbmdlOwp9Cg=="},{"version":3,"sources":["EmissionsChart.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAkQA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA","file":"EmissionsChart.vue","sourceRoot":"src/components","sourcesContent":["<template>\n  <div class=\"visualization\" id=\"emissions__chart\">\n    <svg class=\"emissions\" width=\"100%\" height=\"100%\">\n      <g :transform=\"'translate(' + margin.left + ',' + margin.top + ')'\">\n        <g\n          class=\"axis\"\n          v-axis:x=\"scales\"\n          :transfrom=\"'translate(' + 0 + ',' + this.innerHeight + ')'\"\n        />\n        <EmissionsDots\n        :step = \"step\"\n        :width=\"this.innerWidth\"\n        :margin=\"margin\"\n        :height=\"this.innerHeight\"\n        :scales=\"scales\"\n        />\n        <g class=\"axis\" v-axis:y=\"scales\" />\n        <g id=\"first_step\" v-if=\"step <= 2\">\n          <path id=\"emissions\" :d=\"linePath\" />\n        </g>\n        <g class=\"applicationsData\" v-if=\"step >= 3\">\n          <path\n            v-for=\"(chunk, i) in applicationsData\"\n            v-bind:key=\"i\"\n            :d=\"chunk.d\"\n            :fill=\"chunk.color\"\n            :id=\"chunk.id\"\n            class=\"emission__chunks\"\n            :class=\"{ inactive: step >= 3.1 }\"\n          />\n        </g>\n        <g class=\"subsectorsData\" v-if=\"step >= 3.1\">\n          <path\n            v-for=\"(chunk, i) in subsectorsData\"\n            v-bind:key=\"i\"\n            :d=\"chunk.d\"\n            :fill=\"chunk.color\"\n            :id=\"chunk.id\"\n            class=\"emission__chunks\"\n            :class=\"{ inactive: chunk.active != step }\"\n          />\n        </g>\n        <dragline\n          v-if=\"step > 3\"\n          :width=\"this.innerWidth\"\n          :margin=\"margin\"\n          :height=\"this.innerHeight\"\n          :scales=\"scales\"\n          :data=\"subsectorsDataActive\"\n        />\n      </g>\n    </svg>\n  </div>\n</template>\n\n<script>\n// Libraries\nimport * as d3 from 'd3'\n\nimport { group, groups, rollup, rollups } from 'd3-array'\n\n// components\nimport EmissionsDots from './subcomponents/EmissionsDots.vue'\nimport Dragline from './subcomponents/Dragline.vue'\n\n// Data\nimport EmissionData from '../assets/data/emissions-merged.json'\nimport HistoricalEmissions from '../assets/data/emissions_historical.json'\n\n// merge data into one file\n// function merge (){\n//   const merged = emissionsData.map(e => {\n//     console.log(e.Year)\n\n//     return {\n//       ...emissionsData.find(d => d.Year === e.Year),\n//       ...subEmissionsData.find(d => d.Year === e.Year),\n//       ...ApplicationsShare.find(d => d.Year === e.Year)\n//     }\n//   })\n//   console.log(JSON.stringify(merged))\n// }\n// merge()\n\nexport default {\n  name: 'EmissionsChart',\n  components: {\n    EmissionsDots,\n    Dragline\n  },\n  props: {\n    width: {\n      type: Number,\n      required: true\n    },\n    height: {\n      type: Number,\n      required: true\n    },\n    step: {\n      type: Number,\n      default: 0\n    }\n  },\n  data () {\n    return {\n      margin: {\n        left: 250,\n        top: 30,\n        bottom: 30,\n        right: 30\n      }\n    }\n  },\n  watch: {\n    step: function (step) {\n      console.log(step, this.width, this.height)\n    }\n  },\n  computed: {\n    innerWidth () {\n      return this.width - this.margin.left - this.margin.right\n    },\n    innerHeight () {\n      return this.height - this.margin.top - this.margin.bottom\n    },\n    maxYear: function () {\n      return this.step >= 2 ? 2015 : 2080\n    },\n    lineData: function () {\n      // other way of doing it:\n      // const data = HistoricalEmissions.filter(d => d.Year <= this.maxYear)\n      // const reduced = rollups(data, v => d3.sum(v, d => d.Value), d => d.Year)\n      // console.log('lineData', data, reduced)\n      return EmissionData.filter(d => d.Year <= this.maxYear).map(d => [\n        d.Year,\n        d.Emissions\n      ])\n    },\n    linePath () {\n      return d3\n        .line()\n        .x(d => {\n          return this.scales.x(d[0])\n        })\n        .y(d => {\n          return this.scales.y(d[1])\n        })\n        .curve(d3.curveLinear)(this.lineData)\n    },\n    scales () {\n      return {\n        x: d3\n          .scaleLinear()\n          .domain([1990, this.maxYear])\n          .rangeRound([0, this.innerWidth - 200]),\n        y: d3\n          .scaleLinear()\n          .domain([0, 40000000])\n          .rangeRound([this.innerHeight - this.margin.bottom, 0])\n      }\n    },\n    subsectors: function () {\n      return [\n        { key: 'Public', color: '#33121c', active: 3.1 },\n        { key: 'Autoproduced', color: '#33121c', active: 3.1 },\n        { key: 'OtherEn', color: '#611731', active: 3.2 },\n        { key: 'Combustion', color: '#dd5f84', active: 3.3 },\n        { key: 'Production', color: '#dd5f84', active: 3.3 },\n        { key: 'Solvents', color: '#dd5f84', active: 3.3 },\n        { key: 'OtherProc', color: '#dd5f84', active: 3.3 },\n        { key: 'IndWaste', color: '#dd5f84', active: 3.3 },\n        { key: 'Aviation', color: '#ed96ab', active: 3.4 },\n        { key: 'Road', color: '#ed96ab', active: 3.4 },\n        { key: 'Other', color: '#ed96ab', active: 3.4 },\n        { key: 'Shipping', color: '#ed96ab', active: 3.4 },\n        { key: 'CommRes', color: '#f8cbd4', active: 3.5 },\n        { key: 'Agriculture', color: '#f8cbd4', active: 3.5 }\n      ]\n    },\n    applications: function () {\n      return [\n        { key: 'Electricity', color: '#33121c', active: 3.1 },\n        { key: 'OtherEnergy', color: '#611731', active: 3.1 },\n        { key: 'Industry', color: '#dd5f84', active: 3.1 },\n        { key: 'Transports', color: '#ed96ab', active: 3.1 },\n        { key: 'Building', color: '#f8cbd4', active: 3.1 }\n      ]\n    },\n\n    applicationsData: function () {\n      const stacked = d3.stack().keys(this.applications.map(d => d.key))(\n        EmissionData\n      )\n\n      return stacked.map((d, i) => ({\n        d: this.areaGenerator(d),\n        color: this.applications[i].color,\n        id: this.applications[i].key\n      }))\n    },\n    subsectorsData: function () {\n      const stacked = d3.stack().keys(this.subsectors.map(d => d.key))(\n        EmissionData\n      )\n\n      return stacked.map((d, i) => ({\n        d: this.areaGenerator(d),\n        color: this.subsectors[i].color,\n        id: this.subsectors[i].key,\n        active: this.subsectors[i].active,\n        data: d\n      }))\n    },\n    subsectorsDataActive: function () {\n      return this.subsectorsData.filter(d => d.active === this.step)\n    },\n    areaGenerator: function () {\n      const { x, y } = this.scales\n      return d3\n        .area()\n        .x(d => x(d.data.Year))\n        .curve(d3.curveLinear)\n        .y0(d => y(d[0]))\n        .y1(d => y(d[1]))\n    },\n    dotsPosition () {\n      const { x, y } = this.scales\n      const netOne = [2050, 0]\n      const NetTwo = [2075, 0]\n\n      return {\n        cx: x(netOne[0]),\n        cy: y(netOne[1])\n      }\n    }\n  },\n  directives: {\n    axis (el, binding) {\n      const axis = binding.arg\n      // console.log(\"axis\", axis);\n      const axisMethod = { x: 'axisTop', y: 'axisLeft' }[axis]\n      const tickFormat = { x: d3.format('d'), y: d3.format('.2s') }[axis]\n      const methodArg = binding.value[axis]\n\n      d3.select(el)\n        .transition()\n        .duration(1000)\n        .call(d3[axisMethod](methodArg)\n          .tickSize(0)\n          .tickPadding(10)\n          .tickFormat(tickFormat))\n    }\n  }\n}\n</script>\n\n<style scoped lang=\"scss\">\n@import \"library/src/style/variables.scss\";\n.visualization {\n  width: inherit;\n  height: inherit;\n}\n\n#emissions {\n  stroke: $color-red;\n  fill: none;\n}\n\n.emission__chunks {\n  stroke: $color-gray;\n}\n\n.subsectorsData {\n  .inactive {\n    display: none;\n  }\n}\n\n.applicationsData {\n  .inactive {\n    fill-opacity: 0.1;\n  }\n}\n\n.tick > text {\n  fill: $color-orange;\n}\n</style>\n"]}]}