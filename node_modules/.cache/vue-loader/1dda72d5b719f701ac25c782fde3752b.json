{"remainingRequest":"/Users/francescamorini/projects/transition-module-senses/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/francescamorini/projects/transition-module-senses/src/components/EmissionsChart.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/francescamorini/projects/transition-module-senses/src/components/EmissionsChart.vue","mtime":1574419953003},{"path":"/Users/francescamorini/projects/transition-module-senses/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/francescamorini/projects/transition-module-senses/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/francescamorini/projects/transition-module-senses/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/francescamorini/projects/transition-module-senses/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["EmissionsChart.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAgfile":"EmissionsChart.vue","sourceRoot":"src/components","sourcesContent":["<template>\n  <div class=\"visualization\" id=\"emissions__chart\">\n    <svg class=\"emissions\" width=\"100%\" height=\"100%\">\n      <g :transform=\"'translate(' + margin.left + ',' + margin.top + ')'\">\n        <g\n          class=\"axis\"\n          v-axis:x=\"scales\"\n          :transfrom=\"'translate(' + 0 + ',' + this.innerHeight + ')'\"\n        />\n        <g class=\"axis\" v-axis:y=\"scales\" />\n        <g id=\"first_step\" v-if=\"step <= 2\">\n          <path id=\"emissions\" :d=\"linePath\" />\n        </g>\n        <g class=\"applicationsData\" v-if=\"step >= 3\">\n          <path\n            v-for=\"(chunk, i) in applicationsData\"\n            v-bind:key=\"i\"\n            :d=\"chunk.d\"\n            :fill=\"chunk.color\"\n            :id=\"chunk.id\"\n            class=\"emission__chunks\"\n            :class=\"{ inactive: step >= 3.1 }\"\n          />\n        </g>\n        <g class=\"subsectorsData\" v-if=\"step >= 3.1\">\n          <path\n            v-for=\"(chunk, i) in subsectorsData\"\n            v-bind:key=\"i\"\n            :d=\"chunk.d\"\n            :fill=\"chunk.color\"\n            :id=\"chunk.id\"\n            class=\"emission__chunks\"\n            :class=\"{ inactive: chunk.active != step }\"\n          />\n        </g>\n        <dragline\n          :width=\"this.innerWidth\"\n          :margin=\"margin\"\n          :height=\"this.innerHeight\"\n          :scales=\"scales\"\n          :data=\"subsectorsDataActive\"\n        />\n      </g>\n    </svg>\n  </div>\n</template>\n\n<script>\n// Libraries\nimport * as d3 from 'd3'\n\nimport { group, groups, rollup, rollups } from 'd3-array'\n\n// components\nimport Dragline from './subcomponents/Dragline.vue'\n\n// Data\n// import emissionsData from '../assets/data/emissions.json'\n// import subEmissionsData from '../assets/data/emissions-stacked.json'\n// import ApplicationsShare from '../assets/data/subsectors-applications-share.json'\nimport EmissionData from '../assets/data/emissions-merged.json'\nimport HistoricalEmissions from '../assets/data/emissions_historical.json'\n\n// merge data into one file\n// function merge (){\n//   const merged = emissionsData.map(e => {\n//     console.log(e.Year)\n\n//     return {\n//       ...emissionsData.find(d => d.Year === e.Year),\n//       ...subEmissionsData.find(d => d.Year === e.Year),\n//       ...ApplicationsShare.find(d => d.Year === e.Year)\n//     }\n//   })\n//   console.log(JSON.stringify(merged))\n// }\n// merge()\n\nexport default {\n  name: 'EmissionsChart',\n  components: {\n    Dragline\n  },\n  props: {\n    width: {\n      type: Number,\n      required: true\n    },\n    height: {\n      type: Number,\n      required: true\n    },\n    step: {\n      type: Number,\n      default: 0\n    }\n  },\n  data () {\n    return {\n      margin: {\n        left: 70,\n        top: 30,\n        bottom: 30,\n        right: 30\n      }\n    }\n  },\n  watch: {\n    step: function (step) {\n      console.log(step, this.width, this.height)\n    }\n  },\n  computed: {\n    innerWidth () {\n      return this.width - this.margin.left - this.margin.right\n    },\n    innerHeight () {\n      return this.height - this.margin.top - this.margin.bottom\n    },\n    maxYear: function () {\n      return this.step >= 2 ? 2015 : 2080\n    },\n    lineData: function () {\n      // other way of doing it:\n      // const data = HistoricalEmissions.filter(d => d.Year <= this.maxYear)\n      // const reduced = rollups(data, v => d3.sum(v, d => d.Value), d => d.Year)\n      // console.log('lineData', data, reduced)\n      return EmissionData.filter(d => d.Year <= this.maxYear).map(d => [\n        d.Year,\n        d.Emissions\n      ])\n    },\n    linePath () {\n      return d3\n        .line()\n        .x(d => {\n          return this.scales.x(d[0])\n        })\n        .y(d => {\n          return this.scales.y(d[1])\n        })\n        .curve(d3.curveLinear)(this.lineData)\n    },\n    scales () {\n      return {\n        x: d3\n          .scaleLinear()\n          .domain([1990, this.maxYear])\n          .rangeRound([0, this.innerWidth]),\n        y: d3\n          .scaleLinear()\n          .domain([0, 40000000])\n          .rangeRound([this.innerHeight, 0])\n      }\n    },\n    subsectors: function () {\n      return [\n        { key: 'Public', color: '#33121c', active: 3.1 },\n        { key: 'Autoproduced', color: '#33121c', active: 3.1 },\n        { key: 'OtherEn', color: '#611731', active: 3.2 },\n        { key: 'Combustion', color: '#931547', active: 3.3 },\n        { key: 'Production', color: '#931547', active: 3.3 },\n        { key: 'Solvents', color: '#931547', active: 3.3 },\n        { key: 'OtherProc', color: '#931547', active: 3.3 },\n        { key: 'IndWaste', color: '#931547', active: 3.3 },\n        { key: 'Aviation', color: '#dd5f84', active: 3.4 },\n        { key: 'Road', color: '#dd5f84', active: 3.4 },\n        { key: 'Other', color: '#dd5f84', active: 3.4 },\n        { key: 'Shipping', color: '#dd5f84', active: 3.4 },\n        { key: 'CommRes', color: '#ed96ab', active: 3.5 },\n        { key: 'Agriculture', color: '#ed96ab', active: 3.5 }\n      ]\n    },\n    applications: function () {\n      return [\n        { key: 'Electricity', color: '#33121c', active: 3.1 },\n        { key: 'OtherEnergy', color: '#611731', active: 3.1 },\n        { key: 'Industry', color: '#931547', active: 3.1 },\n        { key: 'Transports', color: '#dd5f84', active: 3.1 },\n        { key: 'Building', color: '#ed96ab', active: 3.1 }\n      ]\n    },\n\n    applicationsData: function () {\n      const stacked = d3.stack().keys(this.applications.map(d => d.key))(\n        EmissionData\n      )\n\n      return stacked.map((d, i) => ({\n        d: this.areaGenerator(d),\n        color: this.applications[i].color,\n        id: this.applications[i].key\n      }))\n    },\n    subsectorsData: function () {\n      const stacked = d3.stack().keys(this.subsectors.map(d => d.key))(\n        EmissionData\n      )\n\n      return stacked.map((d, i) => ({\n        d: this.areaGenerator(d),\n        color: this.subsectors[i].color,\n        id: this.subsectors[i].key,\n        active: this.subsectors[i].active,\n        data: d\n      }))\n    },\n    subsectorsDataActive: function () {\n      return this.subsectorsData.filter(d => d.active === this.step)\n    },\n    areaGenerator: function () {\n      const { x, y } = this.scales\n      return d3\n        .area()\n        .x(d => x(d.data.Year))\n        .curve(d3.curveLinear)\n        .y0(d => y(d[0]))\n        .y1(d => y(d[1]))\n    }\n    // stackedDataLong: function () {\n    //   const chunkColors = [\n    //     '#33121c',\n    //     '#611731',\n    //     '#931547',\n    //     '#dd5f84',\n    //     '#ed96ab'\n    //   ]\n\n    //   const data = Array.from(\n    //     rollup(\n    //       HistoricalEmissions,\n    //       v => d3.sum(v, d => d.Value),\n    //       d => d.Year,\n    //       d => d.Sector\n    //     )\n    //   )\n\n    //   // console.log('grouped', data)\n    //   const keys = Array.from(group(HistoricalEmissions, d => d.Sector).keys())\n    //   // console.log('keys', keys)\n\n    //   const stacked = d3\n    //     .stack()\n    //     .keys(keys)\n    //     .value(([, values], key) => values.get(key))(data)\n\n    //   const { x, y } = this.scales\n\n    //   const areasX = d3\n    //     .area()\n    //     .x(d => x(d.data[0]))\n    //     .curve(d3.curveLinear)\n    //     .y0(d => y(d[0]))\n    //     .y1(d => y(d[1]))\n\n    //   return stacked.map((d, i) => ({\n    //     d: areasX(d),\n    //     color: chunkColors[i],\n    //     id: keys[i]\n    //   }))\n    // }\n  },\n  directives: {\n    axis (el, binding) {\n      const axis = binding.arg\n      // console.log(\"axis\", axis);\n      const axisMethod = { x: 'axisBottom', y: 'axisLeft' }[axis]\n      const tickFormat = { x: d3.format('d'), y: d3.format('.2s') }[axis]\n      const methodArg = binding.value[axis]\n\n      d3.select(el)\n        .transition()\n        .duration(1000)\n        .call(d3[axisMethod](methodArg).tickFormat(tickFormat))\n    }\n  }\n}\n</script>\n\n<style scoped lang=\"scss\">\n@import \"library/src/style/variables.scss\";\n.visualization {\n  width: inherit;\n  height: inherit;\n}\n\nsvg {\n  // position: absolute;\n  // top: 10vh;\n}\n\n#emissions {\n  stroke: $color-red;\n  fill: none;\n}\n\n.emission__chunks {\n  stroke: $color-red;\n}\n\n.subsectorsData {\n  .inactive {\n    display: none;\n  }\n}\n\n.applicationsData {\n  .inactive {\n    fill: none;\n  }\n}\n</style>\n"]}]}