{"remainingRequest":"/Users/francescamorini/projects/transition-module/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/Users/francescamorini/projects/transition-module/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/francescamorini/projects/transition-module/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/francescamorini/projects/transition-module/src/App.vue?vue&type=template&id=7ba5bd90&","dependencies":[{"path":"/Users/francescamorini/projects/transition-module/src/App.vue","mtime":1573210461990},{"path":"/Users/francescamorini/projects/transition-module/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/francescamorini/projects/transition-module/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/Users/francescamorini/projects/transition-module/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/francescamorini/projects/transition-module/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:dmFyIHJlbmRlciA9IGZ1bmN0aW9uKCkgewogIHZhciBfdm0gPSB0aGlzCiAgdmFyIF9oID0gX3ZtLiRjcmVhdGVFbGVtZW50CiAgdmFyIF9jID0gX3ZtLl9zZWxmLl9jIHx8IF9oCiAgcmV0dXJuIF9jKAogICAgImRpdiIsCiAgICB7IHJlZjogInZpcyIsIGF0dHJzOiB7IGlkOiAiYXBwIiB9IH0sCiAgICBbCiAgICAgIF9jKCJTZW5zZXNNZW51IiksCiAgICAgIF9jKAogICAgICAgICJMYXlvdXRTY3JvbGx5dGVsbGluZyIsCiAgICAgICAgewogICAgICAgICAgc2NvcGVkU2xvdHM6IF92bS5fdShbCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICBrZXk6ICJ2aXMiLAogICAgICAgICAgICAgIGZuOiBmdW5jdGlvbihyZWYpIHsKICAgICAgICAgICAgICAgIHZhciB3aWR0aCA9IHJlZi53aWR0aAogICAgICAgICAgICAgICAgdmFyIGhlaWdodCA9IHJlZi5oZWlnaHQKICAgICAgICAgICAgICAgIHZhciBzdGVwID0gcmVmLnN0ZXAKICAgICAgICAgICAgICAgIHJldHVybiBbCiAgICAgICAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICAgICAgICJkaXYiLAogICAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAidmlzLWlubmVyIiwKICAgICAgICAgICAgICAgICAgICAgIHN0eWxlOiB7CiAgICAgICAgICAgICAgICAgICAgICAgIHdpZHRoOiB3aWR0aCArICJweCIsCiAgICAgICAgICAgICAgICAgICAgICAgIGhlaWdodDogaGVpZ2h0ICsgInB4IgogICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgWwogICAgICAgICAgICAgICAgICAgICAgc3RlcCA8PSAzLjUKICAgICAgICAgICAgICAgICAgICAgICAgPyBfYygiRW1pc3Npb25zQ2hhcnQiLCB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhdHRyczogeyBzdGVwOiBzdGVwLCB3aWR0aDogd2lkdGgsIGhlaWdodDogaGVpZ2h0IH0KICAgICAgICAgICAgICAgICAgICAgICAgICB9KQogICAgICAgICAgICAgICAgICAgICAgICA6IF92bS5fZSgpLAogICAgICAgICAgICAgICAgICAgICAgc3RlcCA9PT0gNAogICAgICAgICAgICAgICAgICAgICAgICA/IF9jKCJFbmVyZ3lDYXJyaWVycyIsIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGF0dHJzOiB7IHN0ZXA6IHN0ZXAsIHdpZHRoOiB3aWR0aCwgaGVpZ2h0OiBoZWlnaHQgfQogICAgICAgICAgICAgICAgICAgICAgICAgIH0pCiAgICAgICAgICAgICAgICAgICAgICAgIDogX3ZtLl9lKCkKICAgICAgICAgICAgICAgICAgICBdLAogICAgICAgICAgICAgICAgICAgIDEKICAgICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgICAgXQogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgICAgXSkKICAgICAgICB9LAogICAgICAgIFsKICAgICAgICAgIF9jKAogICAgICAgICAgICAiZGl2IiwKICAgICAgICAgICAgeyBhdHRyczogeyBzbG90OiAidGV4dCIgfSwgc2xvdDogInRleHQiIH0sCiAgICAgICAgICAgIFsKICAgICAgICAgICAgICBfYygiSW50ZXJzZWN0aW9uT2JzZXJ2ZXIiLCB7IGF0dHJzOiB7IHN0ZXA6IDAgfSB9LCBbCiAgICAgICAgICAgICAgICBfYygiaDIiLCB7IHN0YXRpY0NsYXNzOiAidGl0bGUiLCBhdHRyczogeyBpZDogImNvdmVyIiB9IH0sIFsKICAgICAgICAgICAgICAgICAgX3ZtLl92KCJXaGF0IHdpbGwgeW91IGxlYXJuPyIpCiAgICAgICAgICAgICAgICBdKSwKICAgICAgICAgICAgICAgIF9jKCJwIiwgWwogICAgICAgICAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICAgICAgICAgIiBJbiB0aGlzIG1vZHVsZSB5b3Ugd2lsbCBiZSBhYmxlIHRvIGJyZWFrIGRvd24gaGlzdG9yaWNhbCBlbWlzc2lvbnMgYWNjb3JkaW5nIHRvIHRoZSBzZWN0b3IgdGhhdCBnZW5lcmF0ZSB0aGVtLiBZb3Ugd2lsbCBiZSBpbnRyb2R1Y2VkIHRvIHRoZSBjb25jZXB0IG9mIEVsZWN0cmlmaWNhdGlvbiBhbmQgdG8gdGhlIGJyb2FkIHN0cmF0ZWd5IHRvIGdvIENhcmJvbiBOZXV0cmFsIGJ5IHJlZHVjaW5nIGVtaXNzaW9ucy4gSW4gdGhlIGxhc3Qgc2VjdGlvbiB5b3Ugd2lsbCBiZSBhYmxlIHRvIGV4cGxvcmUgdGhlIGNvbXBhdGliaWxpdHkgb2YgZGlmZmVyZW50IHNjZW5hcmlvcyB3aXRoIHRoaXMgZGVjYXJib25pemF0aW9uIHN0cmF0ZWd5LiAiCiAgICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICAgIF0pCiAgICAgICAgICAgICAgXSksCiAgICAgICAgICAgICAgX2MoIkludGVyc2VjdGlvbk9ic2VydmVyIiwgeyBhdHRyczogeyBzdGVwOiAxIH0gfSwgWwogICAgICAgICAgICAgICAgX2MoImgyIiwgeyBzdGF0aWNDbGFzczogInRpdGxlIiwgYXR0cnM6IHsgaWQ6ICJuZXRfX3plcm8iIH0gfSwgWwogICAgICAgICAgICAgICAgICBfdm0uX3YoIldoYXQgaXMgTmV0LVplcm8/IikKICAgICAgICAgICAgICAgIF0pLAogICAgICAgICAgICAgICAgX2MoInAiLCBbCiAgICAgICAgICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgICAgICAgICAiIFRvIHN0YWJpbGl6ZSBnbG9iYWwgdGVtcGVyYXR1cmVzIGFuZCBzdG9wIGdsb2JhbCB3YXJtaW5nLCBuZXQgZ3JlZW5ob3VzZSBnYXMgZW1pc3Npb25zIHRvIHRoZSBhdG1vc3BoZXJlIGhhdmUgdG8gYmUgcmVkdWNlZCB0byB6ZXJvLiAiCiAgICAgICAgICAgICAgICAgICksCiAgICAgICAgICAgICAgICAgIF9jKCJiciIpLAogICAgICAgICAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICAgICAgICAgIkNPMiBlbWlzc2lvbnMgZnJvbSB0aGUgZW5lcmd5IHNlY3RvciByZXByZXNlbnQgdGhlIGxpb24gc2hhcmUgb2YgZ2xvYmFsIGdyZWVuaG91c2UgZ2FzIGVtaXNzaW9ucyBhbmQgaGF2ZSBzdGVhZGlseSBpbmNyZWFzZWQgb3ZlciB0aGUgcGFzdCAzMCB5ZWFycy4gIgogICAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgICBdKQogICAgICAgICAgICAgIF0pLAogICAgICAgICAgICAgIF9jKCJJbnRlcnNlY3Rpb25PYnNlcnZlciIsIHsgYXR0cnM6IHsgc3RlcDogMS4xIH0gfSwgWwogICAgICAgICAgICAgICAgX2MoInAiLCBbCiAgICAgICAgICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgICAgICAgICAiIEhvd2V2ZXIsIGxpbWl0aW5nIGdsb2JhbCB3YXJtaW5nIHRvIDLCsEMgYWJvdmUgcHJlLWluZHVzdHJpYWwgbGV2ZWxzIHdpbGwgcmVxdWlyZSBuZXQtemVybyBlbWlzc2lvbnMgYnkgMjA3NS4gQSBsaW1pdCBvZiAxLjXCsEMgd2lsbCByZXF1aXJlIGNhcmJvbiBuZXV0cmFsaXR5IGV2ZW4gYnkgMjA1MC4gIgogICAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgICBdKQogICAgICAgICAgICAgIF0pLAogICAgICAgICAgICAgIF9jKCJJbnRlcnNlY3Rpb25PYnNlcnZlciIsIHsgYXR0cnM6IHsgc3RlcDogMS4yIH0gfSwgWwogICAgICAgICAgICAgICAgX2MoInAiLCBbCiAgICAgICAgICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgICAgICAgICAiIEEgbGltaXQgb2YgMS41wrBDIHdpbGwgcmVxdWlyZSBjYXJib24gbmV1dHJhbGl0eSBldmVuIGJ5IDIwNTAuICIKICAgICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgICAgXSkKICAgICAgICAgICAgICBdKSwKICAgICAgICAgICAgICBfYygiSW50ZXJzZWN0aW9uT2JzZXJ2ZXIiLCB7IGF0dHJzOiB7IHN0ZXA6IDIgfSB9LCBbCiAgICAgICAgICAgICAgICBfYygKICAgICAgICAgICAgICAgICAgImgyIiwKICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAidGl0bGUiLAogICAgICAgICAgICAgICAgICAgIGF0dHJzOiB7IGlkOiAiaW5jcmVhc2luZ19fZW1pc3Npb25zIiB9CiAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgIFtfdm0uX3YoIkVtaXNzaW9uIGhhdmUgYmVlbiBzdGVhZGlseSBpbmNyZWFzaW5nIildCiAgICAgICAgICAgICAgICApLAogICAgICAgICAgICAgICAgX2MoInAiLCBbCiAgICAgICAgICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgICAgICAgICAiIExldCB1cyB0YWtlIGEgY2xvc2VyIGxvb2sgYXQgdGhlIHBhc3QgMzAgeWVhcnMgd2hlcmUgZW1pc3Npb25zIGhhdmUgYmVlbiBzdGVhZGlseSBpbmNyZWFzaW5nLiAiCiAgICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICAgIF0pCiAgICAgICAgICAgICAgXSksCiAgICAgICAgICAgICAgX2MoIkludGVyc2VjdGlvbk9ic2VydmVyIiwgeyBhdHRyczogeyBzdGVwOiAzIH0gfSwgWwogICAgICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgICAgICJoMiIsCiAgICAgICAgICAgICAgICAgIHsgc3RhdGljQ2xhc3M6ICJ0aXRsZSIsIGF0dHJzOiB7IGlkOiAic2VjdG9yX19lbWlzc2lvbnMiIH0gfSwKICAgICAgICAgICAgICAgICAgW192bS5fdigiV2hlcmUgZG8gdGhlIGN1cnJlbnQgZW1pc3Npb25zIGNvbWUgZnJvbT8iKV0KICAgICAgICAgICAgICAgICksCiAgICAgICAgICAgICAgICBfYygicCIsIFsKICAgICAgICAgICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAgICAgICAgICIgVGhlIGN1cnJlbnQgZW5lcmd5LXJlbGF0ZWQgQ08yIGVtaXNzaW9ucyBjb21lIGZyb20gZm91ciBkaWZmZXJlbnQgc2VjdG9yczogZWxlY3RyaWNpdHksIHRyYW5zcG9ydCwgaW5kdXN0cnkgYW5kIGJ1aWxkaW5ncyBhbmQgb3RoZXIgZW5lcmd5IHVzZXMuICIKICAgICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgICAgXSkKICAgICAgICAgICAgICBdKSwKICAgICAgICAgICAgICBfYygiSW50ZXJzZWN0aW9uT2JzZXJ2ZXIiLCB7IGF0dHJzOiB7IHN0ZXA6IDMuMSB9IH0sIFsKICAgICAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICAgICAiaDYiLAogICAgICAgICAgICAgICAgICB7IHN0YXRpY0NsYXNzOiAicCBtb25vIiwgYXR0cnM6IHsgaWQ6ICJlbGVjdHJpY2l0eSIgfSB9LAogICAgICAgICAgICAgICAgICBbX3ZtLl92KCJFbGVjdHJpY2l0eSBTZWN0b3IiKV0KICAgICAgICAgICAgICAgICksCiAgICAgICAgICAgICAgICBfYygicCIsIFsKICAgICAgICAgICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAgICAgICAgICIgVGhlIGVtaXNzaW9uIGZyb20gZWxlY3RyaWNpdHkgZ2VuZXJhdGlvbiByZXByZXNlbnQgYWJvdXQgb25lIHRoaXJkIGFuZCBoYXZlIGJlZW4gc3RlYWRpbHkgaW5jcmVhc2luZyBvdmVyIHRoZSBwYXN0IGRlY2FkZXMuIFRoZSBtYWluIHJlYXNvbiBpcyB0aGUgZWNvbm9taWMgZ3Jvd3RoIGluIHRoZSBkZXZlbG9waW5nIGNvdW50cmllcywgZXNwZWNpYWxseSBpbiBJbmRpYSBhbmQgQ2hpbmEsIHdoZXJlIHRoZSBkZW1hbmQgZm9yIGVsZWN0cmljaXR5IHNvYXJzIGFuZCBsZWFkcyB0byB0aGUgY29uc3RydWN0aW9uIG9mIG1vcmUgYW5kIG1vcmUgY29hbC1maXJlZCBwb3dlciBwbGFudHMuICIKICAgICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgICAgXSkKICAgICAgICAgICAgICBdKSwKICAgICAgICAgICAgICBfYygiSW50ZXJzZWN0aW9uT2JzZXJ2ZXIiLCB7IGF0dHJzOiB7IHN0ZXA6IDMuMiB9IH0sIFsKICAgICAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICAgICAiaDYiLAogICAgICAgICAgICAgICAgICB7IHN0YXRpY0NsYXNzOiAicCBtb25vIiwgYXR0cnM6IHsgaWQ6ICJ0cmFuc3BvcnQiIH0gfSwKICAgICAgICAgICAgICAgICAgW192bS5fdigiVHJhbnNwb3J0IFNlY3RvciIpXQogICAgICAgICAgICAgICAgKSwKICAgICAgICAgICAgICAgIF9jKCJwIiwgWwogICAgICAgICAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICAgICAgICAgIiBJbmNyZWFzaW5nIHJvYWQgdHJhbnNwb3J0LCBhdmlhdGlvbiBhbmQgc2hpcHBpbmcgYWxsIGNvbnRyaWJ1dGUgdG8gdGhlIGdsb2JhbGx5IHJpc2luZyB0cmFuc3BvcnQgZW1pc3Npb25zLiBSb2FkIHRyYW5zcG9ydCBpbmNsdWRlcyBzbWFsbCBwYXNzZW5nZXIgY2FycyBhcyB3ZWxsIGFzIHRydWNrcyBhbmQgYnVzZXMuIE1vc3Qgb2YgdGhlIHRyYW5zcG9ydCBhY3Rpdml0aWVzIGFyZSBjdXJyZW50bHkgZnVlbGVkIGJ5IG9pbC1iYXNlZCBwcm9kdWN0cyBhbmQgaXRzIGRlY2FyYm9uaXphdGlvbiB3aWxsIGJlIGEga2V5IGZ1dHVyZSBjaGFsbGVuZ2UuICIKICAgICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgICAgXSkKICAgICAgICAgICAgICBdKSwKICAgICAgICAgICAgICBfYygiSW50ZXJzZWN0aW9uT2JzZXJ2ZXIiLCB7IGF0dHJzOiB7IHN0ZXA6IDMuMyB9IH0sIFsKICAgICAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICAgICAiaDYiLAogICAgICAgICAgICAgICAgICB7IHN0YXRpY0NsYXNzOiAicCBtb25vIiwgYXR0cnM6IHsgaWQ6ICJyZXNpZGVudGlhbCIgfSB9LAogICAgICAgICAgICAgICAgICBbX3ZtLl92KCJSZXNpZGVudGlhbCBTZWN0b3IiKV0KICAgICAgICAgICAgICAgICksCiAgICAgICAgICAgICAgICBfYygicCIsIFsKICAgICAgICAgICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAgICAgICAgICIgVGhlIHJlc2lkZW50aWFsIHNlY3RvciBtYWlubHkgY29udHJpYnV0ZWQgZW1pc3Npb25zIGZyb20gc3BhY2UgaGVhdGluZyB3aXRoIGNvYWwsIGdhcyBvciBvaWwtYmFzZWQgcHJvZHVjdHMuIFRoZSBlbWlzc2lvbnMgaGF2ZSByZW1haW5lZCBjb25zdGFudCBvdmVyIHJlY2VudCBkZWNhZGVzLCBoZW5jZSBkZWNyZWFzaW5nIHRoZSBzaGFyZSBvZiByZXNpZGVudGlhbCBlbWlzc2lvbnMgaW4gdG90YWwgZW1pc3Npb25zLiBJdCB3YXMgZHJpdmVuIGJ5IGluY3JlYXNpbmcgZW5lcmd5IGVmZmljaWVuY3kgYW5kIGEgZ3JhZHVhbCBzaGlmdCBmcm9tIGNvYWwgdG8gZ2FzIGluIHNwYWNlIGhlYXRpbmcuICIKICAgICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgICAgXSkKICAgICAgICAgICAgICBdKSwKICAgICAgICAgICAgICBfYygiSW50ZXJzZWN0aW9uT2JzZXJ2ZXIiLCB7IGF0dHJzOiB7IHN0ZXA6IDMuNCB9IH0sIFsKICAgICAgICAgICAgICAgIF9jKCJoNiIsIHsgc3RhdGljQ2xhc3M6ICJwIG1vbm8iLCBhdHRyczogeyBpZDogImluZHVzdHJ5IiB9IH0sIFsKICAgICAgICAgICAgICAgICAgX3ZtLl92KCJJbmR1c3RyeSBTZWN0b3IiKQogICAgICAgICAgICAgICAgXSksCiAgICAgICAgICAgICAgICBfYygicCIsIFsKICAgICAgICAgICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAgICAgICAgICIgSW5kdXN0cnkgaXMgYSBjb21wbGV4IHNlY3RvciB0aGF0IGNhdXNlcyBlbWlzc2lvbnMgZWl0aGVyIGJ5IGNvbWJ1c3RpbmcgZm9zc2lsIGZ1ZWxzIGZvciBoZWF0aW5nIG9yIHVzaW5nIHRoZW0gYXMgZmVlZHN0b2NrcyBmb3IgaW5kdXN0cmlhbCBnb29kcyBsaWtlIGNlbWVudCBvciBwbGFzdGljcy4gVGhlIG1haW4gY29udHJpYnV0b3JzIHRvIGluZHVzdHJ5IGVtaXNzaW9ucyBhcmUgdGhlIGVuZXJneS1pbnRlbnNpdmUgcHJvZHVjdGlvbiBvZiBzdGVlbCBhbmQgY2VtZW50LCBib3RoIG9mIHdoaWNoIGhhdmUgZXhwZXJpZW5jZWQgYSBzdHJvbmcgZ3Jvd3RoIG92ZXIgdGhlIHBhc3QgMzAgeWVhcnMuICIKICAgICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgICAgXSkKICAgICAgICAgICAgICBdKSwKICAgICAgICAgICAgICBfYygiSW50ZXJzZWN0aW9uT2JzZXJ2ZXIiLCB7IGF0dHJzOiB7IHN0ZXA6IDMuNSB9IH0sIFsKICAgICAgICAgICAgICAgIF9jKCJoNiIsIHsgc3RhdGljQ2xhc3M6ICJwIG1vbm8iLCBhdHRyczogeyBpZDogIm90aGVyIiB9IH0sIFsKICAgICAgICAgICAgICAgICAgX3ZtLl92KCJPdGhlciBFbmVyZ3kiKQogICAgICAgICAgICAgICAgXSksCiAgICAgICAgICAgICAgICBfYygicCIsIFsKICAgICAgICAgICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAgICAgICAgICIgVGhlcmUgYXJlIGEgbnVtYmVyIG9mIGVuZXJneS1yZWxhdGVkIHByb2Nlc3NlcyB0aGF0IGFsc28gY2F1c2UgZW1pc3Npb25zIGJ1dCBhcmUgbm90IHBhcnQgb2YgdGhlIGZvdXIgbWFpbiBzZWN0b3JzLiBUaGVzZSBhcmUsIGZvciBleGFtcGxlLCBlbWlzc2lvbnMgZnJvbSBtaW5pbmcgYyBvYWwgYW5kIG5hdHVyYWwgZ2FzIG9yIGZyb20gdGhlIGNvbWJ1c3Rpb24gb2Ygd2FzdGUuIFdlIHN1bW1hcml6ZWQgdGhlbSB1bmRlciB0aGUgY2F0ZWdvcnkgb2Yg4oCcb3RoZXIgZW5lcmd54oCdIGFuZCB3aWxsIG5vdCBkaXNjdXNzIHRoZW0gaW4gZGV0YWlsIGhlcmUuICIKICAgICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgICAgXSkKICAgICAgICAgICAgICBdKSwKICAgICAgICAgICAgICBfYygiSW50ZXJzZWN0aW9uT2JzZXJ2ZXIiLCB7IGF0dHJzOiB7IHN0ZXA6IDQgfSB9LCBbCiAgICAgICAgICAgICAgICBfYygKICAgICAgICAgICAgICAgICAgImgyIiwKICAgICAgICAgICAgICAgICAgeyBzdGF0aWNDbGFzczogInRpdGxlIiwgYXR0cnM6IHsgaWQ6ICJzZWN0b3JfX2Nsb3NldXAiIH0gfSwKICAgICAgICAgICAgICAgICAgW192bS5fdigiV2hhdCBhcmUgdGhlIG1haW4gZW5lcmd5IGNhcnJpZXJzIGZvciBzZWN0b3JzPyIpXQogICAgICAgICAgICAgICAgKSwKICAgICAgICAgICAgICAgIF9jKCJwIiwgWwogICAgICAgICAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICAgICAgICAgIiBFYWNoIHNlY3RvciB1c2VzIGEgZGlmZmVyZW50IG1peCBvZiBlbmVyZ3kgY2FycmllcnMgc3VjaCBhcyBjb2FsLCBnYXMsIG9pbCwgbnVjbGVhciBvciByZW5ld2FibGVzLiBBbGwgc2VjdG9ycyBjdXJyZW50bHkgdXNlIGZvc3NpbCBmdWVscyBsaWtlIGNvYWwsIGdhcyBhbmQgb2lsIHRvIGEgbGFyZ2UgZXh0ZW50LiBUbyBkZWNhcmJvbml6ZSB0aGUgZW5lcmd5IHN5c3RlbSwgdGhleSBoYXZlIHRvIGJlIHJlcGxhY2VkIGJ5IGxvdy1jYXJib24gYWx0ZXJuYXRpdmVzIGxpa2UgbnVjbGVhciBvciByZW5ld2FibGVzLiAiCiAgICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICAgIF0pCiAgICAgICAgICAgICAgXSksCiAgICAgICAgICAgICAgX2MoIkludGVyc2VjdGlvbk9ic2VydmVyIiwgeyBhdHRyczogeyBzdGVwOiA1IH0gfSwgWwogICAgICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgICAgICJoMiIsCiAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICBzdGF0aWNDbGFzczogInRpdGxlIiwKICAgICAgICAgICAgICAgICAgICBhdHRyczogeyBpZDogImNvdW50cnlfX3BlcnNwZWN0aXZlcyIgfQogICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICBbX3ZtLl92KCJDb3VudHJ5IFBlcnNwZWN0aXZlcyIpXQogICAgICAgICAgICAgICAgKSwKICAgICAgICAgICAgICAgIF9jKCJwIiwgWwogICAgICAgICAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICAgICAgICAgIiBEZXBlbmRpbmcgb24gdGhlaXIgZW5lcmd5IHJlc291cmNlcyBhbmQgbmVlZHMsIGRpZmZlcmVudCBjb3VudHJpZXMgZmFjZSBkaWZmZXJlbnQgY2hhbGxlbmdlcyBvZiBkZWNhcmJvbml6YXRpb24uIEluIHRyb3BpY2FsIGFuZCBzdWJ0cm9waWNhbCBjb3VudHJpZXMsIGZvciBleGFtcGxlLCBzcGFjZSBjb29saW5nIHBsYXlzIGEgZ3JlYXRlciByb2xlLCB3aGlsZSBzcGFjZSBoZWF0aW5nIGlzIHJlbGV2YW50IGZvciBoaWdoZXIgbGF0aXR1ZGVzLiBIZW5jZSwgdGhlIGdsb2JhbCBtaXRpZ2F0aW9uIHN0cmF0ZWdpZXMgbmVlZCB0byBiZSBmaW5lIHR1bmVkIG9uIGEgY291bnRyeS1sZXZlbC4gIgogICAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgICBdKQogICAgICAgICAgICAgIF0pLAogICAgICAgICAgICAgIF9jKCJJbnRlcnNlY3Rpb25PYnNlcnZlciIsIHsgYXR0cnM6IHsgc3RlcDogNiB9IH0sIFsKICAgICAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICAgICAiaDIiLAogICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJ0aXRsZSIsCiAgICAgICAgICAgICAgICAgICAgYXR0cnM6IHsgaWQ6ICJkZWNhcmJvbml6ZV9fc2VjdG9ycyIgfQogICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICBbX3ZtLl92KCJIb3cgZG8gd2UgZGVjYXJib25pemUgdGhlIHNlY3RvcnM/IildCiAgICAgICAgICAgICAgICApLAogICAgICAgICAgICAgICAgX2MoInAiLCBbCiAgICAgICAgICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgICAgICAgICAiIEFjcm9zcyBhbGwgc2VjdG9ycywgZm9zc2lsIGZ1ZWxzIG5lZWQgdG8gYmUgcmVwbGFjZWQgYnkgbG93LWNhcmJvbiBlbmVyZ3kuIEluIHRoZSBlbGVjdHJpY2l0eSBzZWN0b3IsIHRoaXMgY2FuIGJlIGRvbmUgYnkgaW5jcmVhc2luZyB0aGUgc2hhcmUgb2YgcmVuZXdhYmxlIGVuZXJneSwgaW4gcGFydGljdWxhciB3aW5kIGFuZCBzb2xhci4gVGhlcmUgYXJlIHR3byBtYWluIHN0cmF0ZWdpZXMgdG8gZGVjYXJib25pemUgdGhlIGluZHVzdHJ5LCB0cmFuc3BvcnQgYW5kIHJlc2lkZW50aWFsIHNlY3RvcnM6IGVsZWN0cmlmaWNhdGlvbiB1c2luZyBsb3ctY2FyYm9uIGVsZWN0cmljaXR5IG9yIGEgc3dpdGNoIHRvIGxvdy1jYXJib24gYWx0ZXJuYXRpdmVzIGxpa2UgYmlvZnVlbHMgb3IgcmVuZXdhYmxlIGh5ZHJvZ2VuLiAiCiAgICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICAgIF0pCiAgICAgICAgICAgICAgXSksCiAgICAgICAgICAgICAgX2MoIkludGVyc2VjdGlvbk9ic2VydmVyIiwgeyBhdHRyczogeyBzdGVwOiA3IH0gfSwgWwogICAgICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgICAgICJoMiIsCiAgICAgICAgICAgICAgICAgIHsgc3RhdGljQ2xhc3M6ICJ0aXRsZSIsIGF0dHJzOiB7IGlkOiAiZWxlY3RyaWNpdHlfX2ZpcnN0IiB9IH0sCiAgICAgICAgICAgICAgICAgIFtfdm0uX3YoIlRoZSBlbGVjdHJpY2l0eSBzZWN0b3IgaGFzIHRvIGdvIGNsZWFuIGZpcnN0LiAiKV0KICAgICAgICAgICAgICAgICksCiAgICAgICAgICAgICAgICBfYygicCIsIFsKICAgICAgICAgICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAgICAgICAgICIgVGhlIGZpcnN0IHN0ZXAgaXMgdGh1cyB0byByZXBsYWNlIGNvYWwgYW5kIGdhcyBpbiB0aGUgZWxlY3RyaWNpdHkgc2VjdG9yIGJ5IHJlbmV3YWJsZSBzb3VyY2VzIGxpa2Ugd2luZCwgc29sYXIgYW5kIGJpb2VuZXJneS4gIgogICAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgICBdKQogICAgICAgICAgICAgIF0pLAogICAgICAgICAgICAgIF9jKCJJbnRlcnNlY3Rpb25PYnNlcnZlciIsIHsgYXR0cnM6IHsgc3RlcDogOCB9IH0sIFsKICAgICAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICAgICAiaDIiLAogICAgICAgICAgICAgICAgICB7IHN0YXRpY0NsYXNzOiAidGl0bGUiLCBhdHRyczogeyBpZDogImluZHVzdHJ5X19zZWNvbmQiIH0gfSwKICAgICAgICAgICAgICAgICAgW192bS5fdigiSW5kdXN0cnkgRWxlY3RyaWZpY2F0aW9uLiIpXQogICAgICAgICAgICAgICAgKSwKICAgICAgICAgICAgICAgIF9jKCJwIiwgWwogICAgICAgICAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICAgICAgICAgIiBJbiB0aGUgaW5kdXN0cnkgc2VjdG9ycywgYSBsb3Qgb2YgYXBwbGljYXRpb25zIHRoYXQgcmVxdWlyZSBoZWF0IGNhbiB1cCB0byBjZXJ0YWluIHRlbXBlcmF0dXJlcyBiZSBlbGVjdHJpZmllZCBieSBoZWF0IHB1bXBzIGFuZCBlbGVjdHJpYyBib2lsZXJzLiBJZiB0aGUgZWxlY3RyaWNpdHkgY29tZXMgZnJvbSByZW5ld2FibGUgc291cmNlcywgdGhpcyBjb3VsZCBzYXZlIHN1YnN0YW50aWFsIGVtaXNzaW9ucy4gSG93ZXZlciwgZnVsbCBlbGVjdHJpZmljYXRpb24gd2lsbCBub3QgYmUgcG9zc2libGUgaW4gc2VjdG9ycyBsaWtlIHRoZSBjZW1lbnQgb3IgdGhlIGNoZW1pY2FsIGluZHVzdHJ5LiAiCiAgICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICAgIF0pCiAgICAgICAgICAgICAgXSksCiAgICAgICAgICAgICAgX2MoIkludGVyc2VjdGlvbk9ic2VydmVyIiwgeyBhdHRyczogeyBzdGVwOiA5IH0gfSwgWwogICAgICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgICAgICJoMiIsCiAgICAgICAgICAgICAgICAgIHsgc3RhdGljQ2xhc3M6ICJ0aXRsZSIsIGF0dHJzOiB7IGlkOiAidHJhbnNwb3J0X190aGlyZCIgfSB9LAogICAgICAgICAgICAgICAgICBbX3ZtLl92KCJFbGVjdHJpZnlpbmcgVHJhbnNwb3J0cy4iKV0KICAgICAgICAgICAgICAgICksCiAgICAgICAgICAgICAgICBfYygicCIsIFsKICAgICAgICAgICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAgICAgICAgICIgVHJhbnNwb3J0IGNhbiBiZSBlbGVjdHJpZmllZCwgZm9yIGV4YW1wbGUsIGJ5IHN3aXRjaGluZyB0byBlbGVjdHJpYyBjYXJzIGFuZCB0cnVja3Mgb3IgYnkgcmVwbGFjaW5nIHNoaXBwaW5nIG9yIGF2aWF0aW9uIGJ5IHJhaWwgdHJhbnNwb3J0LiBUaGUgc2hpcHBpbmcgYW5kIGF2aWF0aW9uIHNlY3RvcnMgYm90aCBhcmUgZGlmZmljdWx0IHRvIGVsZWN0cmlmeSBzdWNoIHRoYXQgdGhlcmUgYXJlIGFsc28gbGltaXRzIHRvIGZ1bGwgZWxlY3RyaWZpY2F0aW9uLiAiCiAgICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICAgIF0pCiAgICAgICAgICAgICAgXSksCiAgICAgICAgICAgICAgX2MoIkludGVyc2VjdGlvbk9ic2VydmVyIiwgeyBhdHRyczogeyBzdGVwOiAxMCB9IH0sIFsKICAgICAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICAgICAiaDIiLAogICAgICAgICAgICAgICAgICB7IHN0YXRpY0NsYXNzOiAidGl0bGUiLCBhdHRyczogeyBpZDogImJ1aWxkaW5nX19mb3VydGgiIH0gfSwKICAgICAgICAgICAgICAgICAgW192bS5fdigiRWxlY3RyaWZ5aW5nIEJ1aWxkaW5ncy4iKV0KICAgICAgICAgICAgICAgICksCiAgICAgICAgICAgICAgICBfYygicCIsIFsKICAgICAgICAgICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAgICAgICAgICIgRmluYWxseSwgdGhlcmUgaXMgYWxzbyBwb3RlbnRpYWwgdG8gZWxlY3RyaWZ5IHRoZSByZXNpZGVudGlhbCBzZWN0b3IsIGZvciBleGFtcGxlLCBieSBzd2l0Y2hpbmcgZnJvbSBnYXMgaGVhdGluZyB0byBlbGVjdHJpYyBoZWF0IHB1bXBzIGZvciBzcGFjZSBoZWF0aW5nLiAiCiAgICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICAgIF0pCiAgICAgICAgICAgICAgXSksCiAgICAgICAgICAgICAgX2MoIkludGVyc2VjdGlvbk9ic2VydmVyIiwgeyBhdHRyczogeyBzdGVwOiAxMSB9IH0sIFsKICAgICAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICAgICAiaDIiLAogICAgICAgICAgICAgICAgICB7IHN0YXRpY0NsYXNzOiAidGl0bGUiLCBhdHRyczogeyBpZDogImVsZWN0cmlmaWNhdGlvbiIgfSB9LAogICAgICAgICAgICAgICAgICBbX3ZtLl92KCJEZWNhcmJvbml6YXRpb24gYnkgZWxlY3RyaWZpY2F0aW9uISIpXQogICAgICAgICAgICAgICAgKSwKICAgICAgICAgICAgICAgIF9jKCJwIiwgWwogICAgICAgICAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICAgICAgICAgIiBTd2l0Y2hpbmcgZnJvbSBmb3NzaWwgdG8gcmVuZXdhYmxlIGVsZWN0cmljaXR5IGFuZCBlbGVjdHJpZnlpbmcgdGhlIGluZHVzdHJ5LCB0cmFuc3BvcnQgYW5kIHJlc2lkZW50aWFsIHNlY3RvciBpcyBhIHByb21pc2luZyBzdHJhdGVneSBmb3IgZGVjYXJib25pemF0aW9uLiBIb3dldmVyLCB0byByZWFjaCBuZXQtemVybyBieSBtaWRjZW50dXJ5LCByZW5ld2FibGUgZWxlY3RyaWNpdHkgYW5kIGVsZWN0cmlmaWNhdGlvbiBoYXZlIHRvIGJlIHNjYWxlZCB1cCB2ZXJ5IHJhcGlkbHkgYW5kIHNpbXVsdGFuZW91c2x5LiBUbyBleHBsb3JlIGhvdyB0aGlzIHRyYW5zaXRpb24gb2YgdGhlIGVuZXJneSBzeXN0ZW0gY291bGQgbG9vayBsaWtlLCB3ZSB1c2UgbW9kZWxzIHRvIGdlbmVyYXRlIGRpZmZlcmVudCBzY2VuYXJpb3Mgb2YgZnV0dXJlIGRlY2FyYm9uaXphdGlvbiBwYXRod2F5cy4gIgogICAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgICBdKQogICAgICAgICAgICAgIF0pLAogICAgICAgICAgICAgIF9jKCJJbnRlcnNlY3Rpb25PYnNlcnZlciIsIHsgYXR0cnM6IHsgc3RlcDogMTIgfSB9LCBbCiAgICAgICAgICAgICAgICBfYygKICAgICAgICAgICAgICAgICAgImgyIiwKICAgICAgICAgICAgICAgICAgeyBzdGF0aWNDbGFzczogInRpdGxlIiwgYXR0cnM6IHsgaWQ6ICJlbGVjdHJpZmljYXRpb24iIH0gfSwKICAgICAgICAgICAgICAgICAgW192bS5fdigiQ2xlYW4gZW5lcmd5IHdpbGwgZnJlZSB1cyBmcm9tIHBvbGx1dGlvbi4iKV0KICAgICAgICAgICAgICAgICksCiAgICAgICAgICAgICAgICBfYygicCIsIFsKICAgICAgICAgICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAgICAgICAgICIgQnkgdXNpbmcgY2xlYW4gZWxlY3RyaWNpdHkgd2Ugd291bGQgYmUgYWJsZSB0byBwaGFzZSBvdXQgYWxsIG90aGVyIGVuZXJneSBjYXJyaWVycyBhbmQgdGhlaXIgZW1pc3Npb25zLiAiCiAgICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICAgIF0pCiAgICAgICAgICAgICAgXSksCiAgICAgICAgICAgICAgX2MoIkludGVyc2VjdGlvbk9ic2VydmVyIiwgeyBhdHRyczogeyBzdGVwOiAxMyB9IH0sIFsKICAgICAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICAgICAiaDIiLAogICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJ0aXRsZSIsCiAgICAgICAgICAgICAgICAgICAgYXR0cnM6IHsgaWQ6ICJlbGVjdHJpZmljYXRpb25fX3NjZW5hcmlvcyIgfQogICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICBbX3ZtLl92KCJIb3cgZmFzdCBjYW4gZWxlY3RyaWZpY2F0aW9uIGN1dCBlbWlzc2lvbnM/IildCiAgICAgICAgICAgICAgICApLAogICAgICAgICAgICAgICAgX2MoInAiLCBbCiAgICAgICAgICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgICAgICAgICAiIFdlIGNhbm5vdCBwcmVkaWN0IHRoZSBmdXR1cmUsIGJ1dCB3ZSBjYW4gY3JlYXRlIGRpZmZlcmVudCBwbGF1c2libGUgc2NlbmFyaW9zIG9mIGhvdyBhIGZ1dHVyZSBkZWNhcmJvbml6YXRpb24gcGF0aHdheSBjb3VsZCBsb29rIGxpa2UuIEFjcm9zcyBvdXIgc2NlbmFyaW8sIHdlIHZhcnkga2V5IHVuY2VydGFpbiBwYXJhbWV0ZXJzIGFuZCBhbmFseXplIGhvdyBuZXQtemVybyBlbWlzc2lvbnMgY2FuIGJlIHJlYWNoZWQuIEZvciBleGFtcGxlLCB3ZSBsb29rIGF0IGRpZmZlcmVudCBlbGVjdHJpZmljYXRpb24gc2hhcmVzIHBlciBzZWN0b3IgYW5kIHRoaW5rIGFib3V0IGhvdyB0aGUgcmVzaWR1YWwgZW1pc3Npb25zIGNhbiBiZSBlcmFzZWQgYnkgbG93LWNhcmJvbiBhbHRlcm5hdGl2ZXMuICIKICAgICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgICAgXSkKICAgICAgICAgICAgICBdKSwKICAgICAgICAgICAgICBfYygiSW50ZXJzZWN0aW9uT2JzZXJ2ZXIiLCB7IGF0dHJzOiB7IHN0ZXA6IDE0IH0gfSwgWwogICAgICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgICAgICJoMiIsCiAgICAgICAgICAgICAgICAgIHsgc3RhdGljQ2xhc3M6ICJ0aXRsZSIsIGF0dHJzOiB7IGlkOiAiZnV0dXJlX19lbWlzc2lvbnMiIH0gfSwKICAgICAgICAgICAgICAgICAgWwogICAgICAgICAgICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgICAgICAgICAgICJIb3cgd2lsbCBlbWlzc2lvbnMgbG9vayBsaWtlIHdpdGhvdXQgYW55IHN0cmF0ZWd5IGltcGxlbWVudGVkPyIKICAgICAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgICAgIF0KICAgICAgICAgICAgICAgICksCiAgICAgICAgICAgICAgICBfYygicCIsIFtfdm0uX3YoIiB0ZXN0by4gIildKQogICAgICAgICAgICAgIF0pLAogICAgICAgICAgICAgIF9jKCJJbnRlcnNlY3Rpb25PYnNlcnZlciIsIHsgYXR0cnM6IHsgc3RlcDogMTUgfSB9LCBbCiAgICAgICAgICAgICAgICBfYygKICAgICAgICAgICAgICAgICAgImgyIiwKICAgICAgICAgICAgICAgICAgeyBzdGF0aWNDbGFzczogInRpdGxlIiwgYXR0cnM6IHsgaWQ6ICJnbG9iYWxfX3N0cmF0ZWdpZXMiIH0gfSwKICAgICAgICAgICAgICAgICAgWwogICAgICAgICAgICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgICAgICAgICAgICJJbXBsZW1lbnRpbmcgYSBnbG9iYWwgc3RyYXRlZ3kgZm9yIGEgc21vb3RoIHRyYW5zaXRpb24uIgogICAgICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICAgICAgXQogICAgICAgICAgICAgICAgKSwKICAgICAgICAgICAgICAgIF9jKCJwIiwgW192bS5fdigiIHRlc3RvLiAiKV0pCiAgICAgICAgICAgICAgXSksCiAgICAgICAgICAgICAgX2MoIkludGVyc2VjdGlvbk9ic2VydmVyIiwgeyBhdHRyczogeyBzdGVwOiAxNiB9IH0sIFsKICAgICAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICAgICAiaDIiLAogICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJ0aXRsZSIsCiAgICAgICAgICAgICAgICAgICAgYXR0cnM6IHsgaWQ6ICJncmFkdWFsX2RlY2FyYm9uaXphdGlvbiIgfQogICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICBbX3ZtLl92KCJEZWNhcmJvbmlzYXRpb24gc2hvdWxkIGhhcHBlbiBncmFkdWFsbHkgaW4gdGltZS4iKV0KICAgICAgICAgICAgICAgICksCiAgICAgICAgICAgICAgICBfYygicCIsIFtfdm0uX3YoIiB0ZXN0by4gIildKQogICAgICAgICAgICAgIF0pLAogICAgICAgICAgICAgIF9jKCJJbnRlcnNlY3Rpb25PYnNlcnZlciIsIHsgYXR0cnM6IHsgc3RlcDogMTcgfSB9LCBbCiAgICAgICAgICAgICAgICBfYygKICAgICAgICAgICAgICAgICAgImgyIiwKICAgICAgICAgICAgICAgICAgeyBzdGF0aWNDbGFzczogInRpdGxlIiwgYXR0cnM6IHsgaWQ6ICJleHBsb3JlX19zY2VuYXJpb3MiIH0gfSwKICAgICAgICAgICAgICAgICAgWwogICAgICAgICAgICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgICAgICAgICAgICJUaGUgZmFzdGVyIHRoZSBzdHJhdGVneSBzdGVwcyBhcmUgaW1wbGVtZW50ZWQsIHRoZSBjbG9zZXIgd2XigJlsbCBnZXQgdG8gTmV0LVplcm8uIgogICAgICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICAgICAgXQogICAgICAgICAgICAgICAgKSwKICAgICAgICAgICAgICAgIF9jKCJwIiwgW192bS5fdigiIHRlc3RvLiAiKV0pCiAgICAgICAgICAgICAgXSkKICAgICAgICAgICAgXSwKICAgICAgICAgICAgMQogICAgICAgICAgKQogICAgICAgIF0KICAgICAgKQogICAgXSwKICAgIDEKICApCn0KdmFyIHN0YXRpY1JlbmRlckZucyA9IFtdCnJlbmRlci5fd2l0aFN0cmlwcGVkID0gdHJ1ZQoKZXhwb3J0IHsgcmVuZGVyLCBzdGF0aWNSZW5kZXJGbnMgfQ=="}]}