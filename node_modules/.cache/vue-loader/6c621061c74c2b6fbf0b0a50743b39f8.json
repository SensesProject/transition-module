{"remainingRequest":"/Users/francescamorini/projects/transition-v2/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/francescamorini/projects/transition-v2/src/components/EmissionsChart.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/francescamorini/projects/transition-v2/src/components/EmissionsChart.vue","mtime":1572431989864},{"path":"/Users/francescamorini/projects/transition-v2/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/francescamorini/projects/transition-v2/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/francescamorini/projects/transition-v2/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/francescamorini/projects/transition-v2/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:Ly8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KCi8vIExpYnJhcmllcwppbXBvcnQgKiBhcyBkMyBmcm9tICdkMycKaW1wb3J0IHsgbWFwU3RhdGUgfSBmcm9tICd2dWV4JwoKLy8gY29tcG9uZW50cwoKLy8gRGF0YQppbXBvcnQgZW1pc3Npb25zRGF0YSBmcm9tICcuLi9hc3NldHMvZGF0YS9lbWlzc2lvbnMuanNvbicKaW1wb3J0IHN1YkVtaXNzaW9uc0RhdGEgZnJvbSAnLi4vYXNzZXRzL2RhdGEvZW1pc3Npb25zLXN0YWNrZWQuanNvbicKaW1wb3J0IEFwcGxpY2F0aW9uc1NoYXJlIGZyb20gJy4uL2Fzc2V0cy9kYXRhL3N1YnNlY3RvcnMtYXBwbGljYXRpb25zLXNoYXJlLmpzb24nCgpleHBvcnQgZGVmYXVsdCB7CiAgbmFtZTogJ0VtaXNzaW9uc0NoYXJ0JywKICBwcm9wczogewogICAgd2lkdGg6IHsKICAgICAgdHlwZTogTnVtYmVyLAogICAgICByZXF1aXJlZDogdHJ1ZQogICAgfSwKICAgIGhlaWdodDogewogICAgICB0eXBlOiBOdW1iZXIsCiAgICAgIHJlcXVpcmVkOiB0cnVlCiAgICB9CiAgfSwKICBkYXRhICgpIHsKICAgIHJldHVybiB7CiAgICAgIGdyYXBoU2l6ZTogewogICAgICAgIHdpZHRoOiB0aGlzLndpZHRoLAogICAgICAgIGhlaWdodDogdGhpcy5oZWlnaHQKICAgICAgfSwKICAgICAgZW1pc3Npb25zRGF0YSwKICAgICAgc3ViRW1pc3Npb25zRGF0YSwKICAgICAgQXBwbGljYXRpb25zU2hhcmUKICAgIH0KICB9LAogIG1ldGhvZHM6IHsKICB9LAogIGNvbXB1dGVkOiB7CiAgICAuLi5tYXBTdGF0ZSh7CiAgICAgIHN0ZXA6IHN0YXRlID0+IHN0YXRlLnNjcm9sbHl0ZWxsaW5nID8gc3RhdGUuc2Nyb2xseXRlbGxpbmcuc3RlcCA6IG51bGwKICAgIH0pLAogICAgZ2V0U2NhbGUgKCkgewogICAgICBjb25zdCBlbWlzc2lvbnMgPSB0aGlzLmVtaXNzaW9uc0RhdGEKICAgICAgY29uc3QgcGFyc2VEYXRlID0gZDMudGltZVBhcnNlKCclWScpCiAgICAgIGxldCBtYXhEYXRlID0gcGFyc2VEYXRlKDIwODApCiAgICAgIGlmICh0aGlzLnN0ZXAgPj0gMikgeyBtYXhEYXRlID0gcGFyc2VEYXRlKDIwMTUpIH0KCiAgICAgIGVtaXNzaW9ucy5mb3JFYWNoKGZ1bmN0aW9uIChkKSB7CiAgICAgICAgZC5kYXRlID0gcGFyc2VEYXRlKGQuWWVhcikKICAgICAgfSkKCiAgICAgIHZhciB4ID0gZDMKICAgICAgICAuc2NhbGVUaW1lKCkKICAgICAgICAuZG9tYWluKFtkMy5taW4oZW1pc3Npb25zLCBkID0+IGQuZGF0ZSksIG1heERhdGVdKQogICAgICAgIC5yYW5nZVJvdW5kKFswLCB0aGlzLndpZHRoIC0gODBdKQoKICAgICAgdmFyIHkgPSBkMwogICAgICAgIC5zY2FsZUxpbmVhcigpCiAgICAgICAgLmRvbWFpbihbMCwgNDAwMDAwMDBdKQogICAgICAgIC5yYW5nZVJvdW5kKFt0aGlzLmhlaWdodCAtIDMwMCwgMF0pCgogICAgICByZXR1cm4gewogICAgICAgIHBhcnNlRGF0ZSwKICAgICAgICB4LAogICAgICAgIHkKICAgICAgfQogICAgfSwKICAgIGNhbGNMaW5lICgpIHsKICAgICAgY29uc3Qgc2NhbGUgPSB0aGlzLmdldFNjYWxlCiAgICAgIGNvbnN0IHBhdGggPSBkMwogICAgICAgIC5saW5lKCkKICAgICAgICAueChkID0+IHsgcmV0dXJuIHNjYWxlLngoZC5kYXRlKSB9KQogICAgICAgIC55KGQgPT4geyByZXR1cm4gc2NhbGUueShkLkVtaXNzaW9ucykgfSkKICAgICAgICAuY3VydmUoZDMuY3VydmVMaW5lYXIpCiAgICAgIHJldHVybiB7CiAgICAgICAgZDogcGF0aChlbWlzc2lvbnNEYXRhKQogICAgICB9CiAgICB9LAogICAgc3Vic2VjdG9yc0xhYmVscyAoKSB7CiAgICAgIGNvbnN0IHN1YnNlY3RvcnMgPSB0aGlzLkFwcGxpY2F0aW9uc1NoYXJlCiAgICAgIGxldCBzdWJzZWN0b3JzTGFiZWxzID0gW10KCiAgICAgIHN1YnNlY3RvcnMucHVzaChzdWJzZWN0b3JzWzFdKQoKICAgICAgcmV0dXJuIHN1YnNlY3RvcnNMYWJlbHMKICAgIH0sCiAgICBzZWN0b3JDaHVua3MgKCkgewogICAgICBsZXQgc2VjdG9ycyA9IFsnRWxlY3RyaWNpdHknLCAnT3RoZXJFbmVyZ3knLCAnSW5kdXN0cnknLCAnVHJhbnNwb3J0cycsICdCdWlsZGluZyddCiAgICAgIGlmICh0aGlzLnN0ZXAgPT09IDMuMSkgeyBzZWN0b3JzID0gWydQdWJsaWMnLCAnQXV0b3Byb2R1Y2VkJywgJ090aGVyRW4nLCAnQ29tYnVzdGlvbicsICdQcm9kdWN0aW9uJywgJ1NvbHZlbnRzJywgJ090aGVyUHJvYycsICdJbmRXYXN0ZScsICdBdmlhdGlvbicsICdSb2FkJywgJ090aGVyJywgJ1NoaXBwaW5nJywgJ0NvbW1SZXMnLCAnQWdyaWN1bHR1cmUnXSB9CgogICAgICBsZXQgZGF0YSA9IHRoaXMuc3ViRW1pc3Npb25zRGF0YQogICAgICBpZiAodGhpcy5zdGVwID09PSAzLjEpIHsgZGF0YSA9IHRoaXMuQXBwbGljYXRpb25zU2hhcmUgfQoKICAgICAgY29uc3QgY2h1bmtDb2xvcnMgPSBbJyMzMzEyMWMnLCAnIzYxMTczMScsICcjOTMxNTQ3JywgJyNkZDVmODQnLCAnI2VkOTZhYiddCiAgICAgIGNvbnN0IHNjYWxlID0gdGhpcy5nZXRTY2FsZQogICAgICBjb25zdCBwYXJzZURhdGUgPSBzY2FsZS5wYXJzZURhdGUKCiAgICAgIGRhdGEuZm9yRWFjaCgoZCkgPT4geyBkLmRhdGUgPSBwYXJzZURhdGUoZC5ZZWFyKSB9KQoKICAgICAgY29uc3QgYXJlYXNYID0gZDMKICAgICAgICAuYXJlYSgpCiAgICAgICAgLngoZCA9PiB7IHJldHVybiBzY2FsZS54KGQuZGF0ZSkgfSkKICAgICAgICAuY3VydmUoZDMuY3VydmVMaW5lYXIpCgogICAgICBjb25zdCBzZWN0b3JzQXJlYXMgPSBzZWN0b3JzLm1hcChmdW5jdGlvbiAoaXRlbSwgaSkgewogICAgICAgIGFyZWFzWAogICAgICAgICAgLnkwKGQgPT4gewogICAgICAgICAgICBsZXQgc3VtID0gMAogICAgICAgICAgICBmb3IgKGxldCBuID0gMDsgbiA8IGk7IG4rKykgewogICAgICAgICAgICAgIHN1bSA9IHN1bSArIGRbc2VjdG9yc1tuXV0KICAgICAgICAgICAgfQogICAgICAgICAgICByZXR1cm4gc2NhbGUueShzdW0pCiAgICAgICAgICB9KQogICAgICAgICAgLnkxKGQgPT4gewogICAgICAgICAgICBsZXQgc3VtID0gMAogICAgICAgICAgICBmb3IgKGxldCBuID0gMDsgbiA8PSBpOyBuKyspIHsKICAgICAgICAgICAgICBzdW0gPSBzdW0gKyBkW3NlY3RvcnNbbl1dCiAgICAgICAgICAgIH0KICAgICAgICAgICAgcmV0dXJuIHNjYWxlLnkoc3VtKQogICAgICAgICAgfSkKICAgICAgICByZXR1cm4gewogICAgICAgICAgZDogYXJlYXNYKGRhdGEpLAogICAgICAgICAgY29sb3I6IGNodW5rQ29sb3JzW2ldLAogICAgICAgICAgaWQ6IHNlY3RvcnNbaV0KICAgICAgICB9CiAgICAgIH0pCiAgICAgIGNvbnNvbGUubG9nKGRhdGEpCiAgICAgIHJldHVybiBzZWN0b3JzQXJlYXMKICAgIH0KICB9LAogIGRpcmVjdGl2ZXM6IHsKICAgIGF4aXMgKGVsLCBiaW5kaW5nKSB7CiAgICAgIGNvbnN0IGF4aXMgPSBiaW5kaW5nLmFyZwogICAgICBjb25zdCBheGlzTWV0aG9kID0geyB4OiAnYXhpc0JvdHRvbScsIHk6ICdheGlzTGVmdCcgfVtheGlzXQogICAgICBjb25zdCBtZXRob2RBcmcgPSBiaW5kaW5nLnZhbHVlW2F4aXNdCiAgICAgIGQzLnNlbGVjdChlbCkKICAgICAgICAuY2FsbChkM1theGlzTWV0aG9kXShtZXRob2RBcmcpKQogICAgfQogIH0KfQo="},{"version":3,"sources":["EmissionsChart.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;AAyfile":"EmissionsChart.vue","sourceRoot":"src/components","sourcesContent":["<template>\n  <div class=\"visualization\" id=\"emissions__chart\">\n    <svg class=\"emissions\" width=\"100%\" height=\"80%\">\n      <g :transform=\"'translate('+ 70 + ',' + 5 + ')'\">\n        <g class=\"axis\" v-axis:x=\"getScale\" :transfrom=\"'translate('+ 0 + ',' + this.height + ')'\"></g>\n        <g class=\"axis\" v-axis:y=\"getScale\"></g>\n        <g id=\"first_step\" v-show=\"step <= 2\">\n          <path id=\"emissions\" v-bind:data=\"calcLine\" :d='calcLine.d' />\n        </g>\n        <g id=\"second_step\" v-show=\"step >=3\">\n          <path\n            v-for=\"(chunk, i) in sectorChunks\"\n            v-bind:key='i'\n            :d='chunk.d'\n            :fill='chunk.color'\n            :id='chunk.id'\n            class=\"emission__chunks\"\n          />\n       </g>\n    </g>\n    </svg>\n  </div>\n</template>\n\n<script>\n// Libraries\nimport * as d3 from 'd3'\nimport { mapState } from 'vuex'\n\n// components\n\n// Data\nimport emissionsData from '../assets/data/emissions.json'\nimport subEmissionsData from '../assets/data/emissions-stacked.json'\nimport ApplicationsShare from '../assets/data/subsectors-applications-share.json'\n\nexport default {\n  name: 'EmissionsChart',\n  props: {\n    width: {\n      type: Number,\n      required: true\n    },\n    height: {\n      type: Number,\n      required: true\n    }\n  },\n  data () {\n    return {\n      graphSize: {\n        width: this.width,\n        height: this.height\n      },\n      emissionsData,\n      subEmissionsData,\n      ApplicationsShare\n    }\n  },\n  methods: {\n  },\n  computed: {\n    ...mapState({\n      step: state => state.scrollytelling ? state.scrollytelling.step : null\n    }),\n    getScale () {\n      const emissions = this.emissionsData\n      const parseDate = d3.timeParse('%Y')\n      let maxDate = parseDate(2080)\n      if (this.step >= 2) { maxDate = parseDate(2015) }\n\n      emissions.forEach(function (d) {\n        d.date = parseDate(d.Year)\n      })\n\n      var x = d3\n        .scaleTime()\n        .domain([d3.min(emissions, d => d.date), maxDate])\n        .rangeRound([0, this.width - 80])\n\n      var y = d3\n        .scaleLinear()\n        .domain([0, 40000000])\n        .rangeRound([this.height - 300, 0])\n\n      return {\n        parseDate,\n        x,\n        y\n      }\n    },\n    calcLine () {\n      const scale = this.getScale\n      const path = d3\n        .line()\n        .x(d => { return scale.x(d.date) })\n        .y(d => { return scale.y(d.Emissions) })\n        .curve(d3.curveLinear)\n      return {\n        d: path(emissionsData)\n      }\n    },\n    subsectorsLabels () {\n      const subsectors = this.ApplicationsShare\n      let subsectorsLabels = []\n\n      subsectors.push(subsectors[1])\n\n      return subsectorsLabels\n    },\n    sectorChunks () {\n      let sectors = ['Electricity', 'OtherEnergy', 'Industry', 'Transports', 'Building']\n      if (this.step === 3.1) { sectors = ['Public', 'Autoproduced', 'OtherEn', 'Combustion', 'Production', 'Solvents', 'OtherProc', 'IndWaste', 'Aviation', 'Road', 'Other', 'Shipping', 'CommRes', 'Agriculture'] }\n\n      let data = this.subEmissionsData\n      if (this.step === 3.1) { data = this.ApplicationsShare }\n\n      const chunkColors = ['#33121c', '#611731', '#931547', '#dd5f84', '#ed96ab']\n      const scale = this.getScale\n      const parseDate = scale.parseDate\n\n      data.forEach((d) => { d.date = parseDate(d.Year) })\n\n      const areasX = d3\n        .area()\n        .x(d => { return scale.x(d.date) })\n        .curve(d3.curveLinear)\n\n      const sectorsAreas = sectors.map(function (item, i) {\n        areasX\n          .y0(d => {\n            let sum = 0\n            for (let n = 0; n < i; n++) {\n              sum = sum + d[sectors[n]]\n            }\n            return scale.y(sum)\n          })\n          .y1(d => {\n            let sum = 0\n            for (let n = 0; n <= i; n++) {\n              sum = sum + d[sectors[n]]\n            }\n            return scale.y(sum)\n          })\n        return {\n          d: areasX(data),\n          color: chunkColors[i],\n          id: sectors[i]\n        }\n      })\n      console.log(data)\n      return sectorsAreas\n    }\n  },\n  directives: {\n    axis (el, binding) {\n      const axis = binding.arg\n      const axisMethod = { x: 'axisBottom', y: 'axisLeft' }[axis]\n      const methodArg = binding.value[axis]\n      d3.select(el)\n        .call(d3[axisMethod](methodArg))\n    }\n  }\n}\n</script>\n\n<style scoped lang=\"scss\">\n@import \"library/src/style/variables.scss\";\n.visualization {\n  width: inherit;\n  height: inherit;\n}\n\nsvg {\n  position: absolute;\n  top: 10vh;\n}\n\n#emissions {\n  stroke: $color-red;\n  fill: none;\n}\n\n.emission__chunks {\n  stroke: $color-red;\n}\n</style>\n"]}]}