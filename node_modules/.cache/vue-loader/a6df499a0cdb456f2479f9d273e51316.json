{"remainingRequest":"/Users/francescamorini/projects/senses/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/francescamorini/projects/senses/src/components/EnergyCarriers.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/francescamorini/projects/senses/src/components/EnergyCarriers.vue","mtime":1575902696634},{"path":"/Users/francescamorini/projects/senses/node_modules/cache-loader/dist/cjs.js","mtime":1575047512487},{"path":"/Users/francescamorini/projects/senses/node_modules/babel-loader/lib/index.js","mtime":1575047512399},{"path":"/Users/francescamorini/projects/senses/node_modules/cache-loader/dist/cjs.js","mtime":1575047512487},{"path":"/Users/francescamorini/projects/senses/node_modules/vue-loader/lib/index.js","mtime":1575047516506}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["EnergyCarriers.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAwfile":"EnergyCarriers.vue","sourceRoot":"src/components","sourcesContent":["<template>\n  <div class=\"visualization\" id=\"carriers\" width=\"90%\">\n      <div v-if=\"step === 5\" class=\"regionselect\">\n     <SensesSelect\n       class=\"selector\"\n       :options=\"regionsArray\"\n       v-model=\"selected\"\n     />\n     <p id=\"select-label\">\n       Use the selector above to see energy carriers distribution across regions.\n     </p>\n     <p id=\"emissions-label\">\n       <span class=\"highlight\">\n         {{ selected }}\n       </span>\n       is producing the\n       <span class=\"dotted\">{{ findPerc.perc }}%</span>\n       of the total global energy.\n      <br/>\n       Equals to\n       <span class=\"dotted\">\n         {{ findPerc.absValue }} EJ/yr\n       </span>.\n     </p>\n    </div>\n    <svg width=\"100%\" height=\"100%\" :transform=\"'translate('+ width / 12 + ',15)'\">\n      <Arrows\n      :height=\"height\"\n      :step=\"step\"\n      :transform=\"'translate('+ margin.left + ',40)'\"\n      v-if=\"step >= 8\"\n      />\n      <g :transform=\"'translate('+ (margin.left + 65) + ',0)'\">\n        <text\n        v-for=\"(energy, i) in createRect[0].rects\"\n        class=\"fuel-labels\"\n        v-bind:key=\"energy.labels + i\"\n        :id='energy.labels'\n        :x=\"energy.posX\"\n        :y= 'height - (height / 4)'\n        v-on:click=\"isActive = energy.labels\"\n        >\n        {{ energy.labels }}\n        <tspan\n        :data=\"sumCarriers\"\n        :id='energy.labels'\n        :x=\"energy.posX\"\n        :y= 'height - (height / 4) + 20'\n        class=\"energy_sum\"\n        :class='isActive === energy.labels ? \"is-active\" : \"is-inactive\"'\n        >\n        {{ sumCarriers[i] }} EJ/yr\n        </tspan>\n      </text>\n        <g\n          v-for=\"(sector,i) in createRect\"\n          v-bind:key=\"i\"\n          :id=\"sector.sector\"\n          :transform=\"'translate(5,' + sector.sectorHeight +')'\"\n        >\n          <rect\n            class=\"fuel_rect\"\n            :class='isActive === rect.labels ?\n            [sector.sector, rect.labels, \"is-fill\"] :\n            [sector.sector, rect.labels, \"is-empty\"]'\n            v-for=\"(rect, i) in sector.rects\"\n            v-bind:key=\"i\"\n            :id=\"rect.labels\"\n            :x=\"rect.dist\"\n            :width=\"rect.rectWidth\"\n            :height=\"sector.rectHeight\"\n          />\n        </g>\n        <text\n        class=\"sector-labels\"\n        v-for=\"(sector) in createRect\"\n        v-bind:key=\"sector.sector\"\n        :x='(width + margin.left) / 2'\n        :y='sector.sectorHeight + 30'\n        >\n        {{sector.sector}}\n      </text>\n      </g>\n    </svg>\n  </div>\n</template>\n\n<script>\nimport * as d3 from 'd3'\nimport _ from 'lodash'\n\n// data\nimport CarriersReport from '../assets/data/world_regional_report.json'\nimport ElectrificationSteps from '../assets/data/electrification-steps.json'\n\n// Components\nimport SensesSelect from 'library/src/components/SensesSelect.vue'\nimport Arrows from './subcomponents/Arrows.vue'\n\nexport default {\n  name: 'EnergyCarriers',\n  props: {\n    width: {\n      type: Number,\n      required: true\n    },\n    height: {\n      type: Number,\n      required: true\n    },\n    step: {\n      type: Number,\n      default: 0\n    }\n  },\n  components: {\n    SensesSelect,\n    Arrows\n  },\n  data () {\n    return {\n      CarriersReport,\n      ElectrificationSteps,\n      selected: 'World',\n      isActive: '',\n      margin: {\n        left: 5,\n        top: 30,\n        bottom: 30,\n        right: 40\n      }\n    }\n  },\n  computed: {\n    innerWidth () {\n      return this.width - this.margin.left - this.margin.right\n    },\n    innerHeight () {\n      return this.height - this.margin.top - this.margin.bottom\n    },\n    // data new structure and selection\n    nestVariables () {\n      let carriers = this.CarriersReport\n      if (this.step >= 7) { carriers = this.ElectrificationSteps }\n      return {\n        carriers,\n        groupsbyregion: _.groupBy(carriers, 'region'),\n        allFuels: _.uniq(_.map(carriers, 'fuel')),\n        sectors: ['industry', 'transport', 'residential', 'electricity']\n      }\n    },\n    dataNest () {\n      const {\n        carriers,\n        groupsbyregion,\n        allFuels,\n        sectors\n      } = this.nestVariables\n\n      _.forEach(groupsbyregion, (arr, key) => {\n        const obj = {}\n        _.forEach(sectors, sector => {\n          const fuelObj = {}\n          _.forEach(allFuels, (fuel, i) => {\n            const data = _.map(arr, sector)\n            fuelObj[fuel] = data[i]\n          })\n          obj[sector] = fuelObj\n        })\n        groupsbyregion[key] = obj\n      })\n      return groupsbyregion\n    },\n    regionsArray () {\n      const groupsbyregion = this.nestVariables.groupsbyregion\n      const allRegions = []\n\n      _.forEach(groupsbyregion, (arr, key) => {\n        allRegions.push(key)\n        return allRegions\n      })\n      return allRegions\n    },\n    stepSelection () {\n      let selected = this.selected\n      if (this.step !== 5) { selected = 'World' }\n      if (this.step === 7) { selected = 'World-step1' }\n      if (this.step === 8) { selected = 'World-step2' }\n      if (this.step === 9) { selected = 'World-step3' }\n      if (this.step >= 10) { selected = 'World-step4' }\n      return selected\n    },\n    dataFilter () {\n      const groupsbyregion = this.dataNest\n      const selected = this.stepSelection\n      return groupsbyregion[selected]\n    },\n    // Scales\n    scaleY () {\n      const selectedRegion = this.dataFilter\n      const { height } = this\n      let maxEnergy = []\n      const totalEnergy = _.map(selectedRegion, (value, fuel) => {\n        let fuels = d3.values(selectedRegion[fuel])\n        let maxValue = d3.sum(fuels)\n        maxEnergy.push(maxValue)\n      })\n\n      const y = d3.scaleLinear()\n        .domain([0, maxEnergy.reduce((sum, val) => sum + val, 0)])\n        .range([0, height / 2])\n\n      let maxRegValue = maxEnergy.reduce((sum, val) => sum + val, 0)\n      return {\n        y,\n        maxRegValue\n      }\n    },\n    scaleX () {\n      const selectedRegion = this.dataFilter\n      const { width, height } = this\n      const barWidth = (this.innerWidth + this.margin.left) / 2\n      const ele = d3.values(selectedRegion.electricity)\n      const ind = d3.values(selectedRegion.industry)\n      const tran = d3.values(selectedRegion.transport)\n      const res = d3.values(selectedRegion.residential)\n      // defining scales for different sectors\n      const electricity = d3.scaleLinear()\n        .domain([0, ele.reduce((sum, val) => sum + val, 0)])\n        .range([0, barWidth])\n\n      const industry = d3.scaleLinear()\n        .domain([0, ind.reduce((sum, val) => sum + val, 0)])\n        .range([0, barWidth])\n\n      const transport = d3.scaleLinear()\n        .domain([0, tran.reduce((sum, val) => sum + val, 0)])\n        .range([0, barWidth])\n\n      const residential = d3.scaleLinear()\n        .domain([0, res.reduce((sum, val) => sum + val, 0)])\n        .range([0, barWidth])\n\n      return {\n        electricity,\n        industry,\n        residential,\n        transport\n      }\n    },\n    createRect () {\n      const selectedRegion = this.dataFilter\n      const scale = this.scaleX\n      const { y } = this.scaleY\n      const barWidth = (this.innerWidth + this.margin.left) / 2\n      let sectorHeight = 10\n      const { currentElement } = this\n      const sectors = _.map(selectedRegion, (sector, key) => {\n        let distance = 10\n        // for bars height\n        let ValueSum = d3.sum(d3.values(selectedRegion[key]))\n        let yValue = y(ValueSum)\n        // conditions to check data\n        if (ValueSum === 0) {\n          yValue = 0\n        }\n        let initialHeight = sectorHeight\n        sectorHeight = sectorHeight + yValue + 30\n\n        let totalDist = 0\n        const rects = _.map(selectedRegion[key], (item, i) => {\n          // for rects\n          let initialDist = totalDist\n          totalDist = totalDist + scale[key](item)\n          // for labels horizontal position\n          let initialPos = distance\n          distance = distance + (barWidth / 10.5)\n          return {\n            labels: i,\n            dist: initialDist,\n            rectWidth: scale[key](item),\n            carrierValue: item,\n            posX: initialPos\n          }\n        })\n        return {\n          rects,\n          sector: key,\n          sectorHeight: initialHeight,\n          rectHeight: yValue\n        }\n      })\n      return sectors\n    },\n    findPerc (){\n      const carriers = this.carrierSum\n      const { maxRegValue } = this.scaleY\n      const groupsbyregion = this.dataNest\n      const world = groupsbyregion['World']\n      const maxEnergy = []\n      const totalEnergy = _.map(world, (value, fuel) => {\n        let fuels = d3.values(world[fuel])\n        let maxValue = d3.sum(fuels)\n        maxEnergy.push(maxValue)\n      })\n      const total = maxEnergy.reduce((sum, val) => sum + val, 0)\n      const perc = (maxRegValue / total) * 100\n      return {\n        perc: Math.round(perc * 100) / 100,\n        absValue: Math.round(maxRegValue * 100) / 100\n      }\n    },\n    sumCarriers () {\n      const sectors = this.createRect\n      const sumValue = {}\n\n      const dataArray = _.map(sectors, (sector, key) => {\n        const fuels = sector.rects\n        const data = _.map(fuels, (carrier, ckey) => {\n          return fuels[ckey].carrierValue\n        })\n        return data\n      })\n      const result = dataArray.reduce((r, a) => a.map((b, i) => (r[i] || 0) + b), [])\n      return result\n    }\n  }\n}\n</script>\n\n<!-- Add \"scoped\" attribute to limit CSS to this component only -->\n<style scoped lang=\"scss\">\n@import \"library/src/style/variables.scss\";\n\n.visualization {\n  height: inherit;\n  padding: 2% 12%;\n}\n\n.fuel_rect {\n  stroke: $color-gray;\n  fill: getColor(gray, 80)\n}\n\n.fuel-labels {\n  font-size: 10px;\n  text-anchor: middle;\n  cursor: pointer;\n}\n\n.regionselect {\n  top: $spacing * 2;\n  left: 4.5em;\n  position: absolute;\n  width: 150px;\n}\n\n#select-label {\n  font-size: 10px;\n  margin-top: 15px;\n}\n\n#emissions-label {\n  margin-top: 15px;\n}\n\n.is-empty {\n  fill-opacity: 0.2;\n}\n\n.is-active {\n  visibility: visible;\n}\n.electrification {\n  fill: $color-yellow;\n}\n\n.is-inactive {\n  visibility: hidden;\n}\n\n.energy_sum {\n  fill: $color-neon;\n}\n</style>\n"]}]}