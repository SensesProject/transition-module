{"remainingRequest":"/Users/francescamorini/projects/senses/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/francescamorini/projects/senses/src/components/EnergyCarriers.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/francescamorini/projects/senses/src/components/EnergyCarriers.vue","mtime":1574425418137},{"path":"/Users/francescamorini/projects/senses/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/francescamorini/projects/senses/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/francescamorini/projects/senses/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/francescamorini/projects/senses/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:Ly8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KCmltcG9ydCAqIGFzIGQzIGZyb20gJ2QzJwppbXBvcnQgXyBmcm9tICdsb2Rhc2gnCgovLyBkYXRhCmltcG9ydCBDYXJyaWVyc1JlcG9ydCBmcm9tICcuLi9hc3NldHMvZGF0YS93b3JsZF9yZWdpb25hbF9yZXBvcnQuanNvbicKCi8vIENvbXBvbmVudHMKaW1wb3J0IENvdW50cnlTZWxlY3RvciBmcm9tICcuL3N1YmNvbXBvbmVudHMvQ291bnRyeVNlbGVjdG9yLnZ1ZScKCmV4cG9ydCBkZWZhdWx0IHsKICBuYW1lOiAnRW5lcmd5Q2FycmllcnMnLAogIHByb3BzOiB7CiAgICB3aWR0aDogewogICAgICB0eXBlOiBOdW1iZXIsCiAgICAgIHJlcXVpcmVkOiB0cnVlCiAgICB9LAogICAgaGVpZ2h0OiB7CiAgICAgIHR5cGU6IE51bWJlciwKICAgICAgcmVxdWlyZWQ6IHRydWUKICAgIH0sCiAgICBzdGVwOiB7CiAgICAgIHR5cGU6IE51bWJlciwKICAgICAgZGVmYXVsdDogMAogICAgfQogIH0sCiAgY29tcG9uZW50czogewogICAgQ291bnRyeVNlbGVjdG9yCiAgfSwKICBkYXRhICgpIHsKICAgIHJldHVybiB7CiAgICAgIENhcnJpZXJzUmVwb3J0LAogICAgICBtYXJnaW46IHsKICAgICAgICBsZWZ0OiA3MCwKICAgICAgICB0b3A6IDMwLAogICAgICAgIGJvdHRvbTogMzAsCiAgICAgICAgcmlnaHQ6IDQwCiAgICAgIH0sCiAgICAgIGVuZXJneUxhYmVsczogWwogICAgICAgICdjb2FsJywKICAgICAgICAnZWxlY3RyaWNpdHknLAogICAgICAgICdnYXMnLAogICAgICAgICdtdGJpbycsCiAgICAgICAgJ25vbi1iaW9yZW4nLAogICAgICAgICdudWNsZWFyJywKICAgICAgICAnb2lsJywKICAgICAgICAnb3RoZXInLAogICAgICAgICdvdGhlciBnYXMnLAogICAgICAgICdvdGhlciBsaXF1aWRzJywKICAgICAgICAnb3RoZXIgc29saWRzJwogICAgICBdCiAgICB9CiAgfSwKICBjb21wdXRlZDogewogICAgaW5uZXJXaWR0aCAoKSB7CiAgICAgIHJldHVybiB0aGlzLndpZHRoIC0gdGhpcy5tYXJnaW4ubGVmdCAtIHRoaXMubWFyZ2luLnJpZ2h0CiAgICB9LAogICAgaW5uZXJIZWlnaHQgKCkgewogICAgICByZXR1cm4gdGhpcy5oZWlnaHQgLSB0aGlzLm1hcmdpbi50b3AgLSB0aGlzLm1hcmdpbi5ib3R0b20KICAgIH0sCiAgICAvLyBkYXRhIG5ldyBzdHJ1Y3R1cmUgYW5kIHNlbGVjdGlvbgogICAgbmVzdFZhcmlhYmxlcyAoKSB7CiAgICAgIGNvbnN0IGNhcnJpZXJzID0gdGhpcy5DYXJyaWVyc1JlcG9ydAogICAgICByZXR1cm4gewogICAgICAgIGNhcnJpZXJzLAogICAgICAgIGdyb3Vwc2J5cmVnaW9uOiBfLmdyb3VwQnkoY2FycmllcnMsICdyZWdpb24nKSwKICAgICAgICBhbGxGdWVsczogXy51bmlxKF8ubWFwKGNhcnJpZXJzLCAnZnVlbCcpKSwKICAgICAgICBzZWN0b3JzOiBbJ2luZHVzdHJ5JywgJ3RyYW5zcG9ydCcsICdyZXNpZGVudGlhbCcsICdlbGVjdHJpY2l0eSddCiAgICAgIH0KICAgIH0sCiAgICBkYXRhTmVzdCAoKSB7CiAgICAgIGNvbnN0IHsKICAgICAgICBjYXJyaWVycywKICAgICAgICBncm91cHNieXJlZ2lvbiwKICAgICAgICBhbGxGdWVscywKICAgICAgICBzZWN0b3JzCiAgICAgIH0gPSB0aGlzLm5lc3RWYXJpYWJsZXMKCiAgICAgIF8uZm9yRWFjaChncm91cHNieXJlZ2lvbiwgKGFyciwga2V5KSA9PiB7CiAgICAgICAgY29uc3Qgb2JqID0ge30KICAgICAgICBfLmZvckVhY2goc2VjdG9ycywgc2VjdG9yID0+IHsKICAgICAgICAgIGNvbnN0IGZ1ZWxPYmogPSB7fQogICAgICAgICAgXy5mb3JFYWNoKGFsbEZ1ZWxzLCAoZnVlbCwgaSkgPT4gewogICAgICAgICAgICBjb25zdCBkYXRhID0gXy5tYXAoYXJyLCBzZWN0b3IpCiAgICAgICAgICAgIGZ1ZWxPYmpbZnVlbF0gPSBkYXRhW2ldCiAgICAgICAgICB9KQogICAgICAgICAgb2JqW3NlY3Rvcl0gPSBmdWVsT2JqCiAgICAgICAgfSkKICAgICAgICBncm91cHNieXJlZ2lvbltrZXldID0gb2JqCiAgICAgIH0pCiAgICAgIHJldHVybiBncm91cHNieXJlZ2lvbgogICAgfSwKICAgIGRhdGFGaWx0ZXIgKCkgewogICAgICBjb25zdCBncm91cHNieXJlZ2lvbiA9IHRoaXMuZGF0YU5lc3QKICAgICAgcmV0dXJuIGdyb3Vwc2J5cmVnaW9uWydXb3JsZCddCiAgICB9LAogICAgLy8gU2NhbGVzCiAgICBzY2FsZVkgKCkgewogICAgICBjb25zdCBzZWxlY3RlZFJlZ2lvbiA9IHRoaXMuZGF0YUZpbHRlcgogICAgICBsZXQgbWF4RW5lcmd5ID0gW10KICAgICAgY29uc3QgdG90YWxFbmVyZ3kgPSBfLm1hcChzZWxlY3RlZFJlZ2lvbiwgKHZhbHVlLCBmdWVsKSA9PiB7CiAgICAgICAgbGV0IGZ1ZWxzID0gZDMudmFsdWVzKHNlbGVjdGVkUmVnaW9uW2Z1ZWxdKQogICAgICAgIGxldCBtYXhWYWx1ZSA9IGQzLm1heChmdWVscykKICAgICAgICBtYXhFbmVyZ3kucHVzaChtYXhWYWx1ZSkKICAgICAgfSkKCiAgICAgIGNvbnN0IHkgPSBkMy5zY2FsZUxpbmVhcigpCiAgICAgICAgLmRvbWFpbihbMCwgbWF4RW5lcmd5LnJlZHVjZSgoc3VtLCB2YWwpID0+IHN1bSArIHZhbCwgMCldKQogICAgICAgIC5yYW5nZShbMCwgMzAwXSkKCiAgICAgIHJldHVybiB5CiAgICB9LAogICAgc2NhbGVYICgpIHsKICAgICAgY29uc3Qgc2VsZWN0ZWRSZWdpb24gPSB0aGlzLmRhdGFGaWx0ZXIKICAgICAgY29uc3QgeyB3aWR0aCwgaGVpZ2h0IH0gPSB0aGlzCiAgICAgIGNvbnN0IGJhcldpZHRoID0gKHdpZHRoICsgdGhpcy5tYXJnaW4ubGVmdCkgLyAyCiAgICAgIGNvbnN0IGVsZSA9IGQzLnZhbHVlcyhzZWxlY3RlZFJlZ2lvbi5lbGVjdHJpY2l0eSkKICAgICAgY29uc3QgaW5kID0gZDMudmFsdWVzKHNlbGVjdGVkUmVnaW9uLmluZHVzdHJ5KQogICAgICBjb25zdCB0cmFuID0gZDMudmFsdWVzKHNlbGVjdGVkUmVnaW9uLnRyYW5zcG9ydCkKICAgICAgY29uc3QgcmVzID0gZDMudmFsdWVzKHNlbGVjdGVkUmVnaW9uLnJlc2lkZW50aWFsKQogICAgICAvLyBkZWZpbmluZyBzY2FsZXMgZm9yIGRpZmZlcmVudCBzZWN0b3JzCiAgICAgIGNvbnN0IGVsZWN0cmljaXR5ID0gZDMuc2NhbGVMaW5lYXIoKQogICAgICAgIC5kb21haW4oWzAsIGVsZS5yZWR1Y2UoKHN1bSwgdmFsKSA9PiBzdW0gKyB2YWwsIDApXSkKICAgICAgICAucmFuZ2UoWzAsIGJhcldpZHRoXSkKCiAgICAgIGNvbnN0IGluZHVzdHJ5ID0gZDMuc2NhbGVMaW5lYXIoKQogICAgICAgIC5kb21haW4oWzAsIGluZC5yZWR1Y2UoKHN1bSwgdmFsKSA9PiBzdW0gKyB2YWwsIDApXSkKICAgICAgICAucmFuZ2UoWzAsIGJhcldpZHRoXSkKCiAgICAgIGNvbnN0IHRyYW5zcG9ydCA9IGQzLnNjYWxlTGluZWFyKCkKICAgICAgICAuZG9tYWluKFswLCB0cmFuLnJlZHVjZSgoc3VtLCB2YWwpID0+IHN1bSArIHZhbCwgMCldKQogICAgICAgIC5yYW5nZShbMCwgYmFyV2lkdGhdKQoKICAgICAgY29uc3QgcmVzaWRlbnRpYWwgPSBkMy5zY2FsZUxpbmVhcigpCiAgICAgICAgLmRvbWFpbihbMCwgcmVzLnJlZHVjZSgoc3VtLCB2YWwpID0+IHN1bSArIHZhbCwgMCldKQogICAgICAgIC5yYW5nZShbMCwgYmFyV2lkdGhdKQoKICAgICAgcmV0dXJuIHsKICAgICAgICBlbGVjdHJpY2l0eSwKICAgICAgICBpbmR1c3RyeSwKICAgICAgICByZXNpZGVudGlhbCwKICAgICAgICB0cmFuc3BvcnQKICAgICAgfQogICAgfSwKICAgIGNyZWF0ZVJlY3QgKCkgewogICAgICBjb25zdCBzZWxlY3RlZFJlZ2lvbiA9IHRoaXMuZGF0YUZpbHRlcgogICAgICBjb25zdCBzY2FsZSA9IHRoaXMuc2NhbGVYCiAgICAgIGNvbnN0IHkgPSB0aGlzLnNjYWxlWQogICAgICBjb25zdCBwZXJjU2NhbGUgPSB0aGlzLnNjYWxlUGVyYwogICAgICBsZXQgc2VjdG9ySGVpZ2h0ID0gMAoKICAgICAgY29uc3Qgc2VjdG9ycyA9IF8ubWFwKHNlbGVjdGVkUmVnaW9uLCAoc2VjdG9yLCBrZXkpID0+IHsKICAgICAgICBsZXQgVmFsdWVTdW0gPSBkMy5zdW0oZDMudmFsdWVzKHNlbGVjdGVkUmVnaW9uW2tleV0pKQogICAgICAgIGxldCB5VmFsdWUgPSB5KFZhbHVlU3VtKQoKICAgICAgICBsZXQgaW5pdGlhbEhlaWdodCA9IHNlY3RvckhlaWdodAogICAgICAgIHNlY3RvckhlaWdodCA9IHNlY3RvckhlaWdodCArIHlWYWx1ZSArIDIwCgogICAgICAgIGxldCB0b3RhbERpc3QgPSAwCiAgICAgICAgY29uc3QgcmVjdHMgPSBfLm1hcChzZWxlY3RlZFJlZ2lvbltrZXldLCAoaXRlbSwgaSkgPT4gewogICAgICAgICAgbGV0IGluaXRpYWxEaXN0ID0gdG90YWxEaXN0CiAgICAgICAgICB0b3RhbERpc3QgPSB0b3RhbERpc3QgKyBzY2FsZVtrZXldKGl0ZW0pCgogICAgICAgICAgcmV0dXJuIHsKICAgICAgICAgICAgbGFiZWxzOiBpLAogICAgICAgICAgICBkaXN0OiBpbml0aWFsRGlzdCwKICAgICAgICAgICAgcmVjdFdpZHRoOiBzY2FsZVtrZXldKGl0ZW0pCiAgICAgICAgICB9CiAgICAgICAgfSkKICAgICAgICByZXR1cm4gewogICAgICAgICAgcmVjdHMsCiAgICAgICAgICBzZWN0b3I6IGtleSwKICAgICAgICAgIHNlY3RvckhlaWdodDogaW5pdGlhbEhlaWdodCwKICAgICAgICAgIHJlY3RIZWlnaHQ6IHlWYWx1ZQogICAgICAgIH0KICAgICAgfSkKICAgICAgcmV0dXJuIHNlY3RvcnMKICAgIH0sCiAgICBjcmVhdGVFbkxhYmVscyAoKSB7CiAgICAgIGNvbnN0IGVuZXJnaWVzID0gdGhpcy5lbmVyZ3lMYWJlbHMKICAgICAgbGV0IGRpc3RhbmNlID0gdGhpcy5tYXJnaW4ubGVmdAogICAgICBjb25zdCBiYXJXaWR0aCA9ICh0aGlzLndpZHRoICsgdGhpcy5tYXJnaW4ubGVmdCkgLyAyCgogICAgICBjb25zdCBwb3NpdGlvbiA9IF8ubWFwKGVuZXJnaWVzLCAoZW5lcmd5LCBpKSA9PiB7CiAgICAgICAgY29uc3QgbmFtZSA9IGVuZXJnaWVzW2ldCiAgICAgICAgY29uc29sZS5sb2cobmFtZSkKICAgICAgICBsZXQgaW5pdGlhbFBvcyA9IGRpc3RhbmNlCiAgICAgICAgZGlzdGFuY2UgPSBkaXN0YW5jZSArIChiYXJXaWR0aCAvIDEwLjUpCgogICAgICAgIHJldHVybiB7CiAgICAgICAgICBuYW1lOiBuYW1lLAogICAgICAgICAgcG9zWDogaW5pdGlhbFBvcwogICAgICAgIH0KICAgICAgfSkKICAgICAgY29uc29sZS5sb2cocG9zaXRpb24pCiAgICAgIHJldHVybiBwb3NpdGlvbgogICAgfQogIH0KfQo="},{"version":3,"sources":["EnergyCarriers.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA6CA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"EnergyCarriers.vue","sourceRoot":"src/components","sourcesContent":["<template>\n  <div class=\"visualization\" id=\"carriers\" width=\"90%\">\n    <CountrySelector class=\"selector\" />\n    <svg width=\"80%\" height=\"100%\" :transform=\"'translate('+ margin.left * 2 + ',0)'\">\n      <g :transform=\"'translate('+ margin.left + ',' + margin.top + ')'\">\n        <g\n          v-for=\"(sector,i) in createRect\"\n          v-bind:key=\"i\"\n          :id=\"sector.sector\"\n          :transform=\"'translate('+ margin.left * 2 + ',' + sector.sectorHeight +')'\"\n        >\n          <rect\n            class=\"fuel_rect\"\n            :class=\"sector.sector\"\n            v-for=\"(rect, i) in sector.rects\"\n            v-bind:key=\"i\"\n            :id=\"rect.labels\"\n            :x=\"rect.dist\"\n            :width=\"rect.rectWidth\"\n            :height=\"sector.rectHeight\"\n          />\n        </g>\n        <text\n        class=\"sector-labels\"\n        v-for=\"(sector) in createRect\"\n        v-bind:key=\"sector.sector\"\n        :transform=\"'translate('+ ((width + margin.left) / 2) + ',' + (sector.sectorHeight + 10) +')'\"\n        >\n        {{sector.sector}}\n      </text>\n      </g>\n      <text\n      v-for=\"(energy, i) in createEnLabels\"\n      :transform=\"'translate('+ margin.left * 2 + ',650)'\"\n      class=\"fuel-labels\"\n      v-bind:key=\"i\"\n      :x=\"energy.posX\"\n      >\n      {{ energy.name }}\n    </text>\n    </svg>\n  </div>\n</template>\n\n<script>\nimport * as d3 from 'd3'\nimport _ from 'lodash'\n\n// data\nimport CarriersReport from '../assets/data/world_regional_report.json'\n\n// Components\nimport CountrySelector from './subcomponents/CountrySelector.vue'\n\nexport default {\n  name: 'EnergyCarriers',\n  props: {\n    width: {\n      type: Number,\n      required: true\n    },\n    height: {\n      type: Number,\n      required: true\n    },\n    step: {\n      type: Number,\n      default: 0\n    }\n  },\n  components: {\n    CountrySelector\n  },\n  data () {\n    return {\n      CarriersReport,\n      margin: {\n        left: 70,\n        top: 30,\n        bottom: 30,\n        right: 40\n      },\n      energyLabels: [\n        'coal',\n        'electricity',\n        'gas',\n        'mtbio',\n        'non-bioren',\n        'nuclear',\n        'oil',\n        'other',\n        'other gas',\n        'other liquids',\n        'other solids'\n      ]\n    }\n  },\n  computed: {\n    innerWidth () {\n      return this.width - this.margin.left - this.margin.right\n    },\n    innerHeight () {\n      return this.height - this.margin.top - this.margin.bottom\n    },\n    // data new structure and selection\n    nestVariables () {\n      const carriers = this.CarriersReport\n      return {\n        carriers,\n        groupsbyregion: _.groupBy(carriers, 'region'),\n        allFuels: _.uniq(_.map(carriers, 'fuel')),\n        sectors: ['industry', 'transport', 'residential', 'electricity']\n      }\n    },\n    dataNest () {\n      const {\n        carriers,\n        groupsbyregion,\n        allFuels,\n        sectors\n      } = this.nestVariables\n\n      _.forEach(groupsbyregion, (arr, key) => {\n        const obj = {}\n        _.forEach(sectors, sector => {\n          const fuelObj = {}\n          _.forEach(allFuels, (fuel, i) => {\n            const data = _.map(arr, sector)\n            fuelObj[fuel] = data[i]\n          })\n          obj[sector] = fuelObj\n        })\n        groupsbyregion[key] = obj\n      })\n      return groupsbyregion\n    },\n    dataFilter () {\n      const groupsbyregion = this.dataNest\n      return groupsbyregion['World']\n    },\n    // Scales\n    scaleY () {\n      const selectedRegion = this.dataFilter\n      let maxEnergy = []\n      const totalEnergy = _.map(selectedRegion, (value, fuel) => {\n        let fuels = d3.values(selectedRegion[fuel])\n        let maxValue = d3.max(fuels)\n        maxEnergy.push(maxValue)\n      })\n\n      const y = d3.scaleLinear()\n        .domain([0, maxEnergy.reduce((sum, val) => sum + val, 0)])\n        .range([0, 300])\n\n      return y\n    },\n    scaleX () {\n      const selectedRegion = this.dataFilter\n      const { width, height } = this\n      const barWidth = (width + this.margin.left) / 2\n      const ele = d3.values(selectedRegion.electricity)\n      const ind = d3.values(selectedRegion.industry)\n      const tran = d3.values(selectedRegion.transport)\n      const res = d3.values(selectedRegion.residential)\n      // defining scales for different sectors\n      const electricity = d3.scaleLinear()\n        .domain([0, ele.reduce((sum, val) => sum + val, 0)])\n        .range([0, barWidth])\n\n      const industry = d3.scaleLinear()\n        .domain([0, ind.reduce((sum, val) => sum + val, 0)])\n        .range([0, barWidth])\n\n      const transport = d3.scaleLinear()\n        .domain([0, tran.reduce((sum, val) => sum + val, 0)])\n        .range([0, barWidth])\n\n      const residential = d3.scaleLinear()\n        .domain([0, res.reduce((sum, val) => sum + val, 0)])\n        .range([0, barWidth])\n\n      return {\n        electricity,\n        industry,\n        residential,\n        transport\n      }\n    },\n    createRect () {\n      const selectedRegion = this.dataFilter\n      const scale = this.scaleX\n      const y = this.scaleY\n      const percScale = this.scalePerc\n      let sectorHeight = 0\n\n      const sectors = _.map(selectedRegion, (sector, key) => {\n        let ValueSum = d3.sum(d3.values(selectedRegion[key]))\n        let yValue = y(ValueSum)\n\n        let initialHeight = sectorHeight\n        sectorHeight = sectorHeight + yValue + 20\n\n        let totalDist = 0\n        const rects = _.map(selectedRegion[key], (item, i) => {\n          let initialDist = totalDist\n          totalDist = totalDist + scale[key](item)\n\n          return {\n            labels: i,\n            dist: initialDist,\n            rectWidth: scale[key](item)\n          }\n        })\n        return {\n          rects,\n          sector: key,\n          sectorHeight: initialHeight,\n          rectHeight: yValue\n        }\n      })\n      return sectors\n    },\n    createEnLabels () {\n      const energies = this.energyLabels\n      let distance = this.margin.left\n      const barWidth = (this.width + this.margin.left) / 2\n\n      const position = _.map(energies, (energy, i) => {\n        const name = energies[i]\n        console.log(name)\n        let initialPos = distance\n        distance = distance + (barWidth / 10.5)\n\n        return {\n          name: name,\n          posX: initialPos\n        }\n      })\n      console.log(position)\n      return position\n    }\n  }\n}\n</script>\n\n<!-- Add \"scoped\" attribute to limit CSS to this component only -->\n<style scoped lang=\"scss\">\n@import \"library/src/style/variables.scss\";\n\n.visualization {\n  width: inherit;\n  height: inherit;\n}\n\n.fuel_rect {\n  stroke: $color-yellow;\n  fill: getColor(yellow, 80)\n}\n\n.fuel-labels {\n  font-size: 10px;\n  text-anchor: middle;\n  cursor: pointer;\n}\n\n.selector {\n  width: inherit;\n}\n</style>\n"]}]}