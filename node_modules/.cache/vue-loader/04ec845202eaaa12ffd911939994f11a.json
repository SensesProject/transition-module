{"remainingRequest":"/Users/francescamorini/projects/transition-module/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/francescamorini/projects/transition-module/src/components/animatedcursor.vue?vue&type=style&index=0&id=6e69f76e&scoped=true&lang=scss&","dependencies":[{"path":"/Users/francescamorini/projects/transition-module/src/components/animatedcursor.vue","mtime":1572536223160},{"path":"/Users/francescamorini/projects/transition-module/node_modules/css-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/francescamorini/projects/transition-module/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":499162500000},{"path":"/Users/francescamorini/projects/transition-module/node_modules/postcss-loader/src/index.js","mtime":499162500000},{"path":"/Users/francescamorini/projects/transition-module/node_modules/sass-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/francescamorini/projects/transition-module/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/francescamorini/projects/transition-module/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCnN2ZyB7CiAgcG9zaXRpb246IGFic29sdXRlOwp9Cg=="},{"version":3,"sources":["animatedcursor.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAoGA;AACA;AACA","file":"animatedcursor.vue","sourceRoot":"src/components","sourcesContent":["<template>\n  <g class=\"cursor\" @mousedown=\"md($event, 1)\" @touchstart=\"md($event,1)\">\n    <circle :cx='x' :cy='y' r=\"8\" fill='black'/>\n    <text class=\"label\" :x='x + 12' :y='y'>Year</text>\n    <text class=\"label\" :x='x + 12' :y='y + 14'>Emissions</text>\n    <line :x1='x' :x2='x' y1='0' :y2='height' stroke=\"black\"/>\n    <circle v-for='dot in dots' cx='4' cy='4' r=\"4\" fill='red'/>\n  </g>\n</template>\n\n<script>\nimport * as d3 from 'd3'\n\nimport emissionsData from '../assets/emissions.json'\nimport subEmissions from '../assets/subemissions.json'\n\nexport default {\n  name: 'Animatedcursor',\n  data () {\n    return {\n      emissions: emissionsData,\n      subemissions: subEmissions,\n      isMove: false,\n      x: 0,\n      y: 25,\n      width: 1000,\n      height: 600,\n      data: []\n    }\n  },\n  methods: {\n    md (ev, val) {\n      if (val === 1) {\n        this.isMove = true\n      } else { return null }\n      document.addEventListener('mousemove', this.mm)\n      document.addEventListener('mouseup', this.mu)\n      document.addEventListener('touchmove', this.tm)\n      document.addEventListener('touchend', this.mu)\n    },\n    mu () {\n      this.isMove = false\n      document.removeEventListener('mousemove', this.mm)\n      document.removeEventListener('touchmove', this.tm)\n      document.removeEventListener('touchend', this.mu)\n    },\n    mm (ev) {\n      if (this.isMove) {\n        this.x = ev.clientX - 360\n      } else { return null }\n    },\n    tm (ev) {\n      if (this.isMove) {\n        this.x = ev.touches[0].clientX\n      } else { return null }\n    },\n    dotScale () {\n      var parseDate = d3.timeParse('%Y')\n      this.emissions.forEach(function (d) {\n        d.date = parseDate(d.Year)\n      })\n      var x = d3\n        .scaleTime()\n        .domain([d3.min(this.emissions, d => d.date), d3.max(this.emissions, d => d.date)])\n        .rangeRound([0, 100])\n\n      var y = d3\n        .scaleLinear()\n        .domain([0, 40000000])\n        .range([0, 1000])\n\n      return {\n        x,\n        y\n      }\n    }\n  },\n  computed: {\n    dots () {\n      const data = this.subemissions\n      const scale = this.dotScale()\n      // console.log(data)\n      const dots = ['Public', 'Autoproduced', 'Aviation', 'Road', 'Other', 'Shipping', 'CommRes', 'Agriculture', 'Combustion', 'Production', 'Solvents', 'OtherProc', 'IndWaste']\n\n      const newAreas = dots.map(function (item, i) {\n        let sum\n        for (let n = 0; n < i; n++) {\n          sum = data.key\n        }\n        return scale.y(sum)\n      })\n      // console.log(newAreas)\n      return newAreas\n    }\n  }\n}\n</script>\n\n<!-- Add \"scoped\" attribute to limit CSS to this component only -->\n<style scoped lang=\"scss\">\nsvg {\n  position: absolute;\n}\n</style>\n"]}]}