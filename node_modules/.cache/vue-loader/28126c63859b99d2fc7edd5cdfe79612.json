{"remainingRequest":"/Users/francescamorini/projects/senses/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/francescamorini/projects/senses/src/App.vue?vue&type=template&id=7ba5bd90&","dependencies":[{"path":"/Users/francescamorini/projects/senses/src/App.vue","mtime":1575650439895},{"path":"/Users/francescamorini/projects/senses/node_modules/cache-loader/dist/cjs.js","mtime":1575047512487},{"path":"/Users/francescamorini/projects/senses/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":1575047516506},{"path":"/Users/francescamorini/projects/senses/node_modules/cache-loader/dist/cjs.js","mtime":1575047512487},{"path":"/Users/francescamorini/projects/senses/node_modules/vue-loader/lib/index.js","mtime":1575047516506}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},null]}