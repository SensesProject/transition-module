{"remainingRequest":"/Users/francescamorini/projects/transition-module/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/francescamorini/projects/transition-module/src/components/chartanimated.vue?vue&type=style&index=0&id=7d3d5f21&scoped=true&lang=scss&","dependencies":[{"path":"/Users/francescamorini/projects/transition-module/src/components/chartanimated.vue","mtime":1572536223171},{"path":"/Users/francescamorini/projects/transition-module/node_modules/css-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/francescamorini/projects/transition-module/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":499162500000},{"path":"/Users/francescamorini/projects/transition-module/node_modules/postcss-loader/src/index.js","mtime":499162500000},{"path":"/Users/francescamorini/projects/transition-module/node_modules/sass-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/francescamorini/projects/transition-module/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/francescamorini/projects/transition-module/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgovLyBAaW1wb3J0ICJsaWJyYXJ5L3NyYy9zdHlsZS9iYXNlLnNjc3MiOwpAaW1wb3J0ICJsaWJyYXJ5L3NyYy9zdHlsZS92YXJpYWJsZXMuc2NzcyI7CgpzdmcgewogIHBvc2l0aW9uOmFic29sdXRlOwp9Cgouc3ViZW1pc3Npb25zIHsKICBzdHJva2Utd2lkdGg6IDAuNTsKfQouc3ViZW1pc3Npb25zOmhvdmVyIHsKICBmaWxsOiAkY29sb3ItYmx1ZTsKfQoKI0NvbWJ1c3Rpb24sICNQcm9kdWN0aW9uLCAjU29sdmVudHMsICNPdGhlclByb2MsICNJbmRXYXN0ZSB7CiAgZmlsbDogZGFya2VuKCRjb2xvci15ZWxsb3csIDMwJSk7CiAgc3Ryb2tlOiBkYXJrZW4oICRjb2xvci12aW9sZXQsIDMwJSApOwoKfQoKI0NvbW1SZXMsICNBZ3JpY3VsdHVyZSB7CiAgZmlsbDogZGFya2VuKCAkY29sb3IteWVsbG93LCAyMCUgKTsKICBzdHJva2U6IGRhcmtlbiggJGNvbG9yLXZpb2xldCwgMjAlICk7Cgp9CgojQXZpYXRpb24sICNSb2FkLCAjT3RoZXIsICNTaGlwcGluZyB7CiAgZmlsbDogZGFya2VuKCAkY29sb3IteWVsbG93LCA0MCUgKTsKICBzdHJva2U6IGRhcmtlbiggJGNvbG9yLXZpb2xldCwgNDAlICk7Cgp9CgojUHVibGljLCAjQXV0b3Byb2R1Y2VkIHsKICBmaWxsOiBkYXJrZW4oICRjb2xvci15ZWxsb3csIDUlICk7CiAgc3Ryb2tlOiBkYXJrZW4oICRjb2xvci12aW9sZXQsIDUlICk7Cn0KCg=="},{"version":3,"sources":["chartanimated.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA6KA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA","file":"chartanimated.vue","sourceRoot":"src/components","sourcesContent":["<template>\n<g class=\"animated-subsectors\" v-if=\"step === 4\">\n    <g class='substacked' v-bind:transform='translate()'>\n    <g class='stacked-SubEmissions' v-if=\"step >=3 && step <=4\" clip-path=\"url(#cut-off-graph)\">\n        <path class=\"subemissions\" v-for=\"(item, i) in items\" v-bind:key='i' :d='item.d' :id='item.id'/>\n    </g>\n    <g class=\"axis-step4\" v-if=\"step == 4\">\n      <Axis class='xA' v-bind:scales='newScale().xAxis' v-bind:chartDefaults='chartDefaults' v-bind:data='emissions' v-bind:trns='trnsX()'/>\n      <Axis class='yA' v-bind:scales='newScale().yAxis' v-bind:chartDefaults='chartDefaults' v-bind:data='emissions' v-bind:trns='trnsY'/>\n    </g>\n    </g>\n    <Animatedcursor v-if=\"step == 4\"/>\n</g>\n</template>\n\n<script>\nimport * as d3 from 'd3'\nimport { mapState } from 'vuex'\nimport Axis from './axis.vue'\nimport Animatedcursor from './animatedcursor.vue'\nimport PopUpRight from './LinechartPopUp-right.vue'\n\nimport emissionsData from '../assets/emissions.json'\nimport sectors from '../assets/emissions-stacked.json'\nimport subEmissions from '../assets/subemissions.json'\n\nexport default {\n  name: 'chartanimated',\n  components: {\n    Axis,\n    Animatedcursor,\n    PopUpRight\n  },\n  data () {\n    return {\n      emissions: emissionsData,\n      sectors: sectors,\n      subemissions: subEmissions,\n      chartDefaults: {\n        width: 1000,\n        height: 400,\n        chartId: 'linechart-vue',\n        title: 'Emissions',\n        margin: {\n          top: 5,\n          right: 50,\n          bottom: 25,\n          left: 0\n        },\n        data: []\n      },\n      line: '',\n      translate: this.getTranslation,\n      translateLine: 'translate(0,0)',\n      trnsY: 'translate(0,0)',\n      trnsX: this.getTrnsx,\n      toggleClass: true,\n      chartWidth: this.getWidth\n    }\n  },\n  methods: {\n    newScale () {\n      var parseDate = d3.timeParse('%Y')\n      this.emissions.forEach(function (d) {\n        d.date = parseDate(d.Year)\n      })\n      var x = d3\n        .scaleTime()\n        .domain([d3.min(this.emissions, d => d.date), d3.max(this.emissions, d => d.date)])\n        .rangeRound([0, this.chartDefaults.width])\n\n      var y = d3\n        .scaleLinear()\n        .domain([0, 40000000])\n        .range([this.chartDefaults.height, -100])\n\n      d3.axisBottom().scale(x)\n      d3.axisLeft().scale(y)\n\n      var xAxis = d3\n        .axisBottom()\n        .scale(x)\n        .tickSize(0)\n        .tickFormat(d3.timeFormat('%Y'))\n        .ticks(d3.timeYear.every(5))\n\n      var yAxis = d3\n        .axisRight()\n        .scale(y)\n        .tickValues([10000000, 20000000, 30000000, 40000000])\n        .tickSize(830)\n        .tickPadding(6)\n\n      return {\n        x,\n        y,\n        xAxis,\n        yAxis\n      }\n    },\n    // this set of functions are transforming the scale of the graph from step 3 and 4\n    getTrnsx (chartDefaults) {\n      const t = 'translate(0,' + this.chartDefaults.height + ')'\n      return t\n    },\n    getTranslation (chartDefaults) {\n      var tr = 'translate(' + 100 + ',' + 200 + ')'\n      if (this.step === 4) {\n        tr = 'translate(' + -30 + ',' + 280 + ')'\n      }\n      return tr\n    },\n    getWidth (chartDefaults) {\n      var width = '90%'\n      if (this.step === 4) {\n        width = '100%'\n      }\n      return width\n    }\n  },\n  // this computed property needs to be added for the scrollytelling to function\n  computed: {\n    ...mapState({\n      step: state => state.scrollytelling ? state.scrollytelling.step : null\n    }),\n// this function return an array with paths for the stacked barchart\n    items () {\n      const areas = ['Aviation', 'Road', 'Other', 'Shipping', 'Combustion', 'Production', 'Solvents', 'OtherProc', 'IndWaste', 'CommRes', 'Agriculture', 'Public', 'Autoproduced']\n\n      const scale = this.newScale()\n\n      const parseDate = d3.timeParse('%Y')\n      const data = this.subemissions\n\n      data.forEach(function (d) {\n        d.date = parseDate(d.Year)\n      })\n\n      var areaFixed = d3\n        .area()\n        .x(d => { return scale.x(d.date) })\n        .curve(d3.curveCatmullRom)\n\n      const newAreas = areas.map(function (item, i) {\n        areaFixed\n          .y0(d => {\n            let sum = 0\n            for (let n = 0; n < i; n++) {\n              sum = sum + d[areas[n]]\n            }\n            return scale.y(sum)\n          })\n          .y1(d => {\n            let sum = 0\n            for (let n = 0; n <= i; n++) {\n              sum = sum + d[areas[n]]\n            }\n            return scale.y(sum)\n          })\n        return {\n          d: areaFixed(data),\n          id: areas[i]\n        }\n      })\n\n      return newAreas\n    }\n  }\n}\n</script>\n\n<!-- Add \"scoped\" attribute to limit CSS to this component only -->\n<style scoped lang=\"scss\">\n// @import \"library/src/style/base.scss\";\n@import \"library/src/style/variables.scss\";\n\nsvg {\n  position:absolute;\n}\n\n.subemissions {\n  stroke-width: 0.5;\n}\n.subemissions:hover {\n  fill: $color-blue;\n}\n\n#Combustion, #Production, #Solvents, #OtherProc, #IndWaste {\n  fill: darken($color-yellow, 30%);\n  stroke: darken( $color-violet, 30% );\n\n}\n\n#CommRes, #Agriculture {\n  fill: darken( $color-yellow, 20% );\n  stroke: darken( $color-violet, 20% );\n\n}\n\n#Aviation, #Road, #Other, #Shipping {\n  fill: darken( $color-yellow, 40% );\n  stroke: darken( $color-violet, 40% );\n\n}\n\n#Public, #Autoproduced {\n  fill: darken( $color-yellow, 5% );\n  stroke: darken( $color-violet, 5% );\n}\n\n</style>\n"]}]}