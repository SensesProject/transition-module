{"remainingRequest":"/Users/francescamorini/projects/transition-module/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/francescamorini/projects/transition-module/src/components/carriersSelPaths.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/francescamorini/projects/transition-module/src/components/carriersSelPaths.vue","mtime":1572536223163},{"path":"/Users/francescamorini/projects/transition-module/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/francescamorini/projects/transition-module/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/francescamorini/projects/transition-module/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/francescamorini/projects/transition-module/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:Ly8KLy8KLy8KLy8KCmltcG9ydCAqIGFzIGQzIGZyb20gJ2QzJwppbXBvcnQgeyBtYXBTdGF0ZSB9IGZyb20gJ3Z1ZXgnCgppbXBvcnQgZW1pc3Npb25zU3Vic2VjdG9ycyBmcm9tICcuLi9hc3NldHMvc3Vic2VjdG9ycy1lbWlzc2lvbnMtbmVzdC5qc29uJwppbXBvcnQgZW5lcmd5Q2FycmllcnMgZnJvbSAnLi4vYXNzZXRzL2VuZXJneS1jYXJyaWVycy13b3JsZC5qc29uJwoKZXhwb3J0IGRlZmF1bHQgewogIG5hbWU6ICdDYXJyaWVyc1BhdGgnLAogIGRhdGEgKCkgewogICAgcmV0dXJuIHsKICAgICAgc3Vic2VjdG9yczogZW1pc3Npb25zU3Vic2VjdG9ycywKICAgICAgY2FycmllcnM6IGVuZXJneUNhcnJpZXJzLAogICAgICBjaGFydERlZmF1bHRzOiB7CiAgICAgICAgd2lkdGg6IDEwMDAsCiAgICAgICAgaGVpZ2h0OiA3MDAsCiAgICAgICAgbWFyZ2luOiB7CiAgICAgICAgICB0b3A6IDUsCiAgICAgICAgICByaWdodDogNTAsCiAgICAgICAgICBib3R0b206IDI1LAogICAgICAgICAgbGVmdDogMAogICAgICAgIH0KICAgICAgfSwKICAgICAgc2VsZWN0ZWQ6IG51bGwKICAgIH0KICB9LAogIG1ldGhvZHM6IHsKICAgIHNlbGVjdCAoZXZlbnQpIHsKICAgICAgdmFyIHRhcmdldElkID0gZXZlbnQuY3VycmVudFRhcmdldC5pZAogICAgICBpZiAodGhpcy5zZWxlY3RlZCA9PT0gdGFyZ2V0SWQpIHRoaXMuc2VsZWN0ZWQgPSBudWxsCiAgICAgIGVsc2UgdGhpcy5zZWxlY3RlZCA9IHRhcmdldElkCiAgICB9LAogICAgZ2V0U2NhbGUgKCkgewogICAgICBjb25zdCBzdWJzZWN0b3JzID0gdGhpcy5zdWJzZWN0b3JzCiAgICAgIGNvbnN0IGNhcnJpZXJzID0gdGhpcy5jYXJyaWVycwogICAgICBjb25zdCBjaGFydERlZmF1bHRzID0gdGhpcy5jaGFydERlZmF1bHRzCiAgICAgIGNvbnN0IHNlY3RvcnMgPSBbJ0VsZWN0cmljaXR5JywgJ0J1aWxkaW5nJywgJ0luZHVzdHJ5JywgJ1RyYW5zcG9ydCddCiAgICAgIHZhciBmaWx0ZXJFbGUgPSBzdWJzZWN0b3JzLmZpbHRlcihmdW5jdGlvbiAoZCkgeyByZXR1cm4gZC5TZWN0b3IgPT09ICdFbGVjdHJpY2l0eScgfSkKICAgICAgdmFyIGZpbHRlckJ1aWxkID0gc3Vic2VjdG9ycy5maWx0ZXIoZnVuY3Rpb24gKGQpIHsgcmV0dXJuIGQuU2VjdG9yID09PSAnQnVpbGRpbmcnIH0pCiAgICAgIHZhciBmaWx0ZXJJbmQgPSBzdWJzZWN0b3JzLmZpbHRlcihmdW5jdGlvbiAoZCkgeyByZXR1cm4gZC5TZWN0b3IgPT09ICdJbmR1c3RyeScgfSkKICAgICAgdmFyIGZpbHRlclRyID0gc3Vic2VjdG9ycy5maWx0ZXIoZnVuY3Rpb24gKGQpIHsgcmV0dXJuIGQuU2VjdG9yID09PSAnVHJhbnNwb3J0JyB9KQoKICAgICAgdmFyIHhQZXJjID0gZDMKICAgICAgICAuc2NhbGVMaW5lYXIoKQogICAgICAgIC5kb21haW4oWzAsIDFdKQogICAgICAgIC5yYW5nZVJvdW5kKFswLCB0aGlzLmNoYXJ0RGVmYXVsdHMud2lkdGggLSA1MF0pCgogICAgICB2YXIgeFBlcmNMYWJlbHMgPSBkMwogICAgICAgIC5zY2FsZUxpbmVhcigpCiAgICAgICAgLmRvbWFpbihbMCwgMTBdKQogICAgICAgIC5yYW5nZVJvdW5kKFswLCB0aGlzLmNoYXJ0RGVmYXVsdHMud2lkdGggLSAxMDBdKQoKICAgICAgdmFyIHggPSBkMwogICAgICAgIC5zY2FsZUxpbmVhcigpCiAgICAgICAgLmRvbWFpbihbMCwgZmlsdGVyRWxlLnJlZHVjZSgoc3VtLCB2YWwpID0+IHN1bSArIHZhbC5FbWlzc2lvbnMsIDApXSkKICAgICAgICAucmFuZ2VSb3VuZChbMCwgdGhpcy5jaGFydERlZmF1bHRzLndpZHRoIC0gNTBdKQoKICAgICAgdmFyIHhCID0gZDMKICAgICAgICAuc2NhbGVMaW5lYXIoKQogICAgICAgIC5kb21haW4oWzAsIGZpbHRlckJ1aWxkLnJlZHVjZSgoc3VtLCB2YWwpID0+IHN1bSArIHZhbC5FbWlzc2lvbnMsIDApXSkKICAgICAgICAucmFuZ2VSb3VuZChbMCwgdGhpcy5jaGFydERlZmF1bHRzLndpZHRoIC0gNTBdKQoKICAgICAgdmFyIHhJID0gZDMKICAgICAgICAuc2NhbGVMaW5lYXIoKQogICAgICAgIC5kb21haW4oWzAsIGZpbHRlckluZC5yZWR1Y2UoKHN1bSwgdmFsKSA9PiBzdW0gKyB2YWwuRW1pc3Npb25zLCAwKV0pCiAgICAgICAgLnJhbmdlUm91bmQoWzAsIHRoaXMuY2hhcnREZWZhdWx0cy53aWR0aCAtIDUwXSkKCiAgICAgIHZhciB4VCA9IGQzCiAgICAgICAgLnNjYWxlTGluZWFyKCkKICAgICAgICAuZG9tYWluKFswLCBmaWx0ZXJUci5yZWR1Y2UoKHN1bSwgdmFsKSA9PiBzdW0gKyB2YWwuRW1pc3Npb25zLCAwKV0pCiAgICAgICAgLnJhbmdlUm91bmQoWzAsIHRoaXMuY2hhcnREZWZhdWx0cy53aWR0aCAtIDUwXSkKCiAgICAgIHZhciBzY2FsZVhDYXIgPSBzZWN0b3JzLm1hcChmdW5jdGlvbiAoaXRlbSwgaSkgewogICAgICAgIHZhciBzY2FsZUFycmF5CiAgICAgICAgdmFyIGNhcnJpZXJzU2NhbGUgPSBjYXJyaWVycy5maWx0ZXIoZnVuY3Rpb24gKGQpIHsgcmV0dXJuIGQuU2VjdG9yID09PSBpdGVtIH0pCiAgICAgICAgZm9yICh2YXIgbiA9IDA7IG4gPD0gaTsgbisrKSB7CiAgICAgICAgICBzY2FsZUFycmF5ID0gZDMKICAgICAgICAgICAgLnNjYWxlTGluZWFyKCkKICAgICAgICAgICAgLmRvbWFpbihbMCwgY2FycmllcnNTY2FsZS5yZWR1Y2UoKHN1bSwgdmFsKSA9PiBzdW0gKyB2YWwuRW1pc3Npb25zLCAwKV0pCiAgICAgICAgICAgIC5yYW5nZVJvdW5kKFswLCBjaGFydERlZmF1bHRzLndpZHRoIC0gNTBdKQogICAgICAgIH0KICAgICAgICByZXR1cm4gc2NhbGVBcnJheQogICAgICB9KQoKICAgICAgdmFyIHkgPSBkMwogICAgICAgIC5zY2FsZUxpbmVhcigpCiAgICAgICAgLmRvbWFpbihbMCwgc3Vic2VjdG9ycy5yZWR1Y2UoKHN1bSwgdmFsKSA9PiBzdW0gKyB2YWwuRW1pc3Npb25zLCAwKV0pCiAgICAgICAgLnJhbmdlKFswLCB0aGlzLmNoYXJ0RGVmYXVsdHMuaGVpZ2h0IC0gMzAwXSkKCiAgICAgIHZhciB5QSA9IGQzCiAgICAgICAgLnNjYWxlTGluZWFyKCkKICAgICAgICAuZG9tYWluKFswLCBzdWJzZWN0b3JzLnJlZHVjZSgoc3VtLCB2YWwpID0+IHN1bSArIHZhbC5FbWlzc2lvbnMsIDApXSkKICAgICAgICAucmFuZ2UoWzAsIHRoaXMuY2hhcnREZWZhdWx0cy5oZWlnaHQgLSA5MF0pCgogICAgICBkMy5heGlzVG9wKCkuc2NhbGUoeEkpCiAgICAgIGQzLmF4aXNSaWdodCgpLnNjYWxlKHlBKQoKICAgICAgdmFyIGZvcm1hdFBlcmNlbnQgPSBkMy5mb3JtYXQoJy4wJScpCgogICAgICB2YXIgeEF4aXMgPSBkMwogICAgICAgIC5heGlzVG9wKCkKICAgICAgICAuc2NhbGUoeFBlcmMpCiAgICAgICAgLnRpY2tTaXplKDApCiAgICAgICAgLnRpY2tQYWRkaW5nKDEwKQogICAgICAgIC50aWNrVmFsdWVzKFswLCAxXSkKICAgICAgICAudGlja0Zvcm1hdChmb3JtYXRQZXJjZW50KQoKICAgICAgdmFyIHlBeGlzID0gZDMKICAgICAgICAuYXhpc1JpZ2h0KCkKICAgICAgICAuc2NhbGUoeUEpCiAgICAgICAgLnRpY2tzKDApCgogICAgICByZXR1cm4gewogICAgICAgIHgsCiAgICAgICAgeEF4aXMsCiAgICAgICAgeSwKICAgICAgICB4QiwKICAgICAgICB4SSwKICAgICAgICB4VCwKICAgICAgICBzY2FsZVhDYXIsCiAgICAgICAgeFBlcmMsCiAgICAgICAgeUF4aXMsCiAgICAgICAgeFBlcmNMYWJlbHMKICAgICAgfQogICAgfQogIH0sCiAgLy8gdGhpcyBjb21wdXRlZCBwcm9wZXJ0eSBuZWVkcyB0byBiZSBhZGRlZCBmb3IgdGhlIHNjcm9sbHl0ZWxsaW5nIHRvIGZ1bmN0aW9uCiAgY29tcHV0ZWQ6IHsKICAgIC4uLm1hcFN0YXRlKHsKICAgICAgc3RlcDogc3RhdGUgPT4gc3RhdGUuc2Nyb2xseXRlbGxpbmcgPyBzdGF0ZS5zY3JvbGx5dGVsbGluZy5zdGVwIDogbnVsbAogICAgfSkKICB9Cn0K"},{"version":3,"sources":["carriersSelPaths.vue"],"names":[],"mappings":";;;;;AAKA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"carriersSelPaths.vue","sourceRoot":"src/components","sourcesContent":["<template>\n  <polyline class=\"line\" points=\"130.231275 771.590598 130.231275 22 415 668 415 531 626 476 626 317 691 262 691 109 285 109 285 262 303 317 303 476 361 530 361 667 118 722 118 773 197 815\"></polyline>\n</template>\n\n<script>\nimport * as d3 from 'd3'\nimport { mapState } from 'vuex'\n\nimport emissionsSubsectors from '../assets/subsectors-emissions-nest.json'\nimport energyCarriers from '../assets/energy-carriers-world.json'\n\nexport default {\n  name: 'CarriersPath',\n  data () {\n    return {\n      subsectors: emissionsSubsectors,\n      carriers: energyCarriers,\n      chartDefaults: {\n        width: 1000,\n        height: 700,\n        margin: {\n          top: 5,\n          right: 50,\n          bottom: 25,\n          left: 0\n        }\n      },\n      selected: null\n    }\n  },\n  methods: {\n    select (event) {\n      var targetId = event.currentTarget.id\n      if (this.selected === targetId) this.selected = null\n      else this.selected = targetId\n    },\n    getScale () {\n      const subsectors = this.subsectors\n      const carriers = this.carriers\n      const chartDefaults = this.chartDefaults\n      const sectors = ['Electricity', 'Building', 'Industry', 'Transport']\n      var filterEle = subsectors.filter(function (d) { return d.Sector === 'Electricity' })\n      var filterBuild = subsectors.filter(function (d) { return d.Sector === 'Building' })\n      var filterInd = subsectors.filter(function (d) { return d.Sector === 'Industry' })\n      var filterTr = subsectors.filter(function (d) { return d.Sector === 'Transport' })\n\n      var xPerc = d3\n        .scaleLinear()\n        .domain([0, 1])\n        .rangeRound([0, this.chartDefaults.width - 50])\n\n      var xPercLabels = d3\n        .scaleLinear()\n        .domain([0, 10])\n        .rangeRound([0, this.chartDefaults.width - 100])\n\n      var x = d3\n        .scaleLinear()\n        .domain([0, filterEle.reduce((sum, val) => sum + val.Emissions, 0)])\n        .rangeRound([0, this.chartDefaults.width - 50])\n\n      var xB = d3\n        .scaleLinear()\n        .domain([0, filterBuild.reduce((sum, val) => sum + val.Emissions, 0)])\n        .rangeRound([0, this.chartDefaults.width - 50])\n\n      var xI = d3\n        .scaleLinear()\n        .domain([0, filterInd.reduce((sum, val) => sum + val.Emissions, 0)])\n        .rangeRound([0, this.chartDefaults.width - 50])\n\n      var xT = d3\n        .scaleLinear()\n        .domain([0, filterTr.reduce((sum, val) => sum + val.Emissions, 0)])\n        .rangeRound([0, this.chartDefaults.width - 50])\n\n      var scaleXCar = sectors.map(function (item, i) {\n        var scaleArray\n        var carriersScale = carriers.filter(function (d) { return d.Sector === item })\n        for (var n = 0; n <= i; n++) {\n          scaleArray = d3\n            .scaleLinear()\n            .domain([0, carriersScale.reduce((sum, val) => sum + val.Emissions, 0)])\n            .rangeRound([0, chartDefaults.width - 50])\n        }\n        return scaleArray\n      })\n\n      var y = d3\n        .scaleLinear()\n        .domain([0, subsectors.reduce((sum, val) => sum + val.Emissions, 0)])\n        .range([0, this.chartDefaults.height - 300])\n\n      var yA = d3\n        .scaleLinear()\n        .domain([0, subsectors.reduce((sum, val) => sum + val.Emissions, 0)])\n        .range([0, this.chartDefaults.height - 90])\n\n      d3.axisTop().scale(xI)\n      d3.axisRight().scale(yA)\n\n      var formatPercent = d3.format('.0%')\n\n      var xAxis = d3\n        .axisTop()\n        .scale(xPerc)\n        .tickSize(0)\n        .tickPadding(10)\n        .tickValues([0, 1])\n        .tickFormat(formatPercent)\n\n      var yAxis = d3\n        .axisRight()\n        .scale(yA)\n        .ticks(0)\n\n      return {\n        x,\n        xAxis,\n        y,\n        xB,\n        xI,\n        xT,\n        scaleXCar,\n        xPerc,\n        yAxis,\n        xPercLabels\n      }\n    }\n  },\n  // this computed property needs to be added for the scrollytelling to function\n  computed: {\n    ...mapState({\n      step: state => state.scrollytelling ? state.scrollytelling.step : null\n    })\n  }\n}\n</script>\n\n<!-- Add \"scoped\" attribute to limit CSS to this component only -->\n<style scoped lang=\"scss\">\n@import \"library/src/style/variables.scss\";\n.line {\n  fill: none;\n  stroke: black;\n}\n.hidden {\n  fill: white;\n  opacity: 0.5;\n}\n</style>\n"]}]}