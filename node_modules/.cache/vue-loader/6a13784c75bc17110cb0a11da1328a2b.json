{"remainingRequest":"/Users/francescamorini/projects/transition-module/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/francescamorini/projects/transition-module/src/components/chart.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/francescamorini/projects/transition-module/src/components/chart.vue","mtime":1572536223167},{"path":"/Users/francescamorini/projects/transition-module/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/francescamorini/projects/transition-module/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/francescamorini/projects/transition-module/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/francescamorini/projects/transition-module/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:Ly8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KCmltcG9ydCAqIGFzIGQzIGZyb20gJ2QzJwppbXBvcnQgeyBtYXBTdGF0ZSB9IGZyb20gJ3Z1ZXgnCmltcG9ydCBBeGlzIGZyb20gJy4vYXhpcy52dWUnCmltcG9ydCBkb3R0ZWRsaW5lIGZyb20gJy4vZG90dGVkbGluZXMudnVlJwppbXBvcnQgTGFiZWxzTGluZWNoYXJ0IGZyb20gJy4vTGFiZWxzTGluZWNoYXJ0LnZ1ZScKaW1wb3J0IEdvYWxBbm5vdGF0aW9ucyBmcm9tICcuL0xpbmVjaGFydEdvYWxBbm5vdGF0aW9ucy52dWUnCmltcG9ydCBQb3BVcExhYmVsIGZyb20gJy4vTGluZWNoYXJ0UG9wVXAudnVlJwppbXBvcnQgY2hhcnRhbmltYXRlZCBmcm9tICcuL2NoYXJ0YW5pbWF0ZWQudnVlJwoKaW1wb3J0IGVtaXNzaW9uc0RhdGEgZnJvbSAnLi4vYXNzZXRzL2VtaXNzaW9ucy5qc29uJwppbXBvcnQgc2VjdG9ycyBmcm9tICcuLi9hc3NldHMvZW1pc3Npb25zLXN0YWNrZWQuanNvbicKCmV4cG9ydCBkZWZhdWx0IHsKICBuYW1lOiAnY2hhcnQnLAogIHByb3BzOiB7CiAgICBsYWJlbDogU3RyaW5nCiAgfSwKICBjb21wb25lbnRzOiB7CiAgICBBeGlzLAogICAgRG90dGVkOiBkb3R0ZWRsaW5lLAogICAgTGFiZWxzTGluZWNoYXJ0LAogICAgY2hhcnRhbmltYXRlZCwKICAgIEdvYWxBbm5vdGF0aW9ucywKICAgIFBvcFVwTGFiZWwKICB9LAogIGRhdGEgKCkgewogICAgcmV0dXJuIHsKICAgICAgZW1pc3Npb25zOiBlbWlzc2lvbnNEYXRhLAogICAgICBzZWN0b3JzOiBzZWN0b3JzLAogICAgICBjaGFydERlZmF1bHRzOiB7CiAgICAgICAgd2lkdGg6IDEwMDAsCiAgICAgICAgaGVpZ2h0OiA0MDAsCiAgICAgICAgY2hhcnRJZDogJ2xpbmVjaGFydC12dWUnLAogICAgICAgIHRpdGxlOiAnRW1pc3Npb25zJywKICAgICAgICBtYXJnaW46IHsKICAgICAgICAgIHRvcDogNSwKICAgICAgICAgIHJpZ2h0OiA1MCwKICAgICAgICAgIGJvdHRvbTogMjUsCiAgICAgICAgICBsZWZ0OiAwCiAgICAgICAgfSwKICAgICAgICBkYXRhOiBbXQogICAgICB9LAogICAgICBsaW5lOiAnJywKICAgICAgdHJhbnNsYXRlOiB0aGlzLmdldFRyYW5zbGF0aW9uLAogICAgICB0cmFuc2xhdGVMaW5lOiAndHJhbnNsYXRlKDAsMCknLAogICAgICB0cm5zWTogJ3RyYW5zbGF0ZSgwLDApJywKICAgICAgdHJuc1g6IHRoaXMuZ2V0VHJuc3gsCiAgICAgIHRvZ2dsZUNsYXNzOiB0cnVlLAogICAgICBjaGFydFdpZHRoOiB0aGlzLmdldFdpZHRoCiAgICB9CiAgfSwKICBtb3VudGVkICgpIHsKICAgIHRoaXMuY2FsY3VsYXRlUGF0aCgpCiAgfSwKICBtZXRob2RzOiB7CiAgICBnZXRTY2FsZSAoKSB7CiAgICAgIHZhciBwYXJzZURhdGUgPSBkMy50aW1lUGFyc2UoJyVZJykKICAgICAgdGhpcy5lbWlzc2lvbnMuZm9yRWFjaChmdW5jdGlvbiAoZCkgewogICAgICAgIGQuZGF0ZSA9IHBhcnNlRGF0ZShkLlllYXIpCiAgICAgIH0pCiAgICAgIHZhciB4ID0gZDMKICAgICAgICAuc2NhbGVUaW1lKCkKICAgICAgICAuZG9tYWluKFtkMy5taW4odGhpcy5lbWlzc2lvbnMsIGQgPT4gZC5kYXRlKSwgcGFyc2VEYXRlKDIxMDApXSkKICAgICAgICAucmFuZ2VSb3VuZChbMCwgdGhpcy5jaGFydERlZmF1bHRzLndpZHRoIC0gMTAwXSkKCiAgICAgIHZhciB5ID0gZDMKICAgICAgICAuc2NhbGVMaW5lYXIoKQogICAgICAgIC5kb21haW4oWzAsIDQwMDAwMDAwXSkKICAgICAgICAucmFuZ2UoW3RoaXMuY2hhcnREZWZhdWx0cy5oZWlnaHQsIDBdKQoKICAgICAgZDMuYXhpc0JvdHRvbSgpLnNjYWxlKHgpCiAgICAgIGQzLmF4aXNMZWZ0KCkuc2NhbGUoeSkKCiAgICAgIHZhciB4QXhpcyA9IGQzCiAgICAgICAgLmF4aXNCb3R0b20oKQogICAgICAgIC5zY2FsZSh4KQogICAgICAgIC50aWNrU2l6ZSgwKQogICAgICAgIC50aWNrUGFkZGluZygxMCkKICAgICAgICAudGlja0Zvcm1hdChkMy50aW1lRm9ybWF0KCclWScpKQogICAgICAgIC50aWNrcyhkMy50aW1lWWVhci5ldmVyeSgxMCkpCiAgICAgIC8vICAgICAgICAuc3BsaWNlKDEpCgogICAgICB2YXIgeUF4aXMgPSBkMwogICAgICAgIC5heGlzTGVmdCgpCiAgICAgICAgLnNjYWxlKHkpCiAgICAgICAgLnRpY2tWYWx1ZXMoW2QzLm1heCh0aGlzLmVtaXNzaW9ucywgZCA9PiBkLkVtaXNzaW9ucyksIDQwMDAwMDAwXSkKCiAgICAgIHJldHVybiB7CiAgICAgICAgeCwKICAgICAgICB5LAogICAgICAgIHhBeGlzLAogICAgICAgIHlBeGlzCiAgICAgIH0KICAgIH0sCiAgICBuZXdTY2FsZSAoKSB7CiAgICAgIHZhciBwYXJzZURhdGUgPSBkMy50aW1lUGFyc2UoJyVZJykKICAgICAgdGhpcy5lbWlzc2lvbnMuZm9yRWFjaChmdW5jdGlvbiAoZCkgewogICAgICAgIGQuZGF0ZSA9IHBhcnNlRGF0ZShkLlllYXIpCiAgICAgIH0pCiAgICAgIHZhciB4ID0gZDMKICAgICAgICAuc2NhbGVUaW1lKCkKICAgICAgICAuZG9tYWluKFtkMy5taW4odGhpcy5lbWlzc2lvbnMsIGQgPT4gZC5kYXRlKSwgZDMubWF4KHRoaXMuZW1pc3Npb25zLCBkID0+IGQuZGF0ZSldKQogICAgICAgIC5yYW5nZVJvdW5kKFswLCB0aGlzLmNoYXJ0RGVmYXVsdHMud2lkdGhdKQoKICAgICAgdmFyIHkgPSBkMwogICAgICAgIC5zY2FsZUxpbmVhcigpCiAgICAgICAgLmRvbWFpbihbMCwgNDAwMDAwMDBdKQogICAgICAgIC5yYW5nZShbdGhpcy5jaGFydERlZmF1bHRzLmhlaWdodCwgLTEwMF0pCgogICAgICBkMy5heGlzQm90dG9tKCkuc2NhbGUoeCkKICAgICAgZDMuYXhpc0xlZnQoKS5zY2FsZSh5KQoKICAgICAgdmFyIHhBeGlzID0gZDMKICAgICAgICAuYXhpc1RvcCgpCiAgICAgICAgLnNjYWxlKHgpCiAgICAgICAgLnRpY2tGb3JtYXQoZDMudGltZUZvcm1hdCgnJVknKSkKICAgICAgICAudGlja3MoZDMudGltZVllYXIuZXZlcnkoNSkpCgogICAgICB2YXIgeUF4aXMgPSBkMwogICAgICAgIC5heGlzUmlnaHQoKQogICAgICAgIC5zY2FsZSh5KQogICAgICAgIC50aWNrVmFsdWVzKFsxMDAwMDAwMCwgMjAwMDAwMDAsIDMwMDAwMDAwLCA0MDAwMDAwMF0pCiAgICAgICAgLnRpY2tTaXplKDgzMCkKICAgICAgICAudGlja1BhZGRpbmcoNikKCiAgICAgIHJldHVybiB7CiAgICAgICAgeCwKICAgICAgICB5LAogICAgICAgIHhBeGlzLAogICAgICAgIHlBeGlzCiAgICAgIH0KICAgIH0sCiAgICBnZXRUcm5zeCAoY2hhcnREZWZhdWx0cykgewogICAgICBjb25zdCB0ID0gJ3RyYW5zbGF0ZSgwLCcgKyB0aGlzLmNoYXJ0RGVmYXVsdHMuaGVpZ2h0ICsgJyknCiAgICAgIHJldHVybiB0CiAgICB9LAogICAgZ2V0VHJhbnNsYXRpb24gKGNoYXJ0RGVmYXVsdHMpIHsKICAgICAgdmFyIHRyID0gJ3RyYW5zbGF0ZSgnICsgMTAwICsgJywnICsgMjAwICsgJyknCiAgICAgIGlmICh0aGlzLnN0ZXAgPT09IDQpIHsKICAgICAgICB0ciA9ICd0cmFuc2xhdGUoJyArIC0zMCArICcsJyArIDI4MCArICcpJwogICAgICB9CiAgICAgIHJldHVybiB0cgogICAgfSwKICAgIGdldFdpZHRoIChjaGFydERlZmF1bHRzKSB7CiAgICAgIHZhciB3aWR0aCA9ICc5MCUnCiAgICAgIGlmICh0aGlzLnN0ZXAgPT09IDQpIHsKICAgICAgICB3aWR0aCA9ICcxMDAlJwogICAgICB9CiAgICAgIHJldHVybiB3aWR0aAogICAgfSwKICAgIGNhbGN1bGF0ZVBhdGggKCkgewogICAgICBjb25zdCBzY2FsZSA9IHRoaXMuZ2V0U2NhbGUoKQoKICAgICAgY29uc3QgcGF0aCA9IGQzCiAgICAgICAgLmxpbmUoKQogICAgICAgIC54KGQgPT4geyByZXR1cm4gc2NhbGUueChkLmRhdGUpIH0pCiAgICAgICAgLnkoZCA9PiB7IHJldHVybiBzY2FsZS55KGQuRW1pc3Npb25zKSB9KQogICAgICAgIC5jdXJ2ZShkMy5jdXJ2ZUNhdG11bGxSb20pCgogICAgICB0aGlzLmxpbmUgPSBwYXRoKHRoaXMuZW1pc3Npb25zKQogICAgfQogIH0sCiAgY29tcHV0ZWQ6IHsKICAgIC4uLm1hcFN0YXRlKHsKICAgICAgc3RlcDogc3RhdGUgPT4gc3RhdGUuc2Nyb2xseXRlbGxpbmcgPyBzdGF0ZS5zY3JvbGx5dGVsbGluZy5zdGVwIDogbnVsbAogICAgfSksCiAgICBpdGVtcyAoKSB7CiAgICAgIGNvbnN0IGFyZWFzID0gWydUcmFuc3BvcnRzJywgJ0luZHVzdHJ5JywgJ0J1aWxkaW5nJywgJ0VsZWN0cmljaXR5JywgJ090aGVyRW5lcmd5J10KICAgICAgdmFyIHNjYWxlID0gdGhpcy5nZXRTY2FsZSgpCiAgICAgIGlmICh0aGlzLnN0ZXAgPT09IDQpIHsKICAgICAgICBzY2FsZSA9IHRoaXMubmV3U2NhbGUoKQogICAgICB9CgogICAgICBjb25zdCBwYXJzZURhdGUgPSBkMy50aW1lUGFyc2UoJyVZJykKICAgICAgY29uc3QgZGF0YSA9IHRoaXMuc2VjdG9ycwoKICAgICAgZGF0YS5mb3JFYWNoKGZ1bmN0aW9uIChkKSB7CiAgICAgICAgZC5kYXRlID0gcGFyc2VEYXRlKGQuWWVhcikKICAgICAgfSkKCiAgICAgIHZhciBhcmVhRml4ZWQgPSBkMwogICAgICAgIC5hcmVhKCkKICAgICAgICAueChkID0+IHsgcmV0dXJuIHNjYWxlLngoZC5kYXRlKSB9KQogICAgICAgIC5jdXJ2ZShkMy5jdXJ2ZUNhdG11bGxSb20pCgogICAgICBjb25zdCBuZXdBcmVhcyA9IGFyZWFzLm1hcChmdW5jdGlvbiAoaXRlbSwgaSkgewogICAgICAgIGFyZWFGaXhlZAogICAgICAgICAgLnkwKGQgPT4gewogICAgICAgICAgICBsZXQgc3VtID0gMAogICAgICAgICAgICBmb3IgKGxldCBuID0gMDsgbiA8IGk7IG4rKykgewogICAgICAgICAgICAgIHN1bSA9IHN1bSArIGRbYXJlYXNbbl1dCiAgICAgICAgICAgIH0KICAgICAgICAgICAgcmV0dXJuIHNjYWxlLnkoc3VtKQogICAgICAgICAgfSkKICAgICAgICAgIC55MShkID0+IHsKICAgICAgICAgICAgbGV0IHN1bSA9IDAKICAgICAgICAgICAgZm9yIChsZXQgbiA9IDA7IG4gPD0gaTsgbisrKSB7CiAgICAgICAgICAgICAgc3VtID0gc3VtICsgZFthcmVhc1tuXV0KICAgICAgICAgICAgfQogICAgICAgICAgICByZXR1cm4gc2NhbGUueShzdW0pCiAgICAgICAgICB9KQogICAgICAgIHJldHVybiB7CiAgICAgICAgICBkOiBhcmVhRml4ZWQoZGF0YSksCiAgICAgICAgICBpZDogYXJlYXNbaV0KICAgICAgICB9CiAgICAgIH0pCgogICAgICByZXR1cm4gbmV3QXJlYXMKICAgIH0KICB9Cn0K"},{"version":3,"sources":["chart.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;AA2BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA","file":"chart.vue","sourceRoot":"src/components","sourcesContent":["<template>\n  <div>\n  <svg v-bind:width='chartWidth()' height='90%' viewBox='-30 0 900 1000'>\n    <g class='lineChart' v-bind:transform='translate()'>\n    <g class='stacked-emissions' v-if=\"step >=3 && step <=4\">\n        <path class=\"area\" v-for=\"(item, i) in items\" v-bind:key='i' :d='item.d' :id='item.id'/>\n    </g>\n      <g id=\"one-line-chart\" v-if=\"step <=3\">\n        <path class='line' :d='line'/>\n        <Axis class='yA' v-bind:scales='getScale().yAxis' v-bind:chartDefaults='chartDefaults' v-bind:data='emissions' v-bind:trns='trnsY'/>\n        <Axis class='xA' v-bind:scales='getScale().xAxis' v-bind:chartDefaults='chartDefaults' v-bind:data='emissions' v-bind:trns='trnsX()'/>\n        <Dotted class='lineDotted' :x1='0' :y1='43' :x2='215' :y2='43'/>\n        <Dotted class='lineDotted' :x1='215' :y1='43' :x2='618' :y2='400'/>\n        <Dotted class='lineDotted' :x1='215' :y1='43' :x2='435' :y2='400'/>\n        <GoalAnnotations/>\n        <PopUpLabel :transform='\"translate(310, 200)\"' goal='1.5°' v-if=\"step <=2\"/>\n        <PopUpLabel :transform='\"translate(430, 220)\"'goal='2.0°' v-if=\"step <=2\"/>\n      </g>\n      <g class='labels-sector' v-if=\"step ==3\"><LabelsLinechart/></g>\n    </g>\n  <chartanimated class='subsector-stacked' v-if=\"step >=3 && step <=4\"/>\n  </svg>\n  <!-- <p>{{step}}</p> -->\n  </div>\n</template>\n\n<script>\nimport * as d3 from 'd3'\nimport { mapState } from 'vuex'\nimport Axis from './axis.vue'\nimport dottedline from './dottedlines.vue'\nimport LabelsLinechart from './LabelsLinechart.vue'\nimport GoalAnnotations from './LinechartGoalAnnotations.vue'\nimport PopUpLabel from './LinechartPopUp.vue'\nimport chartanimated from './chartanimated.vue'\n\nimport emissionsData from '../assets/emissions.json'\nimport sectors from '../assets/emissions-stacked.json'\n\nexport default {\n  name: 'chart',\n  props: {\n    label: String\n  },\n  components: {\n    Axis,\n    Dotted: dottedline,\n    LabelsLinechart,\n    chartanimated,\n    GoalAnnotations,\n    PopUpLabel\n  },\n  data () {\n    return {\n      emissions: emissionsData,\n      sectors: sectors,\n      chartDefaults: {\n        width: 1000,\n        height: 400,\n        chartId: 'linechart-vue',\n        title: 'Emissions',\n        margin: {\n          top: 5,\n          right: 50,\n          bottom: 25,\n          left: 0\n        },\n        data: []\n      },\n      line: '',\n      translate: this.getTranslation,\n      translateLine: 'translate(0,0)',\n      trnsY: 'translate(0,0)',\n      trnsX: this.getTrnsx,\n      toggleClass: true,\n      chartWidth: this.getWidth\n    }\n  },\n  mounted () {\n    this.calculatePath()\n  },\n  methods: {\n    getScale () {\n      var parseDate = d3.timeParse('%Y')\n      this.emissions.forEach(function (d) {\n        d.date = parseDate(d.Year)\n      })\n      var x = d3\n        .scaleTime()\n        .domain([d3.min(this.emissions, d => d.date), parseDate(2100)])\n        .rangeRound([0, this.chartDefaults.width - 100])\n\n      var y = d3\n        .scaleLinear()\n        .domain([0, 40000000])\n        .range([this.chartDefaults.height, 0])\n\n      d3.axisBottom().scale(x)\n      d3.axisLeft().scale(y)\n\n      var xAxis = d3\n        .axisBottom()\n        .scale(x)\n        .tickSize(0)\n        .tickPadding(10)\n        .tickFormat(d3.timeFormat('%Y'))\n        .ticks(d3.timeYear.every(10))\n      //        .splice(1)\n\n      var yAxis = d3\n        .axisLeft()\n        .scale(y)\n        .tickValues([d3.max(this.emissions, d => d.Emissions), 40000000])\n\n      return {\n        x,\n        y,\n        xAxis,\n        yAxis\n      }\n    },\n    newScale () {\n      var parseDate = d3.timeParse('%Y')\n      this.emissions.forEach(function (d) {\n        d.date = parseDate(d.Year)\n      })\n      var x = d3\n        .scaleTime()\n        .domain([d3.min(this.emissions, d => d.date), d3.max(this.emissions, d => d.date)])\n        .rangeRound([0, this.chartDefaults.width])\n\n      var y = d3\n        .scaleLinear()\n        .domain([0, 40000000])\n        .range([this.chartDefaults.height, -100])\n\n      d3.axisBottom().scale(x)\n      d3.axisLeft().scale(y)\n\n      var xAxis = d3\n        .axisTop()\n        .scale(x)\n        .tickFormat(d3.timeFormat('%Y'))\n        .ticks(d3.timeYear.every(5))\n\n      var yAxis = d3\n        .axisRight()\n        .scale(y)\n        .tickValues([10000000, 20000000, 30000000, 40000000])\n        .tickSize(830)\n        .tickPadding(6)\n\n      return {\n        x,\n        y,\n        xAxis,\n        yAxis\n      }\n    },\n    getTrnsx (chartDefaults) {\n      const t = 'translate(0,' + this.chartDefaults.height + ')'\n      return t\n    },\n    getTranslation (chartDefaults) {\n      var tr = 'translate(' + 100 + ',' + 200 + ')'\n      if (this.step === 4) {\n        tr = 'translate(' + -30 + ',' + 280 + ')'\n      }\n      return tr\n    },\n    getWidth (chartDefaults) {\n      var width = '90%'\n      if (this.step === 4) {\n        width = '100%'\n      }\n      return width\n    },\n    calculatePath () {\n      const scale = this.getScale()\n\n      const path = d3\n        .line()\n        .x(d => { return scale.x(d.date) })\n        .y(d => { return scale.y(d.Emissions) })\n        .curve(d3.curveCatmullRom)\n\n      this.line = path(this.emissions)\n    }\n  },\n  computed: {\n    ...mapState({\n      step: state => state.scrollytelling ? state.scrollytelling.step : null\n    }),\n    items () {\n      const areas = ['Transports', 'Industry', 'Building', 'Electricity', 'OtherEnergy']\n      var scale = this.getScale()\n      if (this.step === 4) {\n        scale = this.newScale()\n      }\n\n      const parseDate = d3.timeParse('%Y')\n      const data = this.sectors\n\n      data.forEach(function (d) {\n        d.date = parseDate(d.Year)\n      })\n\n      var areaFixed = d3\n        .area()\n        .x(d => { return scale.x(d.date) })\n        .curve(d3.curveCatmullRom)\n\n      const newAreas = areas.map(function (item, i) {\n        areaFixed\n          .y0(d => {\n            let sum = 0\n            for (let n = 0; n < i; n++) {\n              sum = sum + d[areas[n]]\n            }\n            return scale.y(sum)\n          })\n          .y1(d => {\n            let sum = 0\n            for (let n = 0; n <= i; n++) {\n              sum = sum + d[areas[n]]\n            }\n            return scale.y(sum)\n          })\n        return {\n          d: areaFixed(data),\n          id: areas[i]\n        }\n      })\n\n      return newAreas\n    }\n  }\n}\n</script>\n\n<!-- Add \"scoped\" attribute to limit CSS to this component only -->\n<style scoped lang=\"scss\">\n// @import \"library/src/style/base.scss\";\n@import \"library/src/style/variables.scss\";\n\n.lineDotted {\n  stroke: #b1b1b1;\n  stroke-dasharray: 4;\n}\n\n.line {\n  stroke: darken( $color-yellow, 50% );\n  fill: none;\n}\n\n.area {\n  //stroke: darken( $color-green, 50% );\n}\n\n#Electricity {\n  fill: darken( $color-yellow, 5% );\n}\n\n#Building {\n  fill: darken( $color-yellow, 20% );\n}\n\n#Transports {\n  fill: darken( $color-yellow, 40% );\n}\n\n#OtherEnergy {\n  fill: desaturate( $color-yellow, 60% );\n}\n\n#Industry {\n  fill: darken($color-yellow, 30%);\n}\n\n</style>\n"]}]}