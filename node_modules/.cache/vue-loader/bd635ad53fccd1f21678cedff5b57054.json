{"remainingRequest":"/Users/francescamorini/projects/transition-module/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/francescamorini/projects/transition-module/src/components/marimekko-emissions.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/francescamorini/projects/transition-module/src/components/marimekko-emissions.vue","mtime":1572536223177},{"path":"/Users/francescamorini/projects/transition-module/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/francescamorini/projects/transition-module/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/francescamorini/projects/transition-module/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/francescamorini/projects/transition-module/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["marimekko-emissions.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;AA4BA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA","file":"marimekko-emissions.vue","sourceRoot":"src/components","sourcesContent":["<template>\n  <div class=\"marimekko\">\n  <svg width='100%' height='100%' viewBox='0 0 1100 1000'>\n    <g transform='translate(70,120)' class='rects'>\n      <g id='sector-labels'>\n        <text v-for='(label) in sectorLabels' v-bind:key='label.sector' class='sectorlabel' x='980' :y='label.position' >{{label.sector[0]+'.'}}</text>\n      </g>\n        <rect v-for=\"(rect, i) in rects\" v-bind:key='i' :height='rect.height' :width='rect.emissions' :fill='rect.color' :x='rect.distance' :y='rect.position' class='rect' :class='rect.classes ' :id='rect.application'/>\n      <g id='emissions-labels' v-if='step <= 5'>\n      <line v-for=\"(rect, a) in rects\" :x1='rect.distance' :x2='rect.distance' :y1='rect.position + rect.height' :y2='rect.position + rect.height + 10' class='bars'/>\n      <text v-for=\"(rect, b) in rects\" :x='rect.distance' :y='rect.position + rect.height + 25'>{{rect.application}}</text>\n      </g>\n      <g id='carriers-labels' v-if='step >= 6'>\n      <CarrierPath/>\n      <text v-for=\"(energyCarrLabel, i) in energyCarrLabels\" :id='energyCarrLabel.carrier' :x='energyCarrLabel.position' :y='chartDefaults.height -30' v-bind:key='i' @click='select($event)'>{{energyCarrLabel.carrier}}</text>\n      </g>\n    </g>\n    <!-- Here general axis are created -->\n    <axis transform='translate(70,60)' class='xA' v-bind:scales='getScale().xAxis'  v-bind:chartDefaults='chartDefaults' v-bind:data='subsectors'/>\n    <text transform='translate(430,40)' class='axislabel' v-if='step == 5'>Applications % of emissions (per sector)</text>\n    <text transform='translate(430,40)' class='axislabel' v-if='step >= 6'>Energy Carriers % of produced energy (per sector)</text>\n    <text transform='translate(20,500) rotate(-90)' class='axislabel'>2015 Total GHG Emissions</text>\n    <axis transform='translate(40,120)' class='yA' v-bind:scales='getScale().yAxis'  v-bind:chartDefaults='chartDefaults' v-bind:data='subsectors'/>\n  </svg>\n  </div>\n</template>\n\n<script>\nimport * as d3 from 'd3'\nimport { mapState } from 'vuex'\nimport Axis from './axis.vue'\nimport CarrierPath from './carriersSelPaths.vue'\n\nimport emissionsSubsectors from '../assets/subsectors-emissions-nest.json'\nimport energyCarriers from '../assets/energy-carriers-world.json'\n\nexport default {\n  name: 'marimekkoEmissions',\n  components: {\n    axis: Axis,\n    CarrierPath\n  },\n  data () {\n    return {\n      subsectors: emissionsSubsectors,\n      carriers: energyCarriers,\n      chartDefaults: {\n        width: 1000,\n        height: 700,\n        chartId: 'subemissions',\n        title: 'Emissions',\n        margin: {\n          top: 5,\n          right: 50,\n          bottom: 25,\n          left: 0\n        }\n      },\n      emissionsLabels: this.visibleLabels,\n      selected: null\n    }\n  },\n  methods: {\n    select (event) {\n      var targetId = event.currentTarget.id\n      if (this.selected === targetId) this.selected = null\n      else this.selected = targetId\n    },\n    visibleLabels () {\n      var visible\n      if (this.step === 5) {\n        visible = true\n        return visible\n      } else {\n        visible = false\n        return visible\n      }\n    },\n    getScale () {\n      const subsectors = this.subsectors\n      const carriers = this.carriers\n      const chartDefaults = this.chartDefaults\n      const sectors = ['Electricity', 'Building', 'Industry', 'Transport']\n      var filterEle = subsectors.filter(function (d) { return d.Sector === 'Electricity' })\n      var filterBuild = subsectors.filter(function (d) { return d.Sector === 'Building' })\n      var filterInd = subsectors.filter(function (d) { return d.Sector === 'Industry' })\n      var filterTr = subsectors.filter(function (d) { return d.Sector === 'Transport' })\n\n      var xPerc = d3\n        .scaleLinear()\n        .domain([0, 1])\n        .rangeRound([0, this.chartDefaults.width - 50])\n\n      var xPercLabels = d3\n        .scaleLinear()\n        .domain([0, 10])\n        .rangeRound([0, this.chartDefaults.width - 100])\n\n      var x = d3\n        .scaleLinear()\n        .domain([0, filterEle.reduce((sum, val) => sum + val.Emissions, 0)])\n        .rangeRound([0, this.chartDefaults.width - 50])\n\n      var xB = d3\n        .scaleLinear()\n        .domain([0, filterBuild.reduce((sum, val) => sum + val.Emissions, 0)])\n        .rangeRound([0, this.chartDefaults.width - 50])\n\n      var xI = d3\n        .scaleLinear()\n        .domain([0, filterInd.reduce((sum, val) => sum + val.Emissions, 0)])\n        .rangeRound([0, this.chartDefaults.width - 50])\n\n      var xT = d3\n        .scaleLinear()\n        .domain([0, filterTr.reduce((sum, val) => sum + val.Emissions, 0)])\n        .rangeRound([0, this.chartDefaults.width - 50])\n\n      var scaleXCar = sectors.map(function (item, i) {\n        var scaleArray\n        var carriersScale = carriers.filter(function (d) { return d.Sector === item })\n        for (var n = 0; n <= i; n++) {\n          scaleArray = d3\n            .scaleLinear()\n            .domain([0, carriersScale.reduce((sum, val) => sum + val.Emissions, 0)])\n            .rangeRound([0, chartDefaults.width - 50])\n        }\n        return scaleArray\n      })\n\n      var y = d3\n        .scaleLinear()\n        .domain([0, subsectors.reduce((sum, val) => sum + val.Emissions, 0)])\n        .range([0, this.chartDefaults.height - 300])\n\n      var yA = d3\n        .scaleLinear()\n        .domain([0, subsectors.reduce((sum, val) => sum + val.Emissions, 0)])\n        .range([0, this.chartDefaults.height - 90])\n\n      d3.axisTop().scale(xI)\n      d3.axisRight().scale(yA)\n\n      var formatPercent = d3.format('.0%')\n\n      var xAxis = d3\n        .axisTop()\n        .scale(xPerc)\n        .tickSize(0)\n        .tickPadding(10)\n        .tickValues([0, 1])\n        .tickFormat(formatPercent)\n\n      var yAxis = d3\n        .axisRight()\n        .scale(yA)\n        .ticks(0)\n\n      return {\n        x,\n        xAxis,\n        y,\n        xB,\n        xI,\n        xT,\n        scaleXCar,\n        xPerc,\n        yAxis,\n        xPercLabels\n      }\n    }\n  },\n  // this computed property needs to be added for the scrollytelling to function\n  computed: {\n    ...mapState({\n      step: state => state.scrollytelling ? state.scrollytelling.step : null\n    }),\n    datum () {\n      var step = this.step\n      var data = this.subsectors\n      if (step >= 6) { return this.carriers }\n      return data\n    },\n    // this function creates an array to handle single squares and their vertical height and position on the screen\n    rects () {\n      var scale = this.getScale()\n      var dataHeight = this.subsectors\n      var data = this.datum\n      var step = this.step\n      var selected = this.selected\n\n      const subemissionArray = data.map(function (item, i) {\n        const emissionsValue = d => {\n          let sum = data[0].Emissions\n          for (let n = 0; n < i; n++) {\n            sum = item.Emissions\n          }\n          if (step === 5) {\n            if (item.Sector === 'Electricity') {\n              return scale.x(sum)\n            } else if (item.Sector === 'Building') {\n              return scale.xB(sum)\n            } else if (item.Sector === 'Industry') {\n              return scale.xI(sum)\n            } else if (item.Sector === 'Transport') {\n              return scale.xT(sum)\n            }\n          } else if (step >= 6) {\n            if (item.Sector === 'Electricity') {\n              return scale.scaleXCar[0](sum)\n            } else if (item.Sector === 'Building') {\n              return scale.scaleXCar[1](sum)\n            } else if (item.Sector === 'Industry') {\n              return scale.scaleXCar[2](sum)\n            } else if (item.Sector === 'Transport') {\n              return scale.scaleXCar[3](sum)\n            }\n          }\n        }\n\n        const distanceValue = d => {\n          let total = 0\n          for (let n = 0; n < i; n++) {\n            if (item.Sector === data[n].Sector) {\n              total = total + data[n].Emissions\n            }\n          }\n          if (step === 5) {\n            if (item.Sector === 'Electricity') {\n              return scale.x(total)\n            } else if (item.Sector === 'Building') {\n              return scale.xB(total)\n            } else if (item.Sector === 'Industry') {\n              return scale.xI(total)\n            } else if (item.Sector === 'Transport') {\n              return scale.xT(total)\n            }\n          } else if (step >= 6) {\n            if (item.Sector === 'Electricity') {\n              return scale.scaleXCar[0](total)\n            } else if (item.Sector === 'Building') {\n              return scale.scaleXCar[1](total)\n            } else if (item.Sector === 'Industry') {\n              return scale.scaleXCar[2](total)\n            } else if (item.Sector === 'Transport') {\n              return scale.scaleXCar[3](total)\n            }\n          }\n        }\n\n        const heightValue = d => {\n          let filterEle = dataHeight.filter(function (d) { return d.Sector === 'Electricity' })\n          let filterBuild = dataHeight.filter(function (d) { return d.Sector === 'Building' })\n          let filterInd = dataHeight.filter(function (d) { return d.Sector === 'Industry' })\n          let filterTr = dataHeight.filter(function (d) { return d.Sector === 'Transport' })\n          let height = 0\n          for (let n = 0; n <= i; n++) {\n            if (item.Sector === 'Electricity') {\n              height = filterEle.reduce((sum, val) => sum + val.Emissions, 0)\n            } else if (item.Sector === 'Building') {\n              height = filterBuild.reduce((sum, val) => sum + val.Emissions, 0)\n            } else if (item.Sector === 'Industry') {\n              height = filterInd.reduce((sum, val) => sum + val.Emissions, 0)\n            } else if (item.Sector === 'Transport') {\n              height = filterTr.reduce((sum, val) => sum + val.Emissions, 0)\n            }\n          }\n\n          return scale.y(height)\n        }\n\n        const positionValue = d => {\n          var basisPosition = heightValue()\n          if (item.Sector === 'Electricity') {\n            basisPosition = basisPosition * 0\n          } if (item.Sector === 'Industry') {\n            basisPosition = basisPosition * 2.7\n          } if (item.Sector === 'Building') {\n            basisPosition = basisPosition * 4.5\n          } if (item.Sector === 'Transport') {\n            basisPosition = basisPosition * 5\n          }\n          return basisPosition\n        }\n\n        const rectColors = d => {\n          var color = '#000000'\n          if (step === 5) {\n            if (item.Sector === 'Electricity') {\n              color = '#ffc027'\n            } else if (item.Sector === 'Industry') {\n              color = '#d99900'\n            } else if (item.Sector === 'Building') {\n              color = '#a67500'\n            } else if (item.Sector === 'Transport') {\n              color = '#735100'\n            }\n          } else if (step >= 6) {\n            if (item.Sector === 'Electricity') {\n              color = '#58e4a2'\n            } else if (item.Sector === 'Industry') {\n              color = '#00a66e'\n            } else if (item.Sector === 'Building') {\n              color = '#00c58c'\n            } else if (item.Sector === 'Transport') {\n              color = '#007337'\n            }\n          }\n          return color\n        }\n\n        return {\n          application: item.Application,\n          sector: item.Sector.toLowerCase(),\n          emissions: emissionsValue(data),\n          distance: distanceValue(data),\n          position: positionValue(data),\n          height: heightValue(dataHeight),\n          color: rectColors(data),\n          classes: [item.Application, item.Sector.toLowerCase(), { hidden: selected !== null && selected !== item.Application }]\n        }\n      })\n      return subemissionArray\n    },\n    // this other functions specifically handle sector labels for single bars\n    sectorLabels () {\n      const labels = ['Electricity', 'Building', 'Industry', 'Transport']\n      const chartArray = this.rects\n      const Electricity = chartArray.filter(function (d) { return d.sector === 'electricity' })\n      const Industry = chartArray.filter(function (d) { return d.sector === 'industry' })\n      const Building = chartArray.filter(function (d) { return d.sector === 'building' })\n      const Transport = chartArray.filter(function (d) { return d.sector === 'transport' })\n\n      const newLabels = labels.map(function (item, i) {\n        const labelNames = d => {\n          let names\n          for (let n = 0; n <= i; n++) {\n            names = item\n          }\n          return names\n        }\n\n        const positionValue = d => {\n          let position\n          for (let n = 0; n <= i; n++) {\n            if (item === 'Electricity') {\n              position = Electricity[0].position + Building[0].position / 2.5\n            } else if (item === 'Building') {\n              position = Building[0].position + Building[0].position / 7\n            } else if (item === 'Industry') {\n              position = Industry[0].position + Building[0].position / 2.8\n            } else if (item === 'Transport') {\n              position = Transport[0].position + Building[0].position / 3\n            }\n            return position\n          }\n        }\n        return {\n          sector: labelNames(labels),\n          position: positionValue(labels)\n        }\n      })\n      return newLabels\n    },\n    energyCarrLabels () {\n      const data = this.carriers\n      var scale = this.getScale()\n      var newData = data.slice(33)\n\n      const carrLabels = newData.map(function (item, i) {\n        const singleCarriers = d => {\n          let single\n          for (let n = 0; n <= i; n++) {\n            single = item.Application\n          }\n          return single\n        }\n\n        const posLabels = d => {\n          let position = 0\n          for (let n = 0; n < i; n++) {\n            position = position + 1\n          }\n          return scale.xPercLabels(position)\n        }\n        return {\n          carrier: singleCarriers(newData),\n          position: posLabels(newData)\n        }\n      })\n\n      return carrLabels\n    }\n  }\n}\n</script>\n\n<!-- Add \"scoped\" attribute to limit CSS to this component only -->\n<style scoped lang=\"scss\">\n@import \"library/src/style/variables.scss\";\n\n.bars{\n  stroke: black;\n  stroke-width: 0.7px;\n}\n.electricity {\n  stroke: darken( $color-violet, 5% );\n}\n\n.industry {\n  stroke: darken( $color-violet, 30% );\n\n}\n\n.building{\n  stroke: darken( $color-violet, 20% );\n}\n\n.transport{\n  stroke: darken( $color-violet, 40% );\n}\n\n.sectorlabel {\n  font-size: 18px;\n  font-family: $font-sans;\n}\n\n.hidden {\n  fill: white;\n  opacity: 0.5;\n}\n</style>\n"]}]}