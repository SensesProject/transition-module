{"remainingRequest":"/Users/francescamorini/projects/transition-v2/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/Users/francescamorini/projects/transition-v2/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/francescamorini/projects/transition-v2/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/francescamorini/projects/transition-v2/src/App.vue?vue&type=template&id=7ba5bd90&","dependencies":[{"path":"/Users/francescamorini/projects/transition-v2/src/App.vue","mtime":1571662067251},{"path":"/Users/francescamorini/projects/transition-v2/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/francescamorini/projects/transition-v2/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/Users/francescamorini/projects/transition-v2/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/francescamorini/projects/transition-v2/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}