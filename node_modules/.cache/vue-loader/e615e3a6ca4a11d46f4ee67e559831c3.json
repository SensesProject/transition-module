{"remainingRequest":"/Users/francescamorini/projects/transition-module-senses/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/francescamorini/projects/transition-module-senses/src/components/subcomponents/Dragline.vue?vue&type=style&index=0&id=2282cd1e&scoped=true&lang=scss&","dependencies":[{"path":"/Users/francescamorini/projects/transition-module-senses/src/components/subcomponents/Dragline.vue","mtime":1574420412321},{"path":"/Users/francescamorini/projects/transition-module-senses/node_modules/css-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/francescamorini/projects/transition-module-senses/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":499162500000},{"path":"/Users/francescamorini/projects/transition-module-senses/node_modules/postcss-loader/src/index.js","mtime":499162500000},{"path":"/Users/francescamorini/projects/transition-module-senses/node_modules/sass-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/francescamorini/projects/transition-module-senses/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/francescamorini/projects/transition-module-senses/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKLmRyYWdsaW5lUmVjdCB7CiAgZmlsbDogbm9uZTsKICBwb2ludGVyLWV2ZW50czogYWxsOwp9CgpjaXJjbGUgewogIGZpbGw6ICNmZmZmZmY7CiAgc3Ryb2tlOiAjMDAwOwp9Cgp0ZXh0IHsKICBmb250LXNpemU6IDExcHg7Cn0KCnJlY3QgewogIGZpbGw6IHdoaXRlOwogIG9wYWNpdHk6IDAuNTsKfQo="},{"version":3,"sources":["Dragline.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAyDA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA","file":"Dragline.vue","sourceRoot":"src/components/subcomponents","sourcesContent":["<template>\n  <g class=\"dragline\">\n    <line :x1=\"x\" y1=\"0\" :x2=\"x\" :y2=\"height\" stroke=\"#000\" />\n    <rect\n      x=\"0\"\n      y=\"0\"\n      :width=\"width\"\n      :height=\"height\"\n      class=\"draglineRect\"\n      @mousemove=\"clickDragline\"\n    />\n    <g\n      v-for=\"sector of sectors\"\n      :key=\"sector.key\"\n      :transform=\"'translate(' + x + ',' + scales.y(sector.data[1]) + ')'\"\n    >\n      <text :x=\"x + 2\">{{ sector.value }},{{ sector.key }}</text>\n      <circle r=\"3\" />\n    </g>\n  </g>\n</template>\n\n<script>\nexport default {\n  name: 'Dragline',\n  props: ['width', 'height', 'scales', 'data', 'margin'],\n  data () {\n    return {\n      x: 10\n    }\n  },\n  computed: {\n    year: function () {\n      return parseInt(this.scales.x.invert(this.x))\n    },\n    sectors: function () {\n      return this.data.map(d => {\n        const data = d.data.find(e => e.data.Year === this.year)\n        const { key } = d.data\n        return {\n          key,\n          data,\n          value: data.data[key]\n        }\n      })\n    }\n  },\n  methods: {\n    clickDragline: function (e) {\n      this.x = e.layerX - this.margin.left\n      // console.log(this.margin.left, e.layerX)\n    }\n  }\n}\n</script>\n\n<style scoped lang=\"scss\">\n.draglineRect {\n  fill: none;\n  pointer-events: all;\n}\n\ncircle {\n  fill: #ffffff;\n  stroke: #000;\n}\n\ntext {\n  font-size: 11px;\n}\n\nrect {\n  fill: white;\n  opacity: 0.5;\n}\n</style>\n"]}]}