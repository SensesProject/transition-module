{"remainingRequest":"/Users/francescamorini/projects/transition-module/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/francescamorini/projects/transition-module/src/components/chartanimated.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/francescamorini/projects/transition-module/src/components/chartanimated.vue","mtime":1572536223171},{"path":"/Users/francescamorini/projects/transition-module/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/francescamorini/projects/transition-module/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/francescamorini/projects/transition-module/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/francescamorini/projects/transition-module/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:Ly8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KCmltcG9ydCAqIGFzIGQzIGZyb20gJ2QzJwppbXBvcnQgeyBtYXBTdGF0ZSB9IGZyb20gJ3Z1ZXgnCmltcG9ydCBBeGlzIGZyb20gJy4vYXhpcy52dWUnCmltcG9ydCBBbmltYXRlZGN1cnNvciBmcm9tICcuL2FuaW1hdGVkY3Vyc29yLnZ1ZScKaW1wb3J0IFBvcFVwUmlnaHQgZnJvbSAnLi9MaW5lY2hhcnRQb3BVcC1yaWdodC52dWUnCgppbXBvcnQgZW1pc3Npb25zRGF0YSBmcm9tICcuLi9hc3NldHMvZW1pc3Npb25zLmpzb24nCmltcG9ydCBzZWN0b3JzIGZyb20gJy4uL2Fzc2V0cy9lbWlzc2lvbnMtc3RhY2tlZC5qc29uJwppbXBvcnQgc3ViRW1pc3Npb25zIGZyb20gJy4uL2Fzc2V0cy9zdWJlbWlzc2lvbnMuanNvbicKCmV4cG9ydCBkZWZhdWx0IHsKICBuYW1lOiAnY2hhcnRhbmltYXRlZCcsCiAgY29tcG9uZW50czogewogICAgQXhpcywKICAgIEFuaW1hdGVkY3Vyc29yLAogICAgUG9wVXBSaWdodAogIH0sCiAgZGF0YSAoKSB7CiAgICByZXR1cm4gewogICAgICBlbWlzc2lvbnM6IGVtaXNzaW9uc0RhdGEsCiAgICAgIHNlY3RvcnM6IHNlY3RvcnMsCiAgICAgIHN1YmVtaXNzaW9uczogc3ViRW1pc3Npb25zLAogICAgICBjaGFydERlZmF1bHRzOiB7CiAgICAgICAgd2lkdGg6IDEwMDAsCiAgICAgICAgaGVpZ2h0OiA0MDAsCiAgICAgICAgY2hhcnRJZDogJ2xpbmVjaGFydC12dWUnLAogICAgICAgIHRpdGxlOiAnRW1pc3Npb25zJywKICAgICAgICBtYXJnaW46IHsKICAgICAgICAgIHRvcDogNSwKICAgICAgICAgIHJpZ2h0OiA1MCwKICAgICAgICAgIGJvdHRvbTogMjUsCiAgICAgICAgICBsZWZ0OiAwCiAgICAgICAgfSwKICAgICAgICBkYXRhOiBbXQogICAgICB9LAogICAgICBsaW5lOiAnJywKICAgICAgdHJhbnNsYXRlOiB0aGlzLmdldFRyYW5zbGF0aW9uLAogICAgICB0cmFuc2xhdGVMaW5lOiAndHJhbnNsYXRlKDAsMCknLAogICAgICB0cm5zWTogJ3RyYW5zbGF0ZSgwLDApJywKICAgICAgdHJuc1g6IHRoaXMuZ2V0VHJuc3gsCiAgICAgIHRvZ2dsZUNsYXNzOiB0cnVlLAogICAgICBjaGFydFdpZHRoOiB0aGlzLmdldFdpZHRoCiAgICB9CiAgfSwKICBtZXRob2RzOiB7CiAgICBuZXdTY2FsZSAoKSB7CiAgICAgIHZhciBwYXJzZURhdGUgPSBkMy50aW1lUGFyc2UoJyVZJykKICAgICAgdGhpcy5lbWlzc2lvbnMuZm9yRWFjaChmdW5jdGlvbiAoZCkgewogICAgICAgIGQuZGF0ZSA9IHBhcnNlRGF0ZShkLlllYXIpCiAgICAgIH0pCiAgICAgIHZhciB4ID0gZDMKICAgICAgICAuc2NhbGVUaW1lKCkKICAgICAgICAuZG9tYWluKFtkMy5taW4odGhpcy5lbWlzc2lvbnMsIGQgPT4gZC5kYXRlKSwgZDMubWF4KHRoaXMuZW1pc3Npb25zLCBkID0+IGQuZGF0ZSldKQogICAgICAgIC5yYW5nZVJvdW5kKFswLCB0aGlzLmNoYXJ0RGVmYXVsdHMud2lkdGhdKQoKICAgICAgdmFyIHkgPSBkMwogICAgICAgIC5zY2FsZUxpbmVhcigpCiAgICAgICAgLmRvbWFpbihbMCwgNDAwMDAwMDBdKQogICAgICAgIC5yYW5nZShbdGhpcy5jaGFydERlZmF1bHRzLmhlaWdodCwgLTEwMF0pCgogICAgICBkMy5heGlzQm90dG9tKCkuc2NhbGUoeCkKICAgICAgZDMuYXhpc0xlZnQoKS5zY2FsZSh5KQoKICAgICAgdmFyIHhBeGlzID0gZDMKICAgICAgICAuYXhpc0JvdHRvbSgpCiAgICAgICAgLnNjYWxlKHgpCiAgICAgICAgLnRpY2tTaXplKDApCiAgICAgICAgLnRpY2tGb3JtYXQoZDMudGltZUZvcm1hdCgnJVknKSkKICAgICAgICAudGlja3MoZDMudGltZVllYXIuZXZlcnkoNSkpCgogICAgICB2YXIgeUF4aXMgPSBkMwogICAgICAgIC5heGlzUmlnaHQoKQogICAgICAgIC5zY2FsZSh5KQogICAgICAgIC50aWNrVmFsdWVzKFsxMDAwMDAwMCwgMjAwMDAwMDAsIDMwMDAwMDAwLCA0MDAwMDAwMF0pCiAgICAgICAgLnRpY2tTaXplKDgzMCkKICAgICAgICAudGlja1BhZGRpbmcoNikKCiAgICAgIHJldHVybiB7CiAgICAgICAgeCwKICAgICAgICB5LAogICAgICAgIHhBeGlzLAogICAgICAgIHlBeGlzCiAgICAgIH0KICAgIH0sCiAgICAvLyB0aGlzIHNldCBvZiBmdW5jdGlvbnMgYXJlIHRyYW5zZm9ybWluZyB0aGUgc2NhbGUgb2YgdGhlIGdyYXBoIGZyb20gc3RlcCAzIGFuZCA0CiAgICBnZXRUcm5zeCAoY2hhcnREZWZhdWx0cykgewogICAgICBjb25zdCB0ID0gJ3RyYW5zbGF0ZSgwLCcgKyB0aGlzLmNoYXJ0RGVmYXVsdHMuaGVpZ2h0ICsgJyknCiAgICAgIHJldHVybiB0CiAgICB9LAogICAgZ2V0VHJhbnNsYXRpb24gKGNoYXJ0RGVmYXVsdHMpIHsKICAgICAgdmFyIHRyID0gJ3RyYW5zbGF0ZSgnICsgMTAwICsgJywnICsgMjAwICsgJyknCiAgICAgIGlmICh0aGlzLnN0ZXAgPT09IDQpIHsKICAgICAgICB0ciA9ICd0cmFuc2xhdGUoJyArIC0zMCArICcsJyArIDI4MCArICcpJwogICAgICB9CiAgICAgIHJldHVybiB0cgogICAgfSwKICAgIGdldFdpZHRoIChjaGFydERlZmF1bHRzKSB7CiAgICAgIHZhciB3aWR0aCA9ICc5MCUnCiAgICAgIGlmICh0aGlzLnN0ZXAgPT09IDQpIHsKICAgICAgICB3aWR0aCA9ICcxMDAlJwogICAgICB9CiAgICAgIHJldHVybiB3aWR0aAogICAgfQogIH0sCiAgLy8gdGhpcyBjb21wdXRlZCBwcm9wZXJ0eSBuZWVkcyB0byBiZSBhZGRlZCBmb3IgdGhlIHNjcm9sbHl0ZWxsaW5nIHRvIGZ1bmN0aW9uCiAgY29tcHV0ZWQ6IHsKICAgIC4uLm1hcFN0YXRlKHsKICAgICAgc3RlcDogc3RhdGUgPT4gc3RhdGUuc2Nyb2xseXRlbGxpbmcgPyBzdGF0ZS5zY3JvbGx5dGVsbGluZy5zdGVwIDogbnVsbAogICAgfSksCi8vIHRoaXMgZnVuY3Rpb24gcmV0dXJuIGFuIGFycmF5IHdpdGggcGF0aHMgZm9yIHRoZSBzdGFja2VkIGJhcmNoYXJ0CiAgICBpdGVtcyAoKSB7CiAgICAgIGNvbnN0IGFyZWFzID0gWydBdmlhdGlvbicsICdSb2FkJywgJ090aGVyJywgJ1NoaXBwaW5nJywgJ0NvbWJ1c3Rpb24nLCAnUHJvZHVjdGlvbicsICdTb2x2ZW50cycsICdPdGhlclByb2MnLCAnSW5kV2FzdGUnLCAnQ29tbVJlcycsICdBZ3JpY3VsdHVyZScsICdQdWJsaWMnLCAnQXV0b3Byb2R1Y2VkJ10KCiAgICAgIGNvbnN0IHNjYWxlID0gdGhpcy5uZXdTY2FsZSgpCgogICAgICBjb25zdCBwYXJzZURhdGUgPSBkMy50aW1lUGFyc2UoJyVZJykKICAgICAgY29uc3QgZGF0YSA9IHRoaXMuc3ViZW1pc3Npb25zCgogICAgICBkYXRhLmZvckVhY2goZnVuY3Rpb24gKGQpIHsKICAgICAgICBkLmRhdGUgPSBwYXJzZURhdGUoZC5ZZWFyKQogICAgICB9KQoKICAgICAgdmFyIGFyZWFGaXhlZCA9IGQzCiAgICAgICAgLmFyZWEoKQogICAgICAgIC54KGQgPT4geyByZXR1cm4gc2NhbGUueChkLmRhdGUpIH0pCiAgICAgICAgLmN1cnZlKGQzLmN1cnZlQ2F0bXVsbFJvbSkKCiAgICAgIGNvbnN0IG5ld0FyZWFzID0gYXJlYXMubWFwKGZ1bmN0aW9uIChpdGVtLCBpKSB7CiAgICAgICAgYXJlYUZpeGVkCiAgICAgICAgICAueTAoZCA9PiB7CiAgICAgICAgICAgIGxldCBzdW0gPSAwCiAgICAgICAgICAgIGZvciAobGV0IG4gPSAwOyBuIDwgaTsgbisrKSB7CiAgICAgICAgICAgICAgc3VtID0gc3VtICsgZFthcmVhc1tuXV0KICAgICAgICAgICAgfQogICAgICAgICAgICByZXR1cm4gc2NhbGUueShzdW0pCiAgICAgICAgICB9KQogICAgICAgICAgLnkxKGQgPT4gewogICAgICAgICAgICBsZXQgc3VtID0gMAogICAgICAgICAgICBmb3IgKGxldCBuID0gMDsgbiA8PSBpOyBuKyspIHsKICAgICAgICAgICAgICBzdW0gPSBzdW0gKyBkW2FyZWFzW25dXQogICAgICAgICAgICB9CiAgICAgICAgICAgIHJldHVybiBzY2FsZS55KHN1bSkKICAgICAgICAgIH0pCiAgICAgICAgcmV0dXJuIHsKICAgICAgICAgIGQ6IGFyZWFGaXhlZChkYXRhKSwKICAgICAgICAgIGlkOiBhcmVhc1tpXQogICAgICAgIH0KICAgICAgfSkKCiAgICAgIHJldHVybiBuZXdBcmVhcwogICAgfQogIH0KfQo="},{"version":3,"sources":["chartanimated.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;AAgfile":"chartanimated.vue","sourceRoot":"src/components","sourcesContent":["<template>\n<g class=\"animated-subsectors\" v-if=\"step === 4\">\n    <g class='substacked' v-bind:transform='translate()'>\n    <g class='stacked-SubEmissions' v-if=\"step >=3 && step <=4\" clip-path=\"url(#cut-off-graph)\">\n        <path class=\"subemissions\" v-for=\"(item, i) in items\" v-bind:key='i' :d='item.d' :id='item.id'/>\n    </g>\n    <g class=\"axis-step4\" v-if=\"step == 4\">\n      <Axis class='xA' v-bind:scales='newScale().xAxis' v-bind:chartDefaults='chartDefaults' v-bind:data='emissions' v-bind:trns='trnsX()'/>\n      <Axis class='yA' v-bind:scales='newScale().yAxis' v-bind:chartDefaults='chartDefaults' v-bind:data='emissions' v-bind:trns='trnsY'/>\n    </g>\n    </g>\n    <Animatedcursor v-if=\"step == 4\"/>\n</g>\n</template>\n\n<script>\nimport * as d3 from 'd3'\nimport { mapState } from 'vuex'\nimport Axis from './axis.vue'\nimport Animatedcursor from './animatedcursor.vue'\nimport PopUpRight from './LinechartPopUp-right.vue'\n\nimport emissionsData from '../assets/emissions.json'\nimport sectors from '../assets/emissions-stacked.json'\nimport subEmissions from '../assets/subemissions.json'\n\nexport default {\n  name: 'chartanimated',\n  components: {\n    Axis,\n    Animatedcursor,\n    PopUpRight\n  },\n  data () {\n    return {\n      emissions: emissionsData,\n      sectors: sectors,\n      subemissions: subEmissions,\n      chartDefaults: {\n        width: 1000,\n        height: 400,\n        chartId: 'linechart-vue',\n        title: 'Emissions',\n        margin: {\n          top: 5,\n          right: 50,\n          bottom: 25,\n          left: 0\n        },\n        data: []\n      },\n      line: '',\n      translate: this.getTranslation,\n      translateLine: 'translate(0,0)',\n      trnsY: 'translate(0,0)',\n      trnsX: this.getTrnsx,\n      toggleClass: true,\n      chartWidth: this.getWidth\n    }\n  },\n  methods: {\n    newScale () {\n      var parseDate = d3.timeParse('%Y')\n      this.emissions.forEach(function (d) {\n        d.date = parseDate(d.Year)\n      })\n      var x = d3\n        .scaleTime()\n        .domain([d3.min(this.emissions, d => d.date), d3.max(this.emissions, d => d.date)])\n        .rangeRound([0, this.chartDefaults.width])\n\n      var y = d3\n        .scaleLinear()\n        .domain([0, 40000000])\n        .range([this.chartDefaults.height, -100])\n\n      d3.axisBottom().scale(x)\n      d3.axisLeft().scale(y)\n\n      var xAxis = d3\n        .axisBottom()\n        .scale(x)\n        .tickSize(0)\n        .tickFormat(d3.timeFormat('%Y'))\n        .ticks(d3.timeYear.every(5))\n\n      var yAxis = d3\n        .axisRight()\n        .scale(y)\n        .tickValues([10000000, 20000000, 30000000, 40000000])\n        .tickSize(830)\n        .tickPadding(6)\n\n      return {\n        x,\n        y,\n        xAxis,\n        yAxis\n      }\n    },\n    // this set of functions are transforming the scale of the graph from step 3 and 4\n    getTrnsx (chartDefaults) {\n      const t = 'translate(0,' + this.chartDefaults.height + ')'\n      return t\n    },\n    getTranslation (chartDefaults) {\n      var tr = 'translate(' + 100 + ',' + 200 + ')'\n      if (this.step === 4) {\n        tr = 'translate(' + -30 + ',' + 280 + ')'\n      }\n      return tr\n    },\n    getWidth (chartDefaults) {\n      var width = '90%'\n      if (this.step === 4) {\n        width = '100%'\n      }\n      return width\n    }\n  },\n  // this computed property needs to be added for the scrollytelling to function\n  computed: {\n    ...mapState({\n      step: state => state.scrollytelling ? state.scrollytelling.step : null\n    }),\n// this function return an array with paths for the stacked barchart\n    items () {\n      const areas = ['Aviation', 'Road', 'Other', 'Shipping', 'Combustion', 'Production', 'Solvents', 'OtherProc', 'IndWaste', 'CommRes', 'Agriculture', 'Public', 'Autoproduced']\n\n      const scale = this.newScale()\n\n      const parseDate = d3.timeParse('%Y')\n      const data = this.subemissions\n\n      data.forEach(function (d) {\n        d.date = parseDate(d.Year)\n      })\n\n      var areaFixed = d3\n        .area()\n        .x(d => { return scale.x(d.date) })\n        .curve(d3.curveCatmullRom)\n\n      const newAreas = areas.map(function (item, i) {\n        areaFixed\n          .y0(d => {\n            let sum = 0\n            for (let n = 0; n < i; n++) {\n              sum = sum + d[areas[n]]\n            }\n            return scale.y(sum)\n          })\n          .y1(d => {\n            let sum = 0\n            for (let n = 0; n <= i; n++) {\n              sum = sum + d[areas[n]]\n            }\n            return scale.y(sum)\n          })\n        return {\n          d: areaFixed(data),\n          id: areas[i]\n        }\n      })\n\n      return newAreas\n    }\n  }\n}\n</script>\n\n<!-- Add \"scoped\" attribute to limit CSS to this component only -->\n<style scoped lang=\"scss\">\n// @import \"library/src/style/base.scss\";\n@import \"library/src/style/variables.scss\";\n\nsvg {\n  position:absolute;\n}\n\n.subemissions {\n  stroke-width: 0.5;\n}\n.subemissions:hover {\n  fill: $color-blue;\n}\n\n#Combustion, #Production, #Solvents, #OtherProc, #IndWaste {\n  fill: darken($color-yellow, 30%);\n  stroke: darken( $color-violet, 30% );\n\n}\n\n#CommRes, #Agriculture {\n  fill: darken( $color-yellow, 20% );\n  stroke: darken( $color-violet, 20% );\n\n}\n\n#Aviation, #Road, #Other, #Shipping {\n  fill: darken( $color-yellow, 40% );\n  stroke: darken( $color-violet, 40% );\n\n}\n\n#Public, #Autoproduced {\n  fill: darken( $color-yellow, 5% );\n  stroke: darken( $color-violet, 5% );\n}\n\n</style>\n"]}]}