{"remainingRequest":"/Users/francescamorini/projects/transition-v2/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/francescamorini/projects/transition-v2/src/components/EmissionsChart.vue?vue&type=style&index=0&id=609f70a2&scoped=true&lang=scss&","dependencies":[{"path":"/Users/francescamorini/projects/transition-v2/src/components/EmissionsChart.vue","mtime":1571598895453},{"path":"/Users/francescamorini/projects/transition-v2/node_modules/css-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/francescamorini/projects/transition-v2/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":499162500000},{"path":"/Users/francescamorini/projects/transition-v2/node_modules/postcss-loader/src/index.js","mtime":499162500000},{"path":"/Users/francescamorini/projects/transition-v2/node_modules/sass-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/francescamorini/projects/transition-v2/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/francescamorini/projects/transition-v2/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKQGltcG9ydCAibGlicmFyeS9zcmMvc3R5bGUvdmFyaWFibGVzLnNjc3MiOwoKI2VtaXNzaW9ucyB7CiAgc3Ryb2tlOiBnZXRDb2xvcihyZWQsIDQwKTsKICBmaWxsOiBub25lOwp9CgouYXhpcyA+Pj4gZy50aWNrID4gbGluZSB7CiAgc3Ryb2tlOiBibGFjazsKICBmb250LWZhbWlseTogJGZvbnQtbW9ubzsKfQoKLmVtaXNzaW9uX19jaHVua3MgewogIGZpbGw6ICRjb2xvci1wYWxlLWdyYXk7CiAgc3Ryb2tlOiAkY29sb3ItcmVkOwp9Cgo="},{"version":3,"sources":["EmissionsChart.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAyJA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA","file":"EmissionsChart.vue","sourceRoot":"src/components","sourcesContent":["<template>\n  <div class=\"visualization\" id=\"emissions__chart\">\n    <svg :width='this.graphSize.width' :height='this.graphSize.height'>\n      <g :transform=\"`translate(${this.width/6},${this.height/4})`\">\n        <g class=\"axis\" v-axis:x=\"getScale()\" :transform=\"`translate(0,${height / 2})`\"></g>\n        <g class=\"axis\" v-axis:y=\"getScale()\"></g>\n        <Lines />\n        <path id=\"emissions\" :d='line' />\n        <path v-for=\"(chunk, i) in sectorChunks\" v-bind:key='i' :d='chunk.d' :id='chunk.id' class=\"emission__chunks\"/>\n      </g>\n    </svg>\n  </div>\n</template>\n\n<script>\n// Libraries\nimport * as d3 from 'd3'\nimport { mapState } from 'vuex'\n\n// components\nimport Lines from './subcomponents/DotLines.vue'\n\n// Data\nimport emissionsData from '../assets/data/emissions.json'\nimport subEmissionsData from '../assets/data/emissions-stacked.json'\n\nexport default {\n  name: 'EmissionsChart',\n  components: {\n    Lines\n  },\n  props: {\n    width: {\n      type: Number,\n      required: true\n    },\n    height: {\n      type: Number,\n      required: true\n    }\n  },\n  data () {\n    return {\n      graphSize: {\n        width: this.width,\n        height: 600\n      },\n      margin: {\n        top: 20,\n        right: 20,\n        bottom: 20,\n        left: 20\n      },\n      emissionsData,\n      subEmissionsData,\n      line: ''\n    }\n  },\n  mounted () {\n    // console.log(this.emissionsData)\n    this.calcLine()\n  },\n  methods: {\n    getScale () {\n      const emissions = this.emissionsData\n      const parseDate = d3.timeParse('%Y')\n      emissions.forEach(function (d) {\n        d.date = parseDate(d.Year)\n      })\n\n      var x = d3\n        .scaleTime()\n        .domain([d3.min(emissions, d => d.date), parseDate(2080)])\n        .rangeRound([0, this.width - 200])\n\n      var y = d3\n        .scaleLinear()\n        .domain([0, 40000000])\n        .range([this.height / 2, -100])\n\n      return {\n        parseDate,\n        x,\n        y\n      }\n    },\n    calcLine () {\n      const scale = this.getScale()\n      const path = d3\n        .line()\n        .x(d => { return scale.x(d.date) })\n        .y(d => { return scale.y(d.Emissions) })\n        .curve(d3.curveLinear)\n      this.line = path(emissionsData)\n    }\n  },\n  computed: {\n    ...mapState({\n      step: state => state.scrollytelling ? state.scrollytelling.step : null\n    }),\n    sectorChunks () {\n      const sectors = ['Electricity', 'OtherEnergy', 'Industry', 'Transports', 'Building']\n      // const colors = ['#33121c', '#611731', '#931547', '#dd5f84', '#ed96ab']\n      const data = this.subEmissionsData\n      const scale = this.getScale()\n      const parseDate = scale.parseDate\n\n      data.forEach((d) => { d.date = parseDate(d.Year) })\n\n      const areasX = d3\n        .area()\n        .x(d => { return scale.x(d.date) })\n        .curve(d3.curveLinear)\n\n      const sectorsAreas = sectors.map(function (item, i) {\n        areasX\n          .y0(d => {\n            let sum = 0\n            for (let n = 0; n < i; n++) {\n              sum = sum + d[sectors[n]]\n            }\n            return scale.y(sum)\n          })\n          .y1(d => {\n            let sum = 0\n            for (let n = 0; n <= i; n++) {\n              sum = sum + d[sectors[n]]\n            }\n            return scale.y(sum)\n          })\n\n        return {\n          d: areasX(data),\n          id: sectors[i],\n          // color: colors[]\n        }\n      })\n      console.log(sectorsAreas)\n      return sectorsAreas\n    }\n  },\n  directives: {\n    axis (element, bind) {\n      const axis = bind.arg\n      const axisMethod = { x: 'axisBottom', y: 'axisLeft' }[axis]\n      const methodArg = bind.value[axis]\n      d3.select(element).call(d3[axisMethod](methodArg))\n    }\n  }\n}\n</script>\n\n<style scoped lang=\"scss\">\n@import \"library/src/style/variables.scss\";\n\n#emissions {\n  stroke: getColor(red, 40);\n  fill: none;\n}\n\n.axis >>> g.tick > line {\n  stroke: black;\n  font-family: $font-mono;\n}\n\n.emission__chunks {\n  fill: $color-pale-gray;\n  stroke: $color-red;\n}\n\n</style>\n"]}]}