{"remainingRequest":"/Users/francescamorini/projects/transition-module/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/Users/francescamorini/projects/transition-module/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/francescamorini/projects/transition-module/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/francescamorini/projects/transition-module/src/App.vue?vue&type=template&id=7ba5bd90&","dependencies":[{"path":"/Users/francescamorini/projects/transition-module/src/App.vue","mtime":1572538415291},{"path":"/Users/francescamorini/projects/transition-module/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/francescamorini/projects/transition-module/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/Users/francescamorini/projects/transition-module/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/francescamorini/projects/transition-module/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:dmFyIHJlbmRlciA9IGZ1bmN0aW9uKCkgewogIHZhciBfdm0gPSB0aGlzCiAgdmFyIF9oID0gX3ZtLiRjcmVhdGVFbGVtZW50CiAgdmFyIF9jID0gX3ZtLl9zZWxmLl9jIHx8IF9oCiAgcmV0dXJuIF9jKAogICAgImRpdiIsCiAgICB7IHJlZjogInZpcyIsIGF0dHJzOiB7IGlkOiAiYXBwIiB9IH0sCiAgICBbCiAgICAgIF9jKAogICAgICAgICJMYXlvdXRTY3JvbGx5dGVsbGluZyIsCiAgICAgICAgewogICAgICAgICAgc2NvcGVkU2xvdHM6IF92bS5fdShbCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICBrZXk6ICJ2aXMiLAogICAgICAgICAgICAgIGZuOiBmdW5jdGlvbihyZWYpIHsKICAgICAgICAgICAgICAgIHZhciB3aWR0aCA9IHJlZi53aWR0aAogICAgICAgICAgICAgICAgdmFyIGhlaWdodCA9IHJlZi5oZWlnaHQKICAgICAgICAgICAgICAgIHZhciBzdGVwID0gcmVmLnN0ZXAKICAgICAgICAgICAgICAgIHJldHVybiBbCiAgICAgICAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICAgICAgICJkaXYiLAogICAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAidmlzLWlubmVyIiwKICAgICAgICAgICAgICAgICAgICAgIHN0eWxlOiB7CiAgICAgICAgICAgICAgICAgICAgICAgIHdpZHRoOiB3aWR0aCArICJweCIsCiAgICAgICAgICAgICAgICAgICAgICAgIGhlaWdodDogaGVpZ2h0ICsgInB4IgogICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgWwogICAgICAgICAgICAgICAgICAgICAgc3RlcCA8PSAzLjUKICAgICAgICAgICAgICAgICAgICAgICAgPyBfYygiRW1pc3Npb25zQ2hhcnQiLCB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhdHRyczogeyB3aWR0aDogd2lkdGgsIGhlaWdodDogaGVpZ2h0IH0KICAgICAgICAgICAgICAgICAgICAgICAgICB9KQogICAgICAgICAgICAgICAgICAgICAgICA6IF92bS5fZSgpCiAgICAgICAgICAgICAgICAgICAgXSwKICAgICAgICAgICAgICAgICAgICAxCiAgICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICAgIF0KICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICAgIF0pCiAgICAgICAgfSwKICAgICAgICBbCiAgICAgICAgICBfYygKICAgICAgICAgICAgImRpdiIsCiAgICAgICAgICAgIHsgYXR0cnM6IHsgc2xvdDogInRleHQiIH0sIHNsb3Q6ICJ0ZXh0IiB9LAogICAgICAgICAgICBbCiAgICAgICAgICAgICAgX2MoIkludGVyc2VjdGlvbk9ic2VydmVyIiwgeyBhdHRyczogeyBzdGVwOiAwIH0gfSwgWwogICAgICAgICAgICAgICAgX2MoImgyIiwgeyBzdGF0aWNDbGFzczogInRpdGxlIiwgYXR0cnM6IHsgaWQ6ICJjb3ZlciIgfSB9LCBbCiAgICAgICAgICAgICAgICAgIF92bS5fdigiV2hhdCB3aWxsIHlvdSBsZWFybj8iKQogICAgICAgICAgICAgICAgXSksCiAgICAgICAgICAgICAgICBfYygicCIsIFsKICAgICAgICAgICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAgICAgICAgICIgSW4gdGhpcyBtb2R1bGUgeW91IHdpbGwgYmUgYWJsZSB0byBicmVhayBkb3duIGhpc3RvcmljYWwgZW1pc3Npb25zIGFjY29yZGluZyB0byB0aGUgc2VjdG9yIHRoYXQgZ2VuZXJhdGUgdGhlbS4gWW91IHdpbGwgYmUgaW50cm9kdWNlZCB0byB0aGUgY29uY2VwdCBvZiBFbGVjdHJpZmljYXRpb24gYW5kIHRvIHRoZSBicm9hZCBzdHJhdGVneSB0byBnbyBDYXJib24gTmV1dHJhbCBieSByZWR1Y2luZyBlbWlzc2lvbnMuIEluIHRoZSBsYXN0IHNlY3Rpb24geW91IHdpbGwgYmUgYWJsZSB0byBleHBsb3JlIHRoZSBjb21wYXRpYmlsaXR5IG9mIGRpZmZlcmVudCBzY2VuYXJpb3Mgd2l0aCB0aGlzIGRlY2FyYm9uaXphdGlvbiBzdHJhdGVneS4gIgogICAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgICBdKQogICAgICAgICAgICAgIF0pLAogICAgICAgICAgICAgIF9jKCJJbnRlcnNlY3Rpb25PYnNlcnZlciIsIHsgYXR0cnM6IHsgc3RlcDogMSB9IH0sIFsKICAgICAgICAgICAgICAgIF9jKCJoMiIsIHsgc3RhdGljQ2xhc3M6ICJ0aXRsZSIsIGF0dHJzOiB7IGlkOiAibmV0X196ZXJvIiB9IH0sIFsKICAgICAgICAgICAgICAgICAgX3ZtLl92KCJXaGF0IGlzIE5ldC1aZXJvPyIpCiAgICAgICAgICAgICAgICBdKSwKICAgICAgICAgICAgICAgIF9jKCJwIiwgWwogICAgICAgICAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICAgICAgICAgIiBUbyBzdGFiaWxpemUgZ2xvYmFsIHRlbXBlcmF0dXJlcyBhbmQgc3RvcCBnbG9iYWwgd2FybWluZywgbmV0IGdyZWVuaG91c2UgZ2FzIGVtaXNzaW9ucyB0byB0aGUgYXRtb3NwaGVyZSBoYXZlIHRvIGJlIHJlZHVjZWQgdG8gemVyby4gIgogICAgICAgICAgICAgICAgICApLAogICAgICAgICAgICAgICAgICBfYygiYnIiKSwKICAgICAgICAgICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAgICAgICAgICJDTzIgZW1pc3Npb25zIGZyb20gdGhlIGVuZXJneSBzZWN0b3IgcmVwcmVzZW50IHRoZSBsaW9uIHNoYXJlIG9mIGdsb2JhbCBncmVlbmhvdXNlIGdhcyBlbWlzc2lvbnMgYW5kIGhhdmUgc3RlYWRpbHkgaW5jcmVhc2VkIG92ZXIgdGhlIHBhc3QgMzAgeWVhcnMuICIKICAgICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgICAgXSkKICAgICAgICAgICAgICBdKSwKICAgICAgICAgICAgICBfYygiSW50ZXJzZWN0aW9uT2JzZXJ2ZXIiLCB7IGF0dHJzOiB7IHN0ZXA6IDEuMSB9IH0sIFsKICAgICAgICAgICAgICAgIF9jKCJwIiwgWwogICAgICAgICAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICAgICAgICAgIiBIb3dldmVyLCBsaW1pdGluZyBnbG9iYWwgd2FybWluZyB0byAywrBDIGFib3ZlIHByZS1pbmR1c3RyaWFsIGxldmVscyB3aWxsIHJlcXVpcmUgbmV0LXplcm8gZW1pc3Npb25zIGJ5IDIwNzUuIEEgbGltaXQgb2YgMS41wrBDIHdpbGwgcmVxdWlyZSBjYXJib24gbmV1dHJhbGl0eSBldmVuIGJ5IDIwNTAuICIKICAgICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgICAgXSkKICAgICAgICAgICAgICBdKSwKICAgICAgICAgICAgICBfYygiSW50ZXJzZWN0aW9uT2JzZXJ2ZXIiLCB7IGF0dHJzOiB7IHN0ZXA6IDEuMiB9IH0sIFsKICAgICAgICAgICAgICAgIF9jKCJwIiwgWwogICAgICAgICAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICAgICAgICAgIiBBIGxpbWl0IG9mIDEuNcKwQyB3aWxsIHJlcXVpcmUgY2FyYm9uIG5ldXRyYWxpdHkgZXZlbiBieSAyMDUwLiAiCiAgICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICAgIF0pCiAgICAgICAgICAgICAgXSksCiAgICAgICAgICAgICAgX2MoIkludGVyc2VjdGlvbk9ic2VydmVyIiwgeyBhdHRyczogeyBzdGVwOiAyIH0gfSwgWwogICAgICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgICAgICJoMiIsCiAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICBzdGF0aWNDbGFzczogInRpdGxlIiwKICAgICAgICAgICAgICAgICAgICBhdHRyczogeyBpZDogImluY3JlYXNpbmdfX2VtaXNzaW9ucyIgfQogICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICBbX3ZtLl92KCJFbWlzc2lvbiBoYXZlIGJlZW4gc3RlYWRpbHkgaW5jcmVhc2luZyIpXQogICAgICAgICAgICAgICAgKSwKICAgICAgICAgICAgICAgIF9jKCJwIiwgWwogICAgICAgICAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICAgICAgICAgIiBMZXQgdXMgdGFrZSBhIGNsb3NlciBsb29rIGF0IHRoZSBwYXN0IDMwIHllYXJzIHdoZXJlIGVtaXNzaW9ucyBoYXZlIGJlZW4gc3RlYWRpbHkgaW5jcmVhc2luZy4gIgogICAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgICBdKQogICAgICAgICAgICAgIF0pLAogICAgICAgICAgICAgIF9jKCJJbnRlcnNlY3Rpb25PYnNlcnZlciIsIHsgYXR0cnM6IHsgc3RlcDogMyB9IH0sIFsKICAgICAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICAgICAiaDIiLAogICAgICAgICAgICAgICAgICB7IHN0YXRpY0NsYXNzOiAidGl0bGUiLCBhdHRyczogeyBpZDogInNlY3Rvcl9fZW1pc3Npb25zIiB9IH0sCiAgICAgICAgICAgICAgICAgIFtfdm0uX3YoIldoZXJlIGRvIHRoZSBjdXJyZW50IGVtaXNzaW9ucyBjb21lIGZyb20/IildCiAgICAgICAgICAgICAgICApLAogICAgICAgICAgICAgICAgX2MoInAiLCBbCiAgICAgICAgICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgICAgICAgICAiIFRoZSBjdXJyZW50IGVuZXJneS1yZWxhdGVkIENPMiBlbWlzc2lvbnMgY29tZSBmcm9tIGZvdXIgZGlmZmVyZW50IHNlY3RvcnM6IGVsZWN0cmljaXR5LCB0cmFuc3BvcnQsIGluZHVzdHJ5IGFuZCBidWlsZGluZ3MgYW5kIG90aGVyIGVuZXJneSB1c2VzLiAiCiAgICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICAgIF0pCiAgICAgICAgICAgICAgXSksCiAgICAgICAgICAgICAgX2MoIkludGVyc2VjdGlvbk9ic2VydmVyIiwgeyBhdHRyczogeyBzdGVwOiAzLjEgfSB9LCBbCiAgICAgICAgICAgICAgICBfYygKICAgICAgICAgICAgICAgICAgImg2IiwKICAgICAgICAgICAgICAgICAgeyBzdGF0aWNDbGFzczogInAgbW9ubyIsIGF0dHJzOiB7IGlkOiAiZWxlY3RyaWNpdHkiIH0gfSwKICAgICAgICAgICAgICAgICAgW192bS5fdigiRWxlY3RyaWNpdHkgU2VjdG9yIildCiAgICAgICAgICAgICAgICApLAogICAgICAgICAgICAgICAgX2MoInAiLCBbCiAgICAgICAgICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgICAgICAgICAiIFRoZSBlbWlzc2lvbiBmcm9tIGVsZWN0cmljaXR5IGdlbmVyYXRpb24gcmVwcmVzZW50IGFib3V0IG9uZSB0aGlyZCBhbmQgaGF2ZSBiZWVuIHN0ZWFkaWx5IGluY3JlYXNpbmcgb3ZlciB0aGUgcGFzdCBkZWNhZGVzLiBUaGUgbWFpbiByZWFzb24gaXMgdGhlIGVjb25vbWljIGdyb3d0aCBpbiB0aGUgZGV2ZWxvcGluZyBjb3VudHJpZXMsIGVzcGVjaWFsbHkgaW4gSW5kaWEgYW5kIENoaW5hLCB3aGVyZSB0aGUgZGVtYW5kIGZvciBlbGVjdHJpY2l0eSBzb2FycyBhbmQgbGVhZHMgdG8gdGhlIGNvbnN0cnVjdGlvbiBvZiBtb3JlIGFuZCBtb3JlIGNvYWwtZmlyZWQgcG93ZXIgcGxhbnRzLiAiCiAgICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICAgIF0pCiAgICAgICAgICAgICAgXSksCiAgICAgICAgICAgICAgX2MoIkludGVyc2VjdGlvbk9ic2VydmVyIiwgeyBhdHRyczogeyBzdGVwOiAzLjIgfSB9LCBbCiAgICAgICAgICAgICAgICBfYygKICAgICAgICAgICAgICAgICAgImg2IiwKICAgICAgICAgICAgICAgICAgeyBzdGF0aWNDbGFzczogInAgbW9ubyIsIGF0dHJzOiB7IGlkOiAidHJhbnNwb3J0IiB9IH0sCiAgICAgICAgICAgICAgICAgIFtfdm0uX3YoIlRyYW5zcG9ydCBTZWN0b3IiKV0KICAgICAgICAgICAgICAgICksCiAgICAgICAgICAgICAgICBfYygicCIsIFsKICAgICAgICAgICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAgICAgICAgICIgSW5jcmVhc2luZyByb2FkIHRyYW5zcG9ydCwgYXZpYXRpb24gYW5kIHNoaXBwaW5nIGFsbCBjb250cmlidXRlIHRvIHRoZSBnbG9iYWxseSByaXNpbmcgdHJhbnNwb3J0IGVtaXNzaW9ucy4gUm9hZCB0cmFuc3BvcnQgaW5jbHVkZXMgc21hbGwgcGFzc2VuZ2VyIGNhcnMgYXMgd2VsbCBhcyB0cnVja3MgYW5kIGJ1c2VzLiBNb3N0IG9mIHRoZSB0cmFuc3BvcnQgYWN0aXZpdGllcyBhcmUgY3VycmVudGx5IGZ1ZWxlZCBieSBvaWwtYmFzZWQgcHJvZHVjdHMgYW5kIGl0cyBkZWNhcmJvbml6YXRpb24gd2lsbCBiZSBhIGtleSBmdXR1cmUgY2hhbGxlbmdlLiAiCiAgICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICAgIF0pCiAgICAgICAgICAgICAgXSksCiAgICAgICAgICAgICAgX2MoIkludGVyc2VjdGlvbk9ic2VydmVyIiwgeyBhdHRyczogeyBzdGVwOiAzLjMgfSB9LCBbCiAgICAgICAgICAgICAgICBfYygKICAgICAgICAgICAgICAgICAgImg2IiwKICAgICAgICAgICAgICAgICAgeyBzdGF0aWNDbGFzczogInAgbW9ubyIsIGF0dHJzOiB7IGlkOiAicmVzaWRlbnRpYWwiIH0gfSwKICAgICAgICAgICAgICAgICAgW192bS5fdigiUmVzaWRlbnRpYWwgU2VjdG9yIildCiAgICAgICAgICAgICAgICApLAogICAgICAgICAgICAgICAgX2MoInAiLCBbCiAgICAgICAgICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgICAgICAgICAiIFRoZSByZXNpZGVudGlhbCBzZWN0b3IgbWFpbmx5IGNvbnRyaWJ1dGVkIGVtaXNzaW9ucyBmcm9tIHNwYWNlIGhlYXRpbmcgd2l0aCBjb2FsLCBnYXMgb3Igb2lsLWJhc2VkIHByb2R1Y3RzLiBUaGUgZW1pc3Npb25zIGhhdmUgcmVtYWluZWQgY29uc3RhbnQgb3ZlciByZWNlbnQgZGVjYWRlcywgaGVuY2UgZGVjcmVhc2luZyB0aGUgc2hhcmUgb2YgcmVzaWRlbnRpYWwgZW1pc3Npb25zIGluIHRvdGFsIGVtaXNzaW9ucy4gSXQgd2FzIGRyaXZlbiBieSBpbmNyZWFzaW5nIGVuZXJneSBlZmZpY2llbmN5IGFuZCBhIGdyYWR1YWwgc2hpZnQgZnJvbSBjb2FsIHRvIGdhcyBpbiBzcGFjZSBoZWF0aW5nLiAiCiAgICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICAgIF0pCiAgICAgICAgICAgICAgXSksCiAgICAgICAgICAgICAgX2MoIkludGVyc2VjdGlvbk9ic2VydmVyIiwgeyBhdHRyczogeyBzdGVwOiAzLjQgfSB9LCBbCiAgICAgICAgICAgICAgICBfYygiaDYiLCB7IHN0YXRpY0NsYXNzOiAicCBtb25vIiwgYXR0cnM6IHsgaWQ6ICJpbmR1c3RyeSIgfSB9LCBbCiAgICAgICAgICAgICAgICAgIF92bS5fdigiSW5kdXN0cnkgU2VjdG9yIikKICAgICAgICAgICAgICAgIF0pLAogICAgICAgICAgICAgICAgX2MoInAiLCBbCiAgICAgICAgICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgICAgICAgICAiIEluZHVzdHJ5IGlzIGEgY29tcGxleCBzZWN0b3IgdGhhdCBjYXVzZXMgZW1pc3Npb25zIGVpdGhlciBieSBjb21idXN0aW5nIGZvc3NpbCBmdWVscyBmb3IgaGVhdGluZyBvciB1c2luZyB0aGVtIGFzIGZlZWRzdG9ja3MgZm9yIGluZHVzdHJpYWwgZ29vZHMgbGlrZSBjZW1lbnQgb3IgcGxhc3RpY3MuIFRoZSBtYWluIGNvbnRyaWJ1dG9ycyB0byBpbmR1c3RyeSBlbWlzc2lvbnMgYXJlIHRoZSBlbmVyZ3ktaW50ZW5zaXZlIHByb2R1Y3Rpb24gb2Ygc3RlZWwgYW5kIGNlbWVudCwgYm90aCBvZiB3aGljaCBoYXZlIGV4cGVyaWVuY2VkIGEgc3Ryb25nIGdyb3d0aCBvdmVyIHRoZSBwYXN0IDMwIHllYXJzLiAiCiAgICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICAgIF0pCiAgICAgICAgICAgICAgXSksCiAgICAgICAgICAgICAgX2MoIkludGVyc2VjdGlvbk9ic2VydmVyIiwgeyBhdHRyczogeyBzdGVwOiAzLjUgfSB9LCBbCiAgICAgICAgICAgICAgICBfYygiaDYiLCB7IHN0YXRpY0NsYXNzOiAicCBtb25vIiwgYXR0cnM6IHsgaWQ6ICJvdGhlciIgfSB9LCBbCiAgICAgICAgICAgICAgICAgIF92bS5fdigiT3RoZXIgRW5lcmd5IikKICAgICAgICAgICAgICAgIF0pLAogICAgICAgICAgICAgICAgX2MoInAiLCBbCiAgICAgICAgICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgICAgICAgICAiIFRoZXJlIGFyZSBhIG51bWJlciBvZiBlbmVyZ3ktcmVsYXRlZCBwcm9jZXNzZXMgdGhhdCBhbHNvIGNhdXNlIGVtaXNzaW9ucyBidXQgYXJlIG5vdCBwYXJ0IG9mIHRoZSBmb3VyIG1haW4gc2VjdG9ycy4gVGhlc2UgYXJlLCBmb3IgZXhhbXBsZSwgZW1pc3Npb25zIGZyb20gbWluaW5nIGMgb2FsIGFuZCBuYXR1cmFsIGdhcyBvciBmcm9tIHRoZSBjb21idXN0aW9uIG9mIHdhc3RlLiBXZSBzdW1tYXJpemVkIHRoZW0gdW5kZXIgdGhlIGNhdGVnb3J5IG9mIOKAnG90aGVyIGVuZXJneeKAnSBhbmQgd2lsbCBub3QgZGlzY3VzcyB0aGVtIGluIGRldGFpbCBoZXJlLiAiCiAgICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICAgIF0pCiAgICAgICAgICAgICAgXSksCiAgICAgICAgICAgICAgX2MoIkludGVyc2VjdGlvbk9ic2VydmVyIiwgeyBhdHRyczogeyBzdGVwOiA0IH0gfSwgWwogICAgICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgICAgICJoMiIsCiAgICAgICAgICAgICAgICAgIHsgc3RhdGljQ2xhc3M6ICJ0aXRsZSIsIGF0dHJzOiB7IGlkOiAic2VjdG9yX19jbG9zZXVwIiB9IH0sCiAgICAgICAgICAgICAgICAgIFtfdm0uX3YoIkEgY2xvc2VyIGxvb2sgdG8gdGhlIHNlY3RvcnMiKV0KICAgICAgICAgICAgICAgICksCiAgICAgICAgICAgICAgICBfYygicCIsIFsKICAgICAgICAgICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAgICAgICAgICIgQWxsIGZvdXIgc2VjdG9ycyBjYW4gYmUgZGl2aWRlZCBpbnRvIGEgbnVtYmVyIG9mIHN1YnNlY3RvcnMuIFRoaXMgY2F0ZWdvcml6YXRpb24gaXMgaW1wb3J0YW50IHNpbmNlIGVhY2ggc3Vic2VjdG9yIG1pZ2h0IG5lZWQgYSBkaWZmZXJlbnQgc29sdXRpb24gZm9yIGRlY2FyYm9uaXphdGlvbi4gIgogICAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgICBdKQogICAgICAgICAgICAgIF0pLAogICAgICAgICAgICAgIF9jKCJJbnRlcnNlY3Rpb25PYnNlcnZlciIsIHsgYXR0cnM6IHsgc3RlcDogNSB9IH0sIFsKICAgICAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICAgICAiaDIiLAogICAgICAgICAgICAgICAgICB7IHN0YXRpY0NsYXNzOiAidGl0bGUiLCBhdHRyczogeyBpZDogInNlY3Rvcl9fY2xvc2V1cCIgfSB9LAogICAgICAgICAgICAgICAgICBbX3ZtLl92KCJXaGF0IGFyZSB0aGUgbWFpbiBlbmVyZ3kgY2FycmllcnMgZm9yIHNlY3RvcnM/IildCiAgICAgICAgICAgICAgICApLAogICAgICAgICAgICAgICAgX2MoInAiLCBbCiAgICAgICAgICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgICAgICAgICAiIEVhY2ggc2VjdG9yIHVzZXMgYSBkaWZmZXJlbnQgbWl4IG9mIGVuZXJneSBjYXJyaWVycyBzdWNoIGFzIGNvYWwsIGdhcywgb2lsLCBudWNsZWFyIG9yIHJlbmV3YWJsZXMuIEFsbCBzZWN0b3JzIGN1cnJlbnRseSB1c2UgZm9zc2lsIGZ1ZWxzIGxpa2UgY29hbCwgZ2FzIGFuZCBvaWwgdG8gYSBsYXJnZSBleHRlbnQuIFRvIGRlY2FyYm9uaXplIHRoZSBlbmVyZ3kgc3lzdGVtLCB0aGV5IGhhdmUgdG8gYmUgcmVwbGFjZWQgYnkgbG93LWNhcmJvbiBhbHRlcm5hdGl2ZXMgbGlrZSBudWNsZWFyIG9yIHJlbmV3YWJsZXMuICIKICAgICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgICAgXSkKICAgICAgICAgICAgICBdKSwKICAgICAgICAgICAgICBfYygiSW50ZXJzZWN0aW9uT2JzZXJ2ZXIiLCB7IGF0dHJzOiB7IHN0ZXA6IDYgfSB9LCBbCiAgICAgICAgICAgICAgICBfYygKICAgICAgICAgICAgICAgICAgImgyIiwKICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAidGl0bGUiLAogICAgICAgICAgICAgICAgICAgIGF0dHJzOiB7IGlkOiAiY291bnRyeV9fcGVyc3BlY3RpdmVzIiB9CiAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgIFtfdm0uX3YoIkNvdW50cnkgUGVyc3BlY3RpdmVzIildCiAgICAgICAgICAgICAgICApLAogICAgICAgICAgICAgICAgX2MoInAiLCBbCiAgICAgICAgICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgICAgICAgICAiIERlcGVuZGluZyBvbiB0aGVpciBlbmVyZ3kgcmVzb3VyY2VzIGFuZCBuZWVkcywgZGlmZmVyZW50IGNvdW50cmllcyBmYWNlIGRpZmZlcmVudCBjaGFsbGVuZ2VzIG9mIGRlY2FyYm9uaXphdGlvbi4gSW4gdHJvcGljYWwgYW5kIHN1YnRyb3BpY2FsIGNvdW50cmllcywgZm9yIGV4YW1wbGUsIHNwYWNlIGNvb2xpbmcgcGxheXMgYSBncmVhdGVyIHJvbGUsIHdoaWxlIHNwYWNlIGhlYXRpbmcgaXMgcmVsZXZhbnQgZm9yIGhpZ2hlciBsYXRpdHVkZXMuIEhlbmNlLCB0aGUgZ2xvYmFsIG1pdGlnYXRpb24gc3RyYXRlZ2llcyBuZWVkIHRvIGJlIGZpbmUgdHVuZWQgb24gYSBjb3VudHJ5LWxldmVsLiAiCiAgICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICAgIF0pCiAgICAgICAgICAgICAgXSksCiAgICAgICAgICAgICAgX2MoIkludGVyc2VjdGlvbk9ic2VydmVyIiwgeyBhdHRyczogeyBzdGVwOiA3IH0gfSwgWwogICAgICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgICAgICJoMiIsCiAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICBzdGF0aWNDbGFzczogInRpdGxlIiwKICAgICAgICAgICAgICAgICAgICBhdHRyczogeyBpZDogImRlY2FyYm9uaXplX19zZWN0b3JzIiB9CiAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgIFtfdm0uX3YoIkhvdyBkbyB3ZSBkZWNhcmJvbml6ZSB0aGUgc2VjdG9ycz8iKV0KICAgICAgICAgICAgICAgICksCiAgICAgICAgICAgICAgICBfYygicCIsIFsKICAgICAgICAgICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAgICAgICAgICIgQWNyb3NzIGFsbCBzZWN0b3JzLCBmb3NzaWwgZnVlbHMgbmVlZCB0byBiZSByZXBsYWNlZCBieSBsb3ctY2FyYm9uIGVuZXJneS4gSW4gdGhlIGVsZWN0cmljaXR5IHNlY3RvciwgdGhpcyBjYW4gYmUgZG9uZSBieSBpbmNyZWFzaW5nIHRoZSBzaGFyZSBvZiByZW5ld2FibGUgZW5lcmd5LCBpbiBwYXJ0aWN1bGFyIHdpbmQgYW5kIHNvbGFyLiBUaGVyZSBhcmUgdHdvIG1haW4gc3RyYXRlZ2llcyB0byBkZWNhcmJvbml6ZSB0aGUgaW5kdXN0cnksIHRyYW5zcG9ydCBhbmQgcmVzaWRlbnRpYWwgc2VjdG9yczogZWxlY3RyaWZpY2F0aW9uIHVzaW5nIGxvdy1jYXJib24gZWxlY3RyaWNpdHkgb3IgYSBzd2l0Y2ggdG8gbG93LWNhcmJvbiBhbHRlcm5hdGl2ZXMgbGlrZSBiaW9mdWVscyBvciByZW5ld2FibGUgaHlkcm9nZW4uICIKICAgICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgICAgXSkKICAgICAgICAgICAgICBdKSwKICAgICAgICAgICAgICBfYygiSW50ZXJzZWN0aW9uT2JzZXJ2ZXIiLCB7IGF0dHJzOiB7IHN0ZXA6IDggfSB9LCBbCiAgICAgICAgICAgICAgICBfYygKICAgICAgICAgICAgICAgICAgImgyIiwKICAgICAgICAgICAgICAgICAgeyBzdGF0aWNDbGFzczogInRpdGxlIiwgYXR0cnM6IHsgaWQ6ICJlbGVjdHJpY2l0eV9fZmlyc3QiIH0gfSwKICAgICAgICAgICAgICAgICAgW192bS5fdigiVGhlIGVsZWN0cmljaXR5IHNlY3RvciBoYXMgdG8gZ28gY2xlYW4gZmlyc3QuICIpXQogICAgICAgICAgICAgICAgKSwKICAgICAgICAgICAgICAgIF9jKCJwIiwgWwogICAgICAgICAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICAgICAgICAgIiBUaGUgZmlyc3Qgc3RlcCBpcyB0aHVzIHRvIHJlcGxhY2UgY29hbCBhbmQgZ2FzIGluIHRoZSBlbGVjdHJpY2l0eSBzZWN0b3IgYnkgcmVuZXdhYmxlIHNvdXJjZXMgbGlrZSB3aW5kLCBzb2xhciBhbmQgYmlvZW5lcmd5LiAiCiAgICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICAgIF0pCiAgICAgICAgICAgICAgXSksCiAgICAgICAgICAgICAgX2MoIkludGVyc2VjdGlvbk9ic2VydmVyIiwgeyBhdHRyczogeyBzdGVwOiA5IH0gfSwgWwogICAgICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgICAgICJoMiIsCiAgICAgICAgICAgICAgICAgIHsgc3RhdGljQ2xhc3M6ICJ0aXRsZSIsIGF0dHJzOiB7IGlkOiAiaW5kdXN0cnlfX3NlY29uZCIgfSB9LAogICAgICAgICAgICAgICAgICBbX3ZtLl92KCJJbmR1c3RyeSBFbGVjdHJpZmljYXRpb24uIildCiAgICAgICAgICAgICAgICApLAogICAgICAgICAgICAgICAgX2MoInAiLCBbCiAgICAgICAgICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgICAgICAgICAiIEluIHRoZSBpbmR1c3RyeSBzZWN0b3JzLCBhIGxvdCBvZiBhcHBsaWNhdGlvbnMgdGhhdCByZXF1aXJlIGhlYXQgY2FuIHVwIHRvIGNlcnRhaW4gdGVtcGVyYXR1cmVzIGJlIGVsZWN0cmlmaWVkIGJ5IGhlYXQgcHVtcHMgYW5kIGVsZWN0cmljIGJvaWxlcnMuIElmIHRoZSBlbGVjdHJpY2l0eSBjb21lcyBmcm9tIHJlbmV3YWJsZSBzb3VyY2VzLCB0aGlzIGNvdWxkIHNhdmUgc3Vic3RhbnRpYWwgZW1pc3Npb25zLiBIb3dldmVyLCBmdWxsIGVsZWN0cmlmaWNhdGlvbiB3aWxsIG5vdCBiZSBwb3NzaWJsZSBpbiBzZWN0b3JzIGxpa2UgdGhlIGNlbWVudCBvciB0aGUgY2hlbWljYWwgaW5kdXN0cnkuICIKICAgICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgICAgXSkKICAgICAgICAgICAgICBdKSwKICAgICAgICAgICAgICBfYygiSW50ZXJzZWN0aW9uT2JzZXJ2ZXIiLCB7IGF0dHJzOiB7IHN0ZXA6IDEwIH0gfSwgWwogICAgICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgICAgICJoMiIsCiAgICAgICAgICAgICAgICAgIHsgc3RhdGljQ2xhc3M6ICJ0aXRsZSIsIGF0dHJzOiB7IGlkOiAidHJhbnNwb3J0X190aGlyZCIgfSB9LAogICAgICAgICAgICAgICAgICBbX3ZtLl92KCJFbGVjdHJpZnlpbmcgVHJhbnNwb3J0cy4iKV0KICAgICAgICAgICAgICAgICksCiAgICAgICAgICAgICAgICBfYygicCIsIFsKICAgICAgICAgICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAgICAgICAgICIgVHJhbnNwb3J0IGNhbiBiZSBlbGVjdHJpZmllZCwgZm9yIGV4YW1wbGUsIGJ5IHN3aXRjaGluZyB0byBlbGVjdHJpYyBjYXJzIGFuZCB0cnVja3Mgb3IgYnkgcmVwbGFjaW5nIHNoaXBwaW5nIG9yIGF2aWF0aW9uIGJ5IHJhaWwgdHJhbnNwb3J0LiBUaGUgc2hpcHBpbmcgYW5kIGF2aWF0aW9uIHNlY3RvcnMgYm90aCBhcmUgZGlmZmljdWx0IHRvIGVsZWN0cmlmeSBzdWNoIHRoYXQgdGhlcmUgYXJlIGFsc28gbGltaXRzIHRvIGZ1bGwgZWxlY3RyaWZpY2F0aW9uLiAiCiAgICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICAgIF0pCiAgICAgICAgICAgICAgXSksCiAgICAgICAgICAgICAgX2MoIkludGVyc2VjdGlvbk9ic2VydmVyIiwgeyBhdHRyczogeyBzdGVwOiAxMSB9IH0sIFsKICAgICAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICAgICAiaDIiLAogICAgICAgICAgICAgICAgICB7IHN0YXRpY0NsYXNzOiAidGl0bGUiLCBhdHRyczogeyBpZDogImJ1aWxkaW5nX19mb3VydGgiIH0gfSwKICAgICAgICAgICAgICAgICAgW192bS5fdigiRWxlY3RyaWZ5aW5nIEJ1aWxkaW5ncy4iKV0KICAgICAgICAgICAgICAgICksCiAgICAgICAgICAgICAgICBfYygicCIsIFsKICAgICAgICAgICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAgICAgICAgICIgRmluYWxseSwgdGhlcmUgaXMgYWxzbyBwb3RlbnRpYWwgdG8gZWxlY3RyaWZ5IHRoZSByZXNpZGVudGlhbCBzZWN0b3IsIGZvciBleGFtcGxlLCBieSBzd2l0Y2hpbmcgZnJvbSBnYXMgaGVhdGluZyB0byBlbGVjdHJpYyBoZWF0IHB1bXBzIGZvciBzcGFjZSBoZWF0aW5nLiAiCiAgICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICAgIF0pCiAgICAgICAgICAgICAgXSksCiAgICAgICAgICAgICAgX2MoIkludGVyc2VjdGlvbk9ic2VydmVyIiwgeyBhdHRyczogeyBzdGVwOiAxMiB9IH0sIFsKICAgICAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICAgICAiaDIiLAogICAgICAgICAgICAgICAgICB7IHN0YXRpY0NsYXNzOiAidGl0bGUiLCBhdHRyczogeyBpZDogImVsZWN0cmlmaWNhdGlvbiIgfSB9LAogICAgICAgICAgICAgICAgICBbX3ZtLl92KCJEZWNhcmJvbml6YXRpb24gYnkgZWxlY3RyaWZpY2F0aW9uISIpXQogICAgICAgICAgICAgICAgKSwKICAgICAgICAgICAgICAgIF9jKCJwIiwgWwogICAgICAgICAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICAgICAgICAgIiBTd2l0Y2hpbmcgZnJvbSBmb3NzaWwgdG8gcmVuZXdhYmxlIGVsZWN0cmljaXR5IGFuZCBlbGVjdHJpZnlpbmcgdGhlIGluZHVzdHJ5LCB0cmFuc3BvcnQgYW5kIHJlc2lkZW50aWFsIHNlY3RvciBpcyBhIHByb21pc2luZyBzdHJhdGVneSBmb3IgZGVjYXJib25pemF0aW9uLiBIb3dldmVyLCB0byByZWFjaCBuZXQtemVybyBieSBtaWRjZW50dXJ5LCByZW5ld2FibGUgZWxlY3RyaWNpdHkgYW5kIGVsZWN0cmlmaWNhdGlvbiBoYXZlIHRvIGJlIHNjYWxlZCB1cCB2ZXJ5IHJhcGlkbHkgYW5kIHNpbXVsdGFuZW91c2x5LiBUbyBleHBsb3JlIGhvdyB0aGlzIHRyYW5zaXRpb24gb2YgdGhlIGVuZXJneSBzeXN0ZW0gY291bGQgbG9vayBsaWtlLCB3ZSB1c2UgbW9kZWxzIHRvIGdlbmVyYXRlIGRpZmZlcmVudCBzY2VuYXJpb3Mgb2YgZnV0dXJlIGRlY2FyYm9uaXphdGlvbiBwYXRod2F5cy4gIgogICAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgICBdKQogICAgICAgICAgICAgIF0pLAogICAgICAgICAgICAgIF9jKCJJbnRlcnNlY3Rpb25PYnNlcnZlciIsIHsgYXR0cnM6IHsgc3RlcDogMTMgfSB9LCBbCiAgICAgICAgICAgICAgICBfYygKICAgICAgICAgICAgICAgICAgImgyIiwKICAgICAgICAgICAgICAgICAgeyBzdGF0aWNDbGFzczogInRpdGxlIiwgYXR0cnM6IHsgaWQ6ICJlbGVjdHJpZmljYXRpb24iIH0gfSwKICAgICAgICAgICAgICAgICAgW192bS5fdigiQ2xlYW4gZW5lcmd5IHdpbGwgZnJlZSB1cyBmcm9tIHBvbGx1dGlvbi4iKV0KICAgICAgICAgICAgICAgICksCiAgICAgICAgICAgICAgICBfYygicCIsIFsKICAgICAgICAgICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAgICAgICAgICIgQnkgdXNpbmcgY2xlYW4gZWxlY3RyaWNpdHkgd2Ugd291bGQgYmUgYWJsZSB0byBwaGFzZSBvdXQgYWxsIG90aGVyIGVuZXJneSBjYXJyaWVycyBhbmQgdGhlaXIgZW1pc3Npb25zLiAiCiAgICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICAgIF0pCiAgICAgICAgICAgICAgXSksCiAgICAgICAgICAgICAgX2MoIkludGVyc2VjdGlvbk9ic2VydmVyIiwgeyBhdHRyczogeyBzdGVwOiAxNCB9IH0sIFsKICAgICAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICAgICAiaDIiLAogICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJ0aXRsZSIsCiAgICAgICAgICAgICAgICAgICAgYXR0cnM6IHsgaWQ6ICJlbGVjdHJpZmljYXRpb25fX3NjZW5hcmlvcyIgfQogICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICBbX3ZtLl92KCJIb3cgZmFzdCBjYW4gZWxlY3RyaWZpY2F0aW9uIGN1dCBlbWlzc2lvbnM/IildCiAgICAgICAgICAgICAgICApLAogICAgICAgICAgICAgICAgX2MoInAiLCBbCiAgICAgICAgICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgICAgICAgICAiIFdlIGNhbm5vdCBwcmVkaWN0IHRoZSBmdXR1cmUsIGJ1dCB3ZSBjYW4gY3JlYXRlIGRpZmZlcmVudCBwbGF1c2libGUgc2NlbmFyaW9zIG9mIGhvdyBhIGZ1dHVyZSBkZWNhcmJvbml6YXRpb24gcGF0aHdheSBjb3VsZCBsb29rIGxpa2UuIEFjcm9zcyBvdXIgc2NlbmFyaW8sIHdlIHZhcnkga2V5IHVuY2VydGFpbiBwYXJhbWV0ZXJzIGFuZCBhbmFseXplIGhvdyBuZXQtemVybyBlbWlzc2lvbnMgY2FuIGJlIHJlYWNoZWQuIEZvciBleGFtcGxlLCB3ZSBsb29rIGF0IGRpZmZlcmVudCBlbGVjdHJpZmljYXRpb24gc2hhcmVzIHBlciBzZWN0b3IgYW5kIHRoaW5rIGFib3V0IGhvdyB0aGUgcmVzaWR1YWwgZW1pc3Npb25zIGNhbiBiZSBlcmFzZWQgYnkgbG93LWNhcmJvbiBhbHRlcm5hdGl2ZXMuICIKICAgICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgICAgXSkKICAgICAgICAgICAgICBdKSwKICAgICAgICAgICAgICBfYygiSW50ZXJzZWN0aW9uT2JzZXJ2ZXIiLCB7IGF0dHJzOiB7IHN0ZXA6IDE1IH0gfSwgWwogICAgICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgICAgICJoMiIsCiAgICAgICAgICAgICAgICAgIHsgc3RhdGljQ2xhc3M6ICJ0aXRsZSIsIGF0dHJzOiB7IGlkOiAiZnV0dXJlX19lbWlzc2lvbnMiIH0gfSwKICAgICAgICAgICAgICAgICAgWwogICAgICAgICAgICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgICAgICAgICAgICJIb3cgd2lsbCBlbWlzc2lvbnMgbG9vayBsaWtlIHdpdGhvdXQgYW55IHN0cmF0ZWd5IGltcGxlbWVudGVkPyIKICAgICAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgICAgIF0KICAgICAgICAgICAgICAgICksCiAgICAgICAgICAgICAgICBfYygicCIsIFtfdm0uX3YoIiB0ZXN0by4gIildKQogICAgICAgICAgICAgIF0pLAogICAgICAgICAgICAgIF9jKCJJbnRlcnNlY3Rpb25PYnNlcnZlciIsIHsgYXR0cnM6IHsgc3RlcDogMTYgfSB9LCBbCiAgICAgICAgICAgICAgICBfYygKICAgICAgICAgICAgICAgICAgImgyIiwKICAgICAgICAgICAgICAgICAgeyBzdGF0aWNDbGFzczogInRpdGxlIiwgYXR0cnM6IHsgaWQ6ICJnbG9iYWxfX3N0cmF0ZWdpZXMiIH0gfSwKICAgICAgICAgICAgICAgICAgWwogICAgICAgICAgICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgICAgICAgICAgICJJbXBsZW1lbnRpbmcgYSBnbG9iYWwgc3RyYXRlZ3kgZm9yIGEgc21vb3RoIHRyYW5zaXRpb24uIgogICAgICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICAgICAgXQogICAgICAgICAgICAgICAgKSwKICAgICAgICAgICAgICAgIF9jKCJwIiwgW192bS5fdigiIHRlc3RvLiAiKV0pCiAgICAgICAgICAgICAgXSksCiAgICAgICAgICAgICAgX2MoIkludGVyc2VjdGlvbk9ic2VydmVyIiwgeyBhdHRyczogeyBzdGVwOiAxNyB9IH0sIFsKICAgICAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICAgICAiaDIiLAogICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJ0aXRsZSIsCiAgICAgICAgICAgICAgICAgICAgYXR0cnM6IHsgaWQ6ICJncmFkdWFsX2RlY2FyYm9uaXphdGlvbiIgfQogICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICBbX3ZtLl92KCJEZWNhcmJvbmlzYXRpb24gc2hvdWxkIGhhcHBlbiBncmFkdWFsbHkgaW4gdGltZS4iKV0KICAgICAgICAgICAgICAgICksCiAgICAgICAgICAgICAgICBfYygicCIsIFtfdm0uX3YoIiB0ZXN0by4gIildKQogICAgICAgICAgICAgIF0pLAogICAgICAgICAgICAgIF9jKCJJbnRlcnNlY3Rpb25PYnNlcnZlciIsIHsgYXR0cnM6IHsgc3RlcDogMTkgfSB9LCBbCiAgICAgICAgICAgICAgICBfYygKICAgICAgICAgICAgICAgICAgImgyIiwKICAgICAgICAgICAgICAgICAgeyBzdGF0aWNDbGFzczogInRpdGxlIiwgYXR0cnM6IHsgaWQ6ICJleHBsb3JlX19zY2VuYXJpb3MiIH0gfSwKICAgICAgICAgICAgICAgICAgWwogICAgICAgICAgICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgICAgICAgICAgICJUaGUgZmFzdGVyIHRoZSBzdHJhdGVneSBzdGVwcyBhcmUgaW1wbGVtZW50ZWQsIHRoZSBjbG9zZXIgd2XigJlsbCBnZXQgdG8gTmV0LVplcm8uIgogICAgICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICAgICAgXQogICAgICAgICAgICAgICAgKSwKICAgICAgICAgICAgICAgIF9jKCJwIiwgW192bS5fdigiIHRlc3RvLiAiKV0pCiAgICAgICAgICAgICAgXSkKICAgICAgICAgICAgXSwKICAgICAgICAgICAgMQogICAgICAgICAgKQogICAgICAgIF0KICAgICAgKQogICAgXSwKICAgIDEKICApCn0KdmFyIHN0YXRpY1JlbmRlckZucyA9IFtdCnJlbmRlci5fd2l0aFN0cmlwcGVkID0gdHJ1ZQoKZXhwb3J0IHsgcmVuZGVyLCBzdGF0aWNSZW5kZXJGbnMgfQ=="}]}