{"remainingRequest":"/Users/francescamorini/projects/transition-module-senses/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/francescamorini/projects/transition-module-senses/src/components/EnergyCarriers.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/francescamorini/projects/transition-module-senses/src/components/EnergyCarriers.vue","mtime":1574245007454},{"path":"/Users/francescamorini/projects/transition-module-senses/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/francescamorini/projects/transition-module-senses/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/francescamorini/projects/transition-module-senses/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/francescamorini/projects/transition-module-senses/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:Ly8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KCmltcG9ydCAqIGFzIGQzIGZyb20gJ2QzJwppbXBvcnQgXyBmcm9tICdsb2Rhc2gnCgovLyBkYXRhCmltcG9ydCBDYXJyaWVyc1JlcG9ydCBmcm9tICcuLi9hc3NldHMvZGF0YS93b3JsZF9yZWdpb25hbF9yZXBvcnQuanNvbicKCmV4cG9ydCBkZWZhdWx0IHsKICBuYW1lOiAnRW5lcmd5Q2FycmllcnMnLAogIHByb3BzOiB7CiAgICB3aWR0aDogewogICAgICB0eXBlOiBOdW1iZXIsCiAgICAgIHJlcXVpcmVkOiB0cnVlCiAgICB9LAogICAgaGVpZ2h0OiB7CiAgICAgIHR5cGU6IE51bWJlciwKICAgICAgcmVxdWlyZWQ6IHRydWUKICAgIH0sCiAgICBzdGVwOiB7CiAgICAgIHR5cGU6IE51bWJlciwKICAgICAgZGVmYXVsdDogMAogICAgfQogIH0sCiAgZGF0YSAoKSB7CiAgICByZXR1cm4gewogICAgICBDYXJyaWVyc1JlcG9ydCwKICAgICAgbWFyZ2luOiB7CiAgICAgICAgbGVmdDogNzAsCiAgICAgICAgdG9wOiAzMCwKICAgICAgICBib3R0b206IDMwLAogICAgICAgIHJpZ2h0OiA0MAogICAgICB9LAogICAgICBlbmVyZ3lMYWJlbHM6IFsKICAgICAgICAnY29hbCcsCiAgICAgICAgJ2VsZWN0cmljaXR5JywKICAgICAgICAnZ2FzJywKICAgICAgICAnbXRiaW8nLAogICAgICAgICdub24tYmlvcmVuJywKICAgICAgICAnbnVjbGVhcicsCiAgICAgICAgJ29pbCcsCiAgICAgICAgJ290aGVyJywKICAgICAgICAnb3RoZXIgZ2FzJywKICAgICAgICAnb3RoZXIgbGlxdWlkcycsCiAgICAgICAgJ290aGVyIHNvbGlkcycKICAgICAgXQogICAgfQogIH0sCiAgY29tcHV0ZWQ6IHsKICAgIGlubmVyV2lkdGggKCkgewogICAgICByZXR1cm4gdGhpcy53aWR0aCAtIHRoaXMubWFyZ2luLmxlZnQgLSB0aGlzLm1hcmdpbi5yaWdodAogICAgfSwKICAgIGlubmVySGVpZ2h0ICgpIHsKICAgICAgcmV0dXJuIHRoaXMuaGVpZ2h0IC0gdGhpcy5tYXJnaW4udG9wIC0gdGhpcy5tYXJnaW4uYm90dG9tCiAgICB9LAogICAgLy8gZGF0YSBuZXcgc3RydWN0dXJlIGFuZCBzZWxlY3Rpb24KICAgIG5lc3RWYXJpYWJsZXMgKCkgewogICAgICBjb25zdCBjYXJyaWVycyA9IHRoaXMuQ2FycmllcnNSZXBvcnQKICAgICAgcmV0dXJuIHsKICAgICAgICBjYXJyaWVycywKICAgICAgICBncm91cHNieXJlZ2lvbjogXy5ncm91cEJ5KGNhcnJpZXJzLCAncmVnaW9uJyksCiAgICAgICAgYWxsRnVlbHM6IF8udW5pcShfLm1hcChjYXJyaWVycywgJ2Z1ZWwnKSksCiAgICAgICAgc2VjdG9yczogWydpbmR1c3RyeScsICd0cmFuc3BvcnQnLCAncmVzaWRlbnRpYWwnLCAnZWxlY3RyaWNpdHknXQogICAgICB9CiAgICB9LAogICAgZGF0YU5lc3QgKCkgewogICAgICBjb25zdCB7CiAgICAgICAgY2FycmllcnMsCiAgICAgICAgZ3JvdXBzYnlyZWdpb24sCiAgICAgICAgYWxsRnVlbHMsCiAgICAgICAgc2VjdG9ycwogICAgICB9ID0gdGhpcy5uZXN0VmFyaWFibGVzCgogICAgICBfLmZvckVhY2goZ3JvdXBzYnlyZWdpb24sIChhcnIsIGtleSkgPT4gewogICAgICAgIGNvbnN0IG9iaiA9IHt9CiAgICAgICAgXy5mb3JFYWNoKHNlY3RvcnMsIHNlY3RvciA9PiB7CiAgICAgICAgICBjb25zdCBmdWVsT2JqID0ge30KICAgICAgICAgIF8uZm9yRWFjaChhbGxGdWVscywgKGZ1ZWwsIGkpID0+IHsKICAgICAgICAgICAgY29uc3QgZGF0YSA9IF8ubWFwKGFyciwgc2VjdG9yKQogICAgICAgICAgICBmdWVsT2JqW2Z1ZWxdID0gZGF0YVtpXQogICAgICAgICAgfSkKICAgICAgICAgIG9ialtzZWN0b3JdID0gZnVlbE9iagogICAgICAgIH0pCiAgICAgICAgZ3JvdXBzYnlyZWdpb25ba2V5XSA9IG9iagogICAgICB9KQogICAgICByZXR1cm4gZ3JvdXBzYnlyZWdpb24KICAgIH0sCiAgICBkYXRhRmlsdGVyICgpIHsKICAgICAgY29uc3QgZ3JvdXBzYnlyZWdpb24gPSB0aGlzLmRhdGFOZXN0CiAgICAgIHJldHVybiBncm91cHNieXJlZ2lvblsnV29ybGQnXQogICAgfSwKICAgIC8vIFNjYWxlcwogICAgc2NhbGVZICgpIHsKICAgICAgY29uc3Qgc2VsZWN0ZWRSZWdpb24gPSB0aGlzLmRhdGFGaWx0ZXIKICAgICAgbGV0IG1heEVuZXJneSA9IFtdCiAgICAgIGNvbnN0IHRvdGFsRW5lcmd5ID0gXy5tYXAoc2VsZWN0ZWRSZWdpb24sICh2YWx1ZSwgZnVlbCkgPT4gewogICAgICAgIGxldCBmdWVscyA9IGQzLnZhbHVlcyhzZWxlY3RlZFJlZ2lvbltmdWVsXSkKICAgICAgICBsZXQgbWF4VmFsdWUgPSBkMy5tYXgoZnVlbHMpCiAgICAgICAgbWF4RW5lcmd5LnB1c2gobWF4VmFsdWUpCiAgICAgIH0pCgogICAgICBjb25zdCB5ID0gZDMuc2NhbGVMaW5lYXIoKQogICAgICAgIC5kb21haW4oWzAsIG1heEVuZXJneS5yZWR1Y2UoKHN1bSwgdmFsKSA9PiBzdW0gKyB2YWwsIDApXSkKICAgICAgICAucmFuZ2UoWzAsIDMwMF0pCgogICAgICByZXR1cm4geQogICAgfSwKICAgIHNjYWxlWCAoKSB7CiAgICAgIGNvbnN0IHNlbGVjdGVkUmVnaW9uID0gdGhpcy5kYXRhRmlsdGVyCiAgICAgIGNvbnN0IHsgd2lkdGgsIGhlaWdodCB9ID0gdGhpcwogICAgICBjb25zdCBiYXJXaWR0aCA9ICh3aWR0aCArIHRoaXMubWFyZ2luLmxlZnQpIC8gMgogICAgICBjb25zdCBlbGUgPSBkMy52YWx1ZXMoc2VsZWN0ZWRSZWdpb24uZWxlY3RyaWNpdHkpCiAgICAgIGNvbnN0IGluZCA9IGQzLnZhbHVlcyhzZWxlY3RlZFJlZ2lvbi5pbmR1c3RyeSkKICAgICAgY29uc3QgdHJhbiA9IGQzLnZhbHVlcyhzZWxlY3RlZFJlZ2lvbi50cmFuc3BvcnQpCiAgICAgIGNvbnN0IHJlcyA9IGQzLnZhbHVlcyhzZWxlY3RlZFJlZ2lvbi5yZXNpZGVudGlhbCkKICAgICAgLy8gZGVmaW5pbmcgc2NhbGVzIGZvciBkaWZmZXJlbnQgc2VjdG9ycwogICAgICBjb25zdCBlbGVjdHJpY2l0eSA9IGQzLnNjYWxlTGluZWFyKCkKICAgICAgICAuZG9tYWluKFswLCBlbGUucmVkdWNlKChzdW0sIHZhbCkgPT4gc3VtICsgdmFsLCAwKV0pCiAgICAgICAgLnJhbmdlKFswLCBiYXJXaWR0aF0pCgogICAgICBjb25zdCBpbmR1c3RyeSA9IGQzLnNjYWxlTGluZWFyKCkKICAgICAgICAuZG9tYWluKFswLCBpbmQucmVkdWNlKChzdW0sIHZhbCkgPT4gc3VtICsgdmFsLCAwKV0pCiAgICAgICAgLnJhbmdlKFswLCBiYXJXaWR0aF0pCgogICAgICBjb25zdCB0cmFuc3BvcnQgPSBkMy5zY2FsZUxpbmVhcigpCiAgICAgICAgLmRvbWFpbihbMCwgdHJhbi5yZWR1Y2UoKHN1bSwgdmFsKSA9PiBzdW0gKyB2YWwsIDApXSkKICAgICAgICAucmFuZ2UoWzAsIGJhcldpZHRoXSkKCiAgICAgIGNvbnN0IHJlc2lkZW50aWFsID0gZDMuc2NhbGVMaW5lYXIoKQogICAgICAgIC5kb21haW4oWzAsIHJlcy5yZWR1Y2UoKHN1bSwgdmFsKSA9PiBzdW0gKyB2YWwsIDApXSkKICAgICAgICAucmFuZ2UoWzAsIGJhcldpZHRoXSkKCiAgICAgIHJldHVybiB7CiAgICAgICAgZWxlY3RyaWNpdHksCiAgICAgICAgaW5kdXN0cnksCiAgICAgICAgcmVzaWRlbnRpYWwsCiAgICAgICAgdHJhbnNwb3J0CiAgICAgIH0KICAgIH0sCiAgICBjcmVhdGVSZWN0ICgpIHsKICAgICAgY29uc3Qgc2VsZWN0ZWRSZWdpb24gPSB0aGlzLmRhdGFGaWx0ZXIKICAgICAgY29uc3Qgc2NhbGUgPSB0aGlzLnNjYWxlWAogICAgICBjb25zdCB5ID0gdGhpcy5zY2FsZVkKICAgICAgY29uc3QgcGVyY1NjYWxlID0gdGhpcy5zY2FsZVBlcmMKICAgICAgbGV0IHNlY3RvckhlaWdodCA9IDAKCiAgICAgIGNvbnN0IHNlY3RvcnMgPSBfLm1hcChzZWxlY3RlZFJlZ2lvbiwgKHNlY3Rvciwga2V5KSA9PiB7CiAgICAgICAgbGV0IFZhbHVlU3VtID0gZDMuc3VtKGQzLnZhbHVlcyhzZWxlY3RlZFJlZ2lvbltrZXldKSkKICAgICAgICBsZXQgeVZhbHVlID0geShWYWx1ZVN1bSkKCiAgICAgICAgbGV0IGluaXRpYWxIZWlnaHQgPSBzZWN0b3JIZWlnaHQKICAgICAgICBzZWN0b3JIZWlnaHQgPSBzZWN0b3JIZWlnaHQgKyB5VmFsdWUgKyAyMAoKICAgICAgICBsZXQgdG90YWxEaXN0ID0gMAogICAgICAgIGNvbnN0IHJlY3RzID0gXy5tYXAoc2VsZWN0ZWRSZWdpb25ba2V5XSwgKGl0ZW0sIGkpID0+IHsKICAgICAgICAgIGxldCBpbml0aWFsRGlzdCA9IHRvdGFsRGlzdAogICAgICAgICAgdG90YWxEaXN0ID0gdG90YWxEaXN0ICsgc2NhbGVba2V5XShpdGVtKQoKICAgICAgICAgIHJldHVybiB7CiAgICAgICAgICAgIGxhYmVsczogaSwKICAgICAgICAgICAgZGlzdDogaW5pdGlhbERpc3QsCiAgICAgICAgICAgIHJlY3RXaWR0aDogc2NhbGVba2V5XShpdGVtKQogICAgICAgICAgfQogICAgICAgIH0pCiAgICAgICAgY29uc29sZS5sb2cocmVjdHMpCiAgICAgICAgcmV0dXJuIHsKICAgICAgICAgIHJlY3RzLAogICAgICAgICAgc2VjdG9yOiBrZXksCiAgICAgICAgICBzZWN0b3JIZWlnaHQ6IGluaXRpYWxIZWlnaHQsCiAgICAgICAgICByZWN0SGVpZ2h0OiB5VmFsdWUKICAgICAgICB9CiAgICAgIH0pCiAgICAgIHJldHVybiBzZWN0b3JzCiAgICB9LAogICAgY3JlYXRlRW5MYWJlbHMgKCkgewogICAgICBjb25zdCBlbmVyZ2llcyA9IHRoaXMuZW5lcmd5TGFiZWxzCiAgICAgIHJldHVybiBlbmVyZ2llcwogICAgfQogIH0KfQo="},{"version":3,"sources":["EnergyCarriers.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAofile":"EnergyCarriers.vue","sourceRoot":"src/components","sourcesContent":["<template>\n  <div class=\"visualization\" id=\"carriers\" width=\"90%\">\n    <svg width=\"80%\" height=\"100%\" :transform=\"'translate('+ margin.left * 2 + ',0)'\">\n      <g :transform=\"'translate('+ margin.left + ',' + margin.top + ')'\">\n        <g\n          v-for=\"(sector,i) in createRect\"\n          v-bind:key=\"i\"\n          :id=\"sector.sector\"\n          :transform=\"'translate('+ margin.left * 2 + ',' + sector.sectorHeight +')'\"\n        >\n          <rect\n            class=\"fuel_rect\"\n            :class=\"sector.sector\"\n            v-for=\"(rect, i) in sector.rects\"\n            v-bind:key=\"i\"\n            :id=\"rect.labels\"\n            :x=\"rect.dist\"\n            :width=\"rect.rectWidth\"\n            :height=\"sector.rectHeight\"\n          />\n        </g>\n        <text\n        class=\"sector-labels\"\n        v-for=\"(sector) in createRect\"\n        v-bind:key=\"sector.sector\"\n        :transform=\"'translate('+ ((width + margin.left) / 2) + ',' + (sector.sectorHeight + 10) +')'\"\n        >\n        {{sector.sector}}\n      </text>\n      </g>\n      <text v-for=\"(energy, i) in createEnLabels\" v-bind:key=\"i\">{{energy}}</text>\n    </svg>\n  </div>\n</template>\n\n<script>\nimport * as d3 from 'd3'\nimport _ from 'lodash'\n\n// data\nimport CarriersReport from '../assets/data/world_regional_report.json'\n\nexport default {\n  name: 'EnergyCarriers',\n  props: {\n    width: {\n      type: Number,\n      required: true\n    },\n    height: {\n      type: Number,\n      required: true\n    },\n    step: {\n      type: Number,\n      default: 0\n    }\n  },\n  data () {\n    return {\n      CarriersReport,\n      margin: {\n        left: 70,\n        top: 30,\n        bottom: 30,\n        right: 40\n      },\n      energyLabels: [\n        'coal',\n        'electricity',\n        'gas',\n        'mtbio',\n        'non-bioren',\n        'nuclear',\n        'oil',\n        'other',\n        'other gas',\n        'other liquids',\n        'other solids'\n      ]\n    }\n  },\n  computed: {\n    innerWidth () {\n      return this.width - this.margin.left - this.margin.right\n    },\n    innerHeight () {\n      return this.height - this.margin.top - this.margin.bottom\n    },\n    // data new structure and selection\n    nestVariables () {\n      const carriers = this.CarriersReport\n      return {\n        carriers,\n        groupsbyregion: _.groupBy(carriers, 'region'),\n        allFuels: _.uniq(_.map(carriers, 'fuel')),\n        sectors: ['industry', 'transport', 'residential', 'electricity']\n      }\n    },\n    dataNest () {\n      const {\n        carriers,\n        groupsbyregion,\n        allFuels,\n        sectors\n      } = this.nestVariables\n\n      _.forEach(groupsbyregion, (arr, key) => {\n        const obj = {}\n        _.forEach(sectors, sector => {\n          const fuelObj = {}\n          _.forEach(allFuels, (fuel, i) => {\n            const data = _.map(arr, sector)\n            fuelObj[fuel] = data[i]\n          })\n          obj[sector] = fuelObj\n        })\n        groupsbyregion[key] = obj\n      })\n      return groupsbyregion\n    },\n    dataFilter () {\n      const groupsbyregion = this.dataNest\n      return groupsbyregion['World']\n    },\n    // Scales\n    scaleY () {\n      const selectedRegion = this.dataFilter\n      let maxEnergy = []\n      const totalEnergy = _.map(selectedRegion, (value, fuel) => {\n        let fuels = d3.values(selectedRegion[fuel])\n        let maxValue = d3.max(fuels)\n        maxEnergy.push(maxValue)\n      })\n\n      const y = d3.scaleLinear()\n        .domain([0, maxEnergy.reduce((sum, val) => sum + val, 0)])\n        .range([0, 300])\n\n      return y\n    },\n    scaleX () {\n      const selectedRegion = this.dataFilter\n      const { width, height } = this\n      const barWidth = (width + this.margin.left) / 2\n      const ele = d3.values(selectedRegion.electricity)\n      const ind = d3.values(selectedRegion.industry)\n      const tran = d3.values(selectedRegion.transport)\n      const res = d3.values(selectedRegion.residential)\n      // defining scales for different sectors\n      const electricity = d3.scaleLinear()\n        .domain([0, ele.reduce((sum, val) => sum + val, 0)])\n        .range([0, barWidth])\n\n      const industry = d3.scaleLinear()\n        .domain([0, ind.reduce((sum, val) => sum + val, 0)])\n        .range([0, barWidth])\n\n      const transport = d3.scaleLinear()\n        .domain([0, tran.reduce((sum, val) => sum + val, 0)])\n        .range([0, barWidth])\n\n      const residential = d3.scaleLinear()\n        .domain([0, res.reduce((sum, val) => sum + val, 0)])\n        .range([0, barWidth])\n\n      return {\n        electricity,\n        industry,\n        residential,\n        transport\n      }\n    },\n    createRect () {\n      const selectedRegion = this.dataFilter\n      const scale = this.scaleX\n      const y = this.scaleY\n      const percScale = this.scalePerc\n      let sectorHeight = 0\n\n      const sectors = _.map(selectedRegion, (sector, key) => {\n        let ValueSum = d3.sum(d3.values(selectedRegion[key]))\n        let yValue = y(ValueSum)\n\n        let initialHeight = sectorHeight\n        sectorHeight = sectorHeight + yValue + 20\n\n        let totalDist = 0\n        const rects = _.map(selectedRegion[key], (item, i) => {\n          let initialDist = totalDist\n          totalDist = totalDist + scale[key](item)\n\n          return {\n            labels: i,\n            dist: initialDist,\n            rectWidth: scale[key](item)\n          }\n        })\n        console.log(rects)\n        return {\n          rects,\n          sector: key,\n          sectorHeight: initialHeight,\n          rectHeight: yValue\n        }\n      })\n      return sectors\n    },\n    createEnLabels () {\n      const energies = this.energyLabels\n      return energies\n    }\n  }\n}\n</script>\n\n<!-- Add \"scoped\" attribute to limit CSS to this component only -->\n<style scoped lang=\"scss\">\n@import \"library/src/style/variables.scss\";\n\n.visualization {\n  width: inherit;\n  height: inherit;\n}\n\n.fuel_rect {\n  stroke: $color-yellow;\n  fill: getColor(yellow, 80)\n}\n</style>\n"]}]}