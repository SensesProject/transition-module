{"remainingRequest":"/Users/francescamorini/projects/transition-module/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/francescamorini/projects/transition-module/src/components/chart.vue?vue&type=style&index=0&id=54d6f604&scoped=true&lang=scss&","dependencies":[{"path":"/Users/francescamorini/projects/transition-module/src/components/chart.vue","mtime":1572536223167},{"path":"/Users/francescamorini/projects/transition-module/node_modules/css-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/francescamorini/projects/transition-module/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":499162500000},{"path":"/Users/francescamorini/projects/transition-module/node_modules/postcss-loader/src/index.js","mtime":499162500000},{"path":"/Users/francescamorini/projects/transition-module/node_modules/sass-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/francescamorini/projects/transition-module/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/francescamorini/projects/transition-module/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgovLyBAaW1wb3J0ICJsaWJyYXJ5L3NyYy9zdHlsZS9iYXNlLnNjc3MiOwpAaW1wb3J0ICJsaWJyYXJ5L3NyYy9zdHlsZS92YXJpYWJsZXMuc2NzcyI7CgoubGluZURvdHRlZCB7CiAgc3Ryb2tlOiAjYjFiMWIxOwogIHN0cm9rZS1kYXNoYXJyYXk6IDQ7Cn0KCi5saW5lIHsKICBzdHJva2U6IGRhcmtlbiggJGNvbG9yLXllbGxvdywgNTAlICk7CiAgZmlsbDogbm9uZTsKfQoKLmFyZWEgewogIC8vc3Ryb2tlOiBkYXJrZW4oICRjb2xvci1ncmVlbiwgNTAlICk7Cn0KCiNFbGVjdHJpY2l0eSB7CiAgZmlsbDogZGFya2VuKCAkY29sb3IteWVsbG93LCA1JSApOwp9CgojQnVpbGRpbmcgewogIGZpbGw6IGRhcmtlbiggJGNvbG9yLXllbGxvdywgMjAlICk7Cn0KCiNUcmFuc3BvcnRzIHsKICBmaWxsOiBkYXJrZW4oICRjb2xvci15ZWxsb3csIDQwJSApOwp9CgojT3RoZXJFbmVyZ3kgewogIGZpbGw6IGRlc2F0dXJhdGUoICRjb2xvci15ZWxsb3csIDYwJSApOwp9CgojSW5kdXN0cnkgewogIGZpbGw6IGRhcmtlbigkY29sb3IteWVsbG93LCAzMCUpOwp9Cgo="},{"version":3,"sources":["chart.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAkPA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA","file":"chart.vue","sourceRoot":"src/components","sourcesContent":["<template>\n  <div>\n  <svg v-bind:width='chartWidth()' height='90%' viewBox='-30 0 900 1000'>\n    <g class='lineChart' v-bind:transform='translate()'>\n    <g class='stacked-emissions' v-if=\"step >=3 && step <=4\">\n        <path class=\"area\" v-for=\"(item, i) in items\" v-bind:key='i' :d='item.d' :id='item.id'/>\n    </g>\n      <g id=\"one-line-chart\" v-if=\"step <=3\">\n        <path class='line' :d='line'/>\n        <Axis class='yA' v-bind:scales='getScale().yAxis' v-bind:chartDefaults='chartDefaults' v-bind:data='emissions' v-bind:trns='trnsY'/>\n        <Axis class='xA' v-bind:scales='getScale().xAxis' v-bind:chartDefaults='chartDefaults' v-bind:data='emissions' v-bind:trns='trnsX()'/>\n        <Dotted class='lineDotted' :x1='0' :y1='43' :x2='215' :y2='43'/>\n        <Dotted class='lineDotted' :x1='215' :y1='43' :x2='618' :y2='400'/>\n        <Dotted class='lineDotted' :x1='215' :y1='43' :x2='435' :y2='400'/>\n        <GoalAnnotations/>\n        <PopUpLabel :transform='\"translate(310, 200)\"' goal='1.5°' v-if=\"step <=2\"/>\n        <PopUpLabel :transform='\"translate(430, 220)\"'goal='2.0°' v-if=\"step <=2\"/>\n      </g>\n      <g class='labels-sector' v-if=\"step ==3\"><LabelsLinechart/></g>\n    </g>\n  <chartanimated class='subsector-stacked' v-if=\"step >=3 && step <=4\"/>\n  </svg>\n  <!-- <p>{{step}}</p> -->\n  </div>\n</template>\n\n<script>\nimport * as d3 from 'd3'\nimport { mapState } from 'vuex'\nimport Axis from './axis.vue'\nimport dottedline from './dottedlines.vue'\nimport LabelsLinechart from './LabelsLinechart.vue'\nimport GoalAnnotations from './LinechartGoalAnnotations.vue'\nimport PopUpLabel from './LinechartPopUp.vue'\nimport chartanimated from './chartanimated.vue'\n\nimport emissionsData from '../assets/emissions.json'\nimport sectors from '../assets/emissions-stacked.json'\n\nexport default {\n  name: 'chart',\n  props: {\n    label: String\n  },\n  components: {\n    Axis,\n    Dotted: dottedline,\n    LabelsLinechart,\n    chartanimated,\n    GoalAnnotations,\n    PopUpLabel\n  },\n  data () {\n    return {\n      emissions: emissionsData,\n      sectors: sectors,\n      chartDefaults: {\n        width: 1000,\n        height: 400,\n        chartId: 'linechart-vue',\n        title: 'Emissions',\n        margin: {\n          top: 5,\n          right: 50,\n          bottom: 25,\n          left: 0\n        },\n        data: []\n      },\n      line: '',\n      translate: this.getTranslation,\n      translateLine: 'translate(0,0)',\n      trnsY: 'translate(0,0)',\n      trnsX: this.getTrnsx,\n      toggleClass: true,\n      chartWidth: this.getWidth\n    }\n  },\n  mounted () {\n    this.calculatePath()\n  },\n  methods: {\n    getScale () {\n      var parseDate = d3.timeParse('%Y')\n      this.emissions.forEach(function (d) {\n        d.date = parseDate(d.Year)\n      })\n      var x = d3\n        .scaleTime()\n        .domain([d3.min(this.emissions, d => d.date), parseDate(2100)])\n        .rangeRound([0, this.chartDefaults.width - 100])\n\n      var y = d3\n        .scaleLinear()\n        .domain([0, 40000000])\n        .range([this.chartDefaults.height, 0])\n\n      d3.axisBottom().scale(x)\n      d3.axisLeft().scale(y)\n\n      var xAxis = d3\n        .axisBottom()\n        .scale(x)\n        .tickSize(0)\n        .tickPadding(10)\n        .tickFormat(d3.timeFormat('%Y'))\n        .ticks(d3.timeYear.every(10))\n      //        .splice(1)\n\n      var yAxis = d3\n        .axisLeft()\n        .scale(y)\n        .tickValues([d3.max(this.emissions, d => d.Emissions), 40000000])\n\n      return {\n        x,\n        y,\n        xAxis,\n        yAxis\n      }\n    },\n    newScale () {\n      var parseDate = d3.timeParse('%Y')\n      this.emissions.forEach(function (d) {\n        d.date = parseDate(d.Year)\n      })\n      var x = d3\n        .scaleTime()\n        .domain([d3.min(this.emissions, d => d.date), d3.max(this.emissions, d => d.date)])\n        .rangeRound([0, this.chartDefaults.width])\n\n      var y = d3\n        .scaleLinear()\n        .domain([0, 40000000])\n        .range([this.chartDefaults.height, -100])\n\n      d3.axisBottom().scale(x)\n      d3.axisLeft().scale(y)\n\n      var xAxis = d3\n        .axisTop()\n        .scale(x)\n        .tickFormat(d3.timeFormat('%Y'))\n        .ticks(d3.timeYear.every(5))\n\n      var yAxis = d3\n        .axisRight()\n        .scale(y)\n        .tickValues([10000000, 20000000, 30000000, 40000000])\n        .tickSize(830)\n        .tickPadding(6)\n\n      return {\n        x,\n        y,\n        xAxis,\n        yAxis\n      }\n    },\n    getTrnsx (chartDefaults) {\n      const t = 'translate(0,' + this.chartDefaults.height + ')'\n      return t\n    },\n    getTranslation (chartDefaults) {\n      var tr = 'translate(' + 100 + ',' + 200 + ')'\n      if (this.step === 4) {\n        tr = 'translate(' + -30 + ',' + 280 + ')'\n      }\n      return tr\n    },\n    getWidth (chartDefaults) {\n      var width = '90%'\n      if (this.step === 4) {\n        width = '100%'\n      }\n      return width\n    },\n    calculatePath () {\n      const scale = this.getScale()\n\n      const path = d3\n        .line()\n        .x(d => { return scale.x(d.date) })\n        .y(d => { return scale.y(d.Emissions) })\n        .curve(d3.curveCatmullRom)\n\n      this.line = path(this.emissions)\n    }\n  },\n  computed: {\n    ...mapState({\n      step: state => state.scrollytelling ? state.scrollytelling.step : null\n    }),\n    items () {\n      const areas = ['Transports', 'Industry', 'Building', 'Electricity', 'OtherEnergy']\n      var scale = this.getScale()\n      if (this.step === 4) {\n        scale = this.newScale()\n      }\n\n      const parseDate = d3.timeParse('%Y')\n      const data = this.sectors\n\n      data.forEach(function (d) {\n        d.date = parseDate(d.Year)\n      })\n\n      var areaFixed = d3\n        .area()\n        .x(d => { return scale.x(d.date) })\n        .curve(d3.curveCatmullRom)\n\n      const newAreas = areas.map(function (item, i) {\n        areaFixed\n          .y0(d => {\n            let sum = 0\n            for (let n = 0; n < i; n++) {\n              sum = sum + d[areas[n]]\n            }\n            return scale.y(sum)\n          })\n          .y1(d => {\n            let sum = 0\n            for (let n = 0; n <= i; n++) {\n              sum = sum + d[areas[n]]\n            }\n            return scale.y(sum)\n          })\n        return {\n          d: areaFixed(data),\n          id: areas[i]\n        }\n      })\n\n      return newAreas\n    }\n  }\n}\n</script>\n\n<!-- Add \"scoped\" attribute to limit CSS to this component only -->\n<style scoped lang=\"scss\">\n// @import \"library/src/style/base.scss\";\n@import \"library/src/style/variables.scss\";\n\n.lineDotted {\n  stroke: #b1b1b1;\n  stroke-dasharray: 4;\n}\n\n.line {\n  stroke: darken( $color-yellow, 50% );\n  fill: none;\n}\n\n.area {\n  //stroke: darken( $color-green, 50% );\n}\n\n#Electricity {\n  fill: darken( $color-yellow, 5% );\n}\n\n#Building {\n  fill: darken( $color-yellow, 20% );\n}\n\n#Transports {\n  fill: darken( $color-yellow, 40% );\n}\n\n#OtherEnergy {\n  fill: desaturate( $color-yellow, 60% );\n}\n\n#Industry {\n  fill: darken($color-yellow, 30%);\n}\n\n</style>\n"]}]}